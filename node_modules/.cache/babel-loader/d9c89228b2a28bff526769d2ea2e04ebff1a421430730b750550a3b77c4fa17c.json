{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { credentialLogger, formatError } from \"../util/logging\";\nconst BrowserNotSupportedError = new Error(\"WorkloadIdentityCredential is not supported in the browser.\");\nconst logger = credentialLogger(\"WorkloadIdentityCredential\");\n/**\n * WorkloadIdentityCredential supports Microsoft Entra Workload ID authentication on Kubernetes.\n * Refer to <a href=\"https://learn.microsoft.com/azure/aks/workload-identity-overview\">Microsoft Entra Workload ID</a>\n * for more information.\n */\nexport class WorkloadIdentityCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n  /**\n   * Only available in Node.js\n   */\n  getToken() {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}","map":{"version":3,"names":["credentialLogger","formatError","BrowserNotSupportedError","Error","logger","WorkloadIdentityCredential","constructor","info","getToken"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\credentials\\workloadIdentityCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"WorkloadIdentityCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"WorkloadIdentityCredential\");\n\n/**\n * WorkloadIdentityCredential supports Microsoft Entra Workload ID authentication on Kubernetes.\n * Refer to <a href=\"https://learn.microsoft.com/azure/aks/workload-identity-overview\">Microsoft Entra Workload ID</a>\n * for more information.\n */\nexport class WorkloadIdentityCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  /**\n   * Only available in Node.js\n   */\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,iBAAiB;AAE/D,MAAMC,wBAAwB,GAAG,IAAIC,KAAK,CACxC,6DAA6D,CAC9D;AACD,MAAMC,MAAM,GAAGJ,gBAAgB,CAAC,4BAA4B,CAAC;AAE7D;;;;;AAKA,OAAM,MAAOK,0BAA0B;EACrC;;;EAGAC,YAAA;IACEF,MAAM,CAACG,IAAI,CAACN,WAAW,CAAC,EAAE,EAAEC,wBAAwB,CAAC,CAAC;IACtD,MAAMA,wBAAwB;EAChC;EAEA;;;EAGOM,QAAQA,CAAA;IACbJ,MAAM,CAACI,QAAQ,CAACD,IAAI,CAACN,WAAW,CAAC,EAAE,EAAEC,wBAAwB,CAAC,CAAC;IAC/D,MAAMA,wBAAwB;EAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}