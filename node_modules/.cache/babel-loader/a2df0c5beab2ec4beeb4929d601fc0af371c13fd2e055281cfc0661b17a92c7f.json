{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\nvar crypto = _interopRequireWildcard(require(\"crypto\"));\nvar _jsMd = _interopRequireDefault(require(\"js-md4\"));\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass NTLMResponsePayload {\n  constructor(loginData) {\n    this.data = this.createResponse(loginData);\n  }\n  toString(indent = '') {\n    return indent + 'NTLM Auth';\n  }\n  createResponse(challenge) {\n    const client_nonce = this.createClientNonce();\n    const lmv2len = 24;\n    const ntlmv2len = 16;\n    const domain = challenge.domain;\n    const username = challenge.userName;\n    const password = challenge.password;\n    const ntlmData = challenge.ntlmpacket;\n    const server_data = ntlmData.target;\n    const server_nonce = ntlmData.nonce;\n    const bufferLength = 64 + domain.length * 2 + username.length * 2 + lmv2len + ntlmv2len + 8 + 8 + 8 + 4 + server_data.length + 4;\n    const data = new _writableTrackingBuffer.default(bufferLength);\n    data.position = 0;\n    data.writeString('NTLMSSP\\u0000', 'utf8');\n    data.writeUInt32LE(0x03);\n    const baseIdx = 64;\n    const dnIdx = baseIdx;\n    const unIdx = dnIdx + domain.length * 2;\n    const l2Idx = unIdx + username.length * 2;\n    const ntIdx = l2Idx + lmv2len;\n    data.writeUInt16LE(lmv2len);\n    data.writeUInt16LE(lmv2len);\n    data.writeUInt32LE(l2Idx);\n    data.writeUInt16LE(ntlmv2len);\n    data.writeUInt16LE(ntlmv2len);\n    data.writeUInt32LE(ntIdx);\n    data.writeUInt16LE(domain.length * 2);\n    data.writeUInt16LE(domain.length * 2);\n    data.writeUInt32LE(dnIdx);\n    data.writeUInt16LE(username.length * 2);\n    data.writeUInt16LE(username.length * 2);\n    data.writeUInt32LE(unIdx);\n    data.writeUInt16LE(0);\n    data.writeUInt16LE(0);\n    data.writeUInt32LE(baseIdx);\n    data.writeUInt16LE(0);\n    data.writeUInt16LE(0);\n    data.writeUInt32LE(baseIdx);\n    data.writeUInt16LE(0x8201);\n    data.writeUInt16LE(0x08);\n    data.writeString(domain, 'ucs2');\n    data.writeString(username, 'ucs2');\n    const lmv2Data = this.lmv2Response(domain, username, password, server_nonce, client_nonce);\n    data.copyFrom(lmv2Data);\n    const genTime = new Date().getTime();\n    const ntlmDataBuffer = this.ntlmv2Response(domain, username, password, server_nonce, server_data, client_nonce, genTime);\n    data.copyFrom(ntlmDataBuffer);\n    data.writeUInt32LE(0x0101);\n    data.writeUInt32LE(0x0000);\n    const timestamp = this.createTimestamp(genTime);\n    data.copyFrom(timestamp);\n    data.copyFrom(client_nonce);\n    data.writeUInt32LE(0x0000);\n    data.copyFrom(server_data);\n    data.writeUInt32LE(0x0000);\n    return data.data;\n  }\n  createClientNonce() {\n    const client_nonce = Buffer.alloc(8, 0);\n    let nidx = 0;\n    while (nidx < 8) {\n      client_nonce.writeUInt8(Math.ceil(Math.random() * 255), nidx);\n      nidx++;\n    }\n    return client_nonce;\n  }\n  ntlmv2Response(domain, user, password, serverNonce, targetInfo, clientNonce, mytime) {\n    const timestamp = this.createTimestamp(mytime);\n    const hash = this.ntv2Hash(domain, user, password);\n    const dataLength = 40 + targetInfo.length;\n    const data = Buffer.alloc(dataLength, 0);\n    serverNonce.copy(data, 0, 0, 8);\n    data.writeUInt32LE(0x101, 8);\n    data.writeUInt32LE(0x0, 12);\n    timestamp.copy(data, 16, 0, 8);\n    clientNonce.copy(data, 24, 0, 8);\n    data.writeUInt32LE(0x0, 32);\n    targetInfo.copy(data, 36, 0, targetInfo.length);\n    data.writeUInt32LE(0x0, 36 + targetInfo.length);\n    return this.hmacMD5(data, hash);\n  }\n  createTimestamp(time) {\n    const tenthsOfAMicrosecond = (BigInt(time) + BigInt(11644473600)) * BigInt(10000000);\n    const lo = Number(tenthsOfAMicrosecond & BigInt(0xffffffff));\n    const hi = Number(tenthsOfAMicrosecond >> BigInt(32) & BigInt(0xffffffff));\n    const result = Buffer.alloc(8);\n    result.writeUInt32LE(lo, 0);\n    result.writeUInt32LE(hi, 4);\n    return result;\n  }\n  lmv2Response(domain, user, password, serverNonce, clientNonce) {\n    const hash = this.ntv2Hash(domain, user, password);\n    const data = Buffer.alloc(serverNonce.length + clientNonce.length, 0);\n    serverNonce.copy(data);\n    clientNonce.copy(data, serverNonce.length, 0, clientNonce.length);\n    const newhash = this.hmacMD5(data, hash);\n    const response = Buffer.alloc(newhash.length + clientNonce.length, 0);\n    newhash.copy(response);\n    clientNonce.copy(response, newhash.length, 0, clientNonce.length);\n    return response;\n  }\n  ntv2Hash(domain, user, password) {\n    const hash = this.ntHash(password);\n    const identity = Buffer.from(user.toUpperCase() + domain.toUpperCase(), 'ucs2');\n    return this.hmacMD5(identity, hash);\n  }\n  ntHash(text) {\n    const unicodeString = Buffer.from(text, 'ucs2');\n    return Buffer.from(_jsMd.default.arrayBuffer(unicodeString));\n  }\n  hmacMD5(data, key) {\n    return crypto.createHmac('MD5', key).update(data).digest();\n  }\n}\nvar _default = exports.default = NTLMResponsePayload;\nmodule.exports = NTLMResponsePayload;","map":{"version":3,"names":["_writableTrackingBuffer","_interopRequireDefault","require","crypto","_interopRequireWildcard","_jsMd","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","NTLMResponsePayload","constructor","loginData","data","createResponse","toString","indent","challenge","client_nonce","createClientNonce","lmv2len","ntlmv2len","domain","username","userName","password","ntlmData","ntlmpacket","server_data","target","server_nonce","nonce","bufferLength","length","position","writeString","writeUInt32LE","baseIdx","dnIdx","unIdx","l2Idx","ntIdx","writeUInt16LE","lmv2Data","lmv2Response","copyFrom","genTime","Date","getTime","ntlmDataBuffer","ntlmv2Response","timestamp","createTimestamp","Buffer","alloc","nidx","writeUInt8","Math","ceil","random","user","serverNonce","targetInfo","clientNonce","mytime","hash","ntv2Hash","dataLength","copy","hmacMD5","time","tenthsOfAMicrosecond","BigInt","lo","Number","hi","result","newhash","response","ntHash","identity","from","toUpperCase","text","unicodeString","arrayBuffer","key","createHmac","update","digest","_default","exports","module"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\tedious\\src\\ntlm-payload.ts"],"sourcesContent":["import WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport * as crypto from 'crypto';\nimport md4 from 'js-md4';\n\ninterface Options {\n  domain: string;\n  userName: string;\n  password: string;\n  ntlmpacket: {\n    target: Buffer;\n    nonce: Buffer;\n  };\n}\n\nclass NTLMResponsePayload {\n  declare data: Buffer;\n\n  constructor(loginData: Options) {\n    this.data = this.createResponse(loginData);\n  }\n\n  toString(indent = '') {\n    return indent + 'NTLM Auth';\n  }\n\n  createResponse(challenge: Options) {\n    const client_nonce = this.createClientNonce();\n    const lmv2len = 24;\n    const ntlmv2len = 16;\n    const domain = challenge.domain;\n    const username = challenge.userName;\n    const password = challenge.password;\n    const ntlmData = challenge.ntlmpacket;\n    const server_data = ntlmData.target;\n    const server_nonce = ntlmData.nonce;\n    const bufferLength = 64 + (domain.length * 2) + (username.length * 2) + lmv2len + ntlmv2len + 8 + 8 + 8 + 4 + server_data.length + 4;\n    const data = new WritableTrackingBuffer(bufferLength);\n    data.position = 0;\n    data.writeString('NTLMSSP\\u0000', 'utf8');\n    data.writeUInt32LE(0x03);\n    const baseIdx = 64;\n    const dnIdx = baseIdx;\n    const unIdx = dnIdx + domain.length * 2;\n    const l2Idx = unIdx + username.length * 2;\n    const ntIdx = l2Idx + lmv2len;\n    data.writeUInt16LE(lmv2len);\n    data.writeUInt16LE(lmv2len);\n    data.writeUInt32LE(l2Idx);\n    data.writeUInt16LE(ntlmv2len);\n    data.writeUInt16LE(ntlmv2len);\n    data.writeUInt32LE(ntIdx);\n    data.writeUInt16LE(domain.length * 2);\n    data.writeUInt16LE(domain.length * 2);\n    data.writeUInt32LE(dnIdx);\n    data.writeUInt16LE(username.length * 2);\n    data.writeUInt16LE(username.length * 2);\n    data.writeUInt32LE(unIdx);\n    data.writeUInt16LE(0);\n    data.writeUInt16LE(0);\n    data.writeUInt32LE(baseIdx);\n    data.writeUInt16LE(0);\n    data.writeUInt16LE(0);\n    data.writeUInt32LE(baseIdx);\n    data.writeUInt16LE(0x8201);\n    data.writeUInt16LE(0x08);\n    data.writeString(domain, 'ucs2');\n    data.writeString(username, 'ucs2');\n    const lmv2Data = this.lmv2Response(domain, username, password, server_nonce, client_nonce);\n    data.copyFrom(lmv2Data);\n    const genTime = new Date().getTime();\n    const ntlmDataBuffer = this.ntlmv2Response(domain, username, password, server_nonce, server_data, client_nonce, genTime);\n    data.copyFrom(ntlmDataBuffer);\n    data.writeUInt32LE(0x0101);\n    data.writeUInt32LE(0x0000);\n    const timestamp = this.createTimestamp(genTime);\n    data.copyFrom(timestamp);\n    data.copyFrom(client_nonce);\n    data.writeUInt32LE(0x0000);\n    data.copyFrom(server_data);\n    data.writeUInt32LE(0x0000);\n    return data.data;\n  }\n\n  createClientNonce() {\n    const client_nonce = Buffer.alloc(8, 0);\n    let nidx = 0;\n    while (nidx < 8) {\n      client_nonce.writeUInt8(Math.ceil(Math.random() * 255), nidx);\n      nidx++;\n    }\n    return client_nonce;\n  }\n\n  ntlmv2Response(domain: string, user: string, password: string, serverNonce: Buffer, targetInfo: Buffer, clientNonce: Buffer, mytime: number) {\n    const timestamp = this.createTimestamp(mytime);\n    const hash = this.ntv2Hash(domain, user, password);\n    const dataLength = 40 + targetInfo.length;\n    const data = Buffer.alloc(dataLength, 0);\n    serverNonce.copy(data, 0, 0, 8);\n    data.writeUInt32LE(0x101, 8);\n    data.writeUInt32LE(0x0, 12);\n    timestamp.copy(data, 16, 0, 8);\n    clientNonce.copy(data, 24, 0, 8);\n    data.writeUInt32LE(0x0, 32);\n    targetInfo.copy(data, 36, 0, targetInfo.length);\n    data.writeUInt32LE(0x0, 36 + targetInfo.length);\n    return this.hmacMD5(data, hash);\n  }\n\n  createTimestamp(time: number) {\n    const tenthsOfAMicrosecond = (BigInt(time) + BigInt(11644473600)) * BigInt(10000000);\n\n    const lo = Number(tenthsOfAMicrosecond & BigInt(0xffffffff));\n    const hi = Number((tenthsOfAMicrosecond >> BigInt(32)) & BigInt(0xffffffff));\n\n    const result = Buffer.alloc(8);\n    result.writeUInt32LE(lo, 0);\n    result.writeUInt32LE(hi, 4);\n    return result;\n  }\n\n  lmv2Response(domain: string, user: string, password: string, serverNonce: Buffer, clientNonce: Buffer) {\n    const hash = this.ntv2Hash(domain, user, password);\n    const data = Buffer.alloc(serverNonce.length + clientNonce.length, 0);\n\n    serverNonce.copy(data);\n    clientNonce.copy(data, serverNonce.length, 0, clientNonce.length);\n\n    const newhash = this.hmacMD5(data, hash);\n    const response = Buffer.alloc(newhash.length + clientNonce.length, 0);\n\n    newhash.copy(response);\n    clientNonce.copy(response, newhash.length, 0, clientNonce.length);\n\n    return response;\n  }\n\n  ntv2Hash(domain: string, user: string, password: string) {\n    const hash = this.ntHash(password);\n    const identity = Buffer.from(user.toUpperCase() + domain.toUpperCase(), 'ucs2');\n    return this.hmacMD5(identity, hash);\n  }\n\n  ntHash(text: string) {\n    const unicodeString = Buffer.from(text, 'ucs2');\n    return Buffer.from(md4.arrayBuffer(unicodeString));\n  }\n\n  hmacMD5(data: Buffer, key: Buffer) {\n    return crypto.createHmac('MD5', key).update(data).digest();\n  }\n}\n\nexport default NTLMResponsePayload;\nmodule.exports = NTLMResponsePayload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}