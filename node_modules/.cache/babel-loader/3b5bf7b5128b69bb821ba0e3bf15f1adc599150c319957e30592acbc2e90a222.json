{"ast":null,"code":"/**\r\n * index.js\r\n * \r\n * Main entry point for the backend. Sets up the Express server, \r\n * establishes a connection to the database, and configures routes \r\n * and middleware.\r\n */\n\nrequire('dotenv').config();\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\nconst cors = require('cors');\nconst {\n  connectDB\n} = require('./backend/config'); // Import function to connect to Azure SQL database\nconst authRoutes = require('./backend/routes/auth'); // Import authentication routes\nconst stacRoutes = require('./backend/routes/stac'); // Import STAC routes including temperature data\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Establish connection to the database\nconnectDB();\n\n// Middleware setup\napp.use(express.json()); // Parses incoming JSON requests\napp.use(cookieParser()); // Parses cookies attached to the client request\napp.use(cors({\n  origin: 'http://localhost:3000',\n  credentials: true\n})); // Allows cross-origin requests from frontend\n\n// Route setup\napp.use('/auth', authRoutes); // Routes for user authentication\napp.use('/api/temperature', stacRoutes); // Routes for STAC API access to planetary computer data\n\n// Start server\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["require","config","express","cookieParser","cors","connectDB","authRoutes","stacRoutes","app","PORT","process","env","use","json","origin","credentials","listen","console","log"],"sources":["C:/Users/phlos/wv-temperature-map/src/index.js"],"sourcesContent":["/**\r\n * index.js\r\n * \r\n * Main entry point for the backend. Sets up the Express server, \r\n * establishes a connection to the database, and configures routes \r\n * and middleware.\r\n */\r\n\r\nrequire('dotenv').config();\r\nconst express = require('express');\r\nconst cookieParser = require('cookie-parser');\r\nconst cors = require('cors');\r\nconst { connectDB } = require('./backend/config'); // Import function to connect to Azure SQL database\r\nconst authRoutes = require('./backend/routes/auth'); // Import authentication routes\r\nconst stacRoutes = require('./backend/routes/stac'); // Import STAC routes including temperature data\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Establish connection to the database\r\nconnectDB();\r\n\r\n// Middleware setup\r\napp.use(express.json()); // Parses incoming JSON requests\r\napp.use(cookieParser()); // Parses cookies attached to the client request\r\napp.use(cors({ origin: 'http://localhost:3000', credentials: true })); // Allows cross-origin requests from frontend\r\n\r\n// Route setup\r\napp.use('/auth', authRoutes); // Routes for user authentication\r\napp.use('/api/temperature', stacRoutes); // Routes for STAC API access to planetary computer data\r\n\r\n// Start server\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMG,YAAY,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEK;AAAU,CAAC,GAAGL,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;AACnD,MAAMM,UAAU,GAAGN,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;AACrD,MAAMO,UAAU,GAAGP,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAErD,MAAMQ,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACAJ,SAAS,CAAC,CAAC;;AAEX;AACAG,GAAG,CAACI,GAAG,CAACV,OAAO,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACzBL,GAAG,CAACI,GAAG,CAACT,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AACzBK,GAAG,CAACI,GAAG,CAACR,IAAI,CAAC;EAAEU,MAAM,EAAE,uBAAuB;EAAEC,WAAW,EAAE;AAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEvE;AACAP,GAAG,CAACI,GAAG,CAAC,OAAO,EAAEN,UAAU,CAAC,CAAC,CAAC;AAC9BE,GAAG,CAACI,GAAG,CAAC,kBAAkB,EAAEL,UAAU,CAAC,CAAC,CAAC;;AAEzC;AACAC,GAAG,CAACQ,MAAM,CAACP,IAAI,EAAE,MAAMQ,OAAO,CAACC,GAAG,CAAC,0BAA0BT,IAAI,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}