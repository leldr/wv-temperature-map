{"ast":null,"code":"/**\r\n * auth.js\r\n * \r\n * This file defines routes for user registration and login. It handles authentication \r\n * by hashing passwords with bcrypt during registration and generating JWTs upon login.\r\n */\n\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst {\n  sql\n} = require('../config'); // Importing database configuration and connection\nconst router = express.Router();\n\n/**\r\n * Registers a new user by hashing the password and storing user data in the database.\r\n * @route POST /auth/register\r\n * @param {string} username - The username of the user.\r\n * @param {string} password - The password of the user (will be hashed before storing).\r\n * @returns {JSON} Success message or error message.\r\n */\nrouter.post('/register', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10); // Hashing the password for security\n\n  try {\n    const pool = await sql.connect();\n    await pool.request().input('username', sql.NVarChar, username).input('password', sql.NVarChar, hashedPassword).query('INSERT INTO Users (username, password) VALUES (@username, @password)');\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (error) {\n    console.error(\"Error during user registration:\", error);\n    res.status(500).json({\n      error: 'Failed to register user'\n    });\n  }\n});\n\n/**\r\n * Authenticates a user by verifying the password and generates a JWT for session management.\r\n * @route POST /auth/login\r\n * @param {string} username - The username of the user.\r\n * @param {string} password - The password of the user (plain text).\r\n * @returns {JSON} Success message with JWT cookie or error message.\r\n */\nrouter.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    const pool = await sql.connect();\n    const result = await pool.request().input('username', sql.NVarChar, username).query('SELECT * FROM Users WHERE username = @username');\n    const user = result.recordset[0];\n\n    // Check if user exists and password matches\n    if (user && (await bcrypt.compare(password, user.password))) {\n      const token = jwt.sign({\n        id: user.id\n      }, process.env.JWT_SECRET, {\n        expiresIn: '1h'\n      });\n      // Set JWT in HttpOnly cookie for secure storage\n      res.cookie('token', token, {\n        httpOnly: true,\n        sameSite: 'strict'\n      });\n      res.json({\n        message: 'Login successful'\n      });\n    } else {\n      res.status(401).json({\n        error: 'Invalid credentials'\n      });\n    }\n  } catch (error) {\n    console.error(\"Error during login:\", error);\n    res.status(500).json({\n      error: 'Failed to login'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","jwt","sql","router","Router","post","req","res","username","password","body","hashedPassword","hash","pool","connect","request","input","NVarChar","query","status","json","message","error","console","result","user","recordset","compare","token","sign","id","process","env","JWT_SECRET","expiresIn","cookie","httpOnly","sameSite","module","exports"],"sources":["C:/Users/phlos/wv-temperature-map/src/backend/routes/auth.js"],"sourcesContent":["/**\r\n * auth.js\r\n * \r\n * This file defines routes for user registration and login. It handles authentication \r\n * by hashing passwords with bcrypt during registration and generating JWTs upon login.\r\n */\r\n\r\nconst express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst { sql } = require('../config'); // Importing database configuration and connection\r\nconst router = express.Router();\r\n\r\n/**\r\n * Registers a new user by hashing the password and storing user data in the database.\r\n * @route POST /auth/register\r\n * @param {string} username - The username of the user.\r\n * @param {string} password - The password of the user (will be hashed before storing).\r\n * @returns {JSON} Success message or error message.\r\n */\r\nrouter.post('/register', async (req, res) => {\r\n  const { username, password } = req.body;\r\n  const hashedPassword = await bcrypt.hash(password, 10); // Hashing the password for security\r\n\r\n  try {\r\n    const pool = await sql.connect();\r\n    await pool.request()\r\n      .input('username', sql.NVarChar, username)\r\n      .input('password', sql.NVarChar, hashedPassword)\r\n      .query('INSERT INTO Users (username, password) VALUES (@username, @password)');\r\n    res.status(201).json({ message: 'User registered successfully' });\r\n  } catch (error) {\r\n    console.error(\"Error during user registration:\", error);\r\n    res.status(500).json({ error: 'Failed to register user' });\r\n  }\r\n});\r\n\r\n/**\r\n * Authenticates a user by verifying the password and generates a JWT for session management.\r\n * @route POST /auth/login\r\n * @param {string} username - The username of the user.\r\n * @param {string} password - The password of the user (plain text).\r\n * @returns {JSON} Success message with JWT cookie or error message.\r\n */\r\nrouter.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    const pool = await sql.connect();\r\n    const result = await pool.request()\r\n      .input('username', sql.NVarChar, username)\r\n      .query('SELECT * FROM Users WHERE username = @username');\r\n    const user = result.recordset[0];\r\n\r\n    // Check if user exists and password matches\r\n    if (user && await bcrypt.compare(password, user.password)) {\r\n      const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n      // Set JWT in HttpOnly cookie for secure storage\r\n      res.cookie('token', token, { httpOnly: true, sameSite: 'strict' });\r\n      res.json({ message: 'Login successful' });\r\n    } else {\r\n      res.status(401).json({ error: 'Invalid credentials' });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error during login:\", error);\r\n    res.status(500).json({ error: 'Failed to login' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}