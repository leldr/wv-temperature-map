{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\DateSelector.js\",\n  _s = $RefreshSig$();\n/**\r\n * DateSelector.js\r\n * \r\n * Component for selecting a date, strictly limited to the first day of each month.\r\n * Disables manual input, only allowing selection through the calendar.\r\n */\n\nimport React, { useState } from 'react';\n\n/**\r\n * DateSelector Component\r\n * \r\n * Allows users to select a date restricted to the first day of each month,\r\n * with only calendar input allowed and a fetch button to get temperature data.\r\n * \r\n * @component\r\n * @param {function} fetchTemperatureData - Function to fetch temperature data for the selected date.\r\n * @returns {JSX.Element} A date selector input and fetch button.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DateSelector({\n  fetchTemperatureData\n}) {\n  _s();\n  // Initialize with the first of the current month\n  const today = new Date();\n  today.setDate(1); // Set to first of the current month\n  const formattedDefaultDate = today.toISOString().substring(0, 10);\n  const [selectedDate, setSelectedDate] = useState(formattedDefaultDate);\n\n  /**\r\n   * handleDateChange\r\n   * \r\n   * Enforces the selected date to be the first day of the chosen month.\r\n   * \r\n   * @param {object} event - The date change event.\r\n   */\n  const handleDateChange = event => {\n    const date = new Date(event.target.value);\n    date.setDate(1); // Force date to the first day of the month\n    setSelectedDate(date.toISOString().substring(0, 10));\n  };\n\n  /**\r\n   * handleFetchData\r\n   * \r\n   * Triggers the fetch action for the selected date if it is valid.\r\n   */\n  const handleFetchData = () => {\n    if (selectedDate) {\n      fetchTemperatureData(selectedDate);\n    } else {\n      alert(\"Please select a valid date.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Date (First of Each Month Only): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: selectedDate,\n      onChange: handleDateChange,\n      onClick: e => e.target.showPicker() // Open date picker on click\n      ,\n      onKeyDown: e => e.preventDefault() // Prevent manual entry\n      ,\n      max: formattedDefaultDate // Limit to today’s date or earlier\n      ,\n      style: {\n        cursor: 'pointer'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetchData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(DateSelector, \"Nc18tCBhwk1o+W62eJpMcU10bKM=\");\n_c = DateSelector;\nexport default DateSelector;\nvar _c;\n$RefreshReg$(_c, \"DateSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DateSelector","fetchTemperatureData","_s","today","Date","setDate","formattedDefaultDate","toISOString","substring","selectedDate","setSelectedDate","handleDateChange","event","date","target","value","handleFetchData","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","e","showPicker","onKeyDown","preventDefault","max","style","cursor","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/DateSelector.js"],"sourcesContent":["/**\r\n * DateSelector.js\r\n * \r\n * Component for selecting a date, strictly limited to the first day of each month.\r\n * Disables manual input, only allowing selection through the calendar.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * DateSelector Component\r\n * \r\n * Allows users to select a date restricted to the first day of each month,\r\n * with only calendar input allowed and a fetch button to get temperature data.\r\n * \r\n * @component\r\n * @param {function} fetchTemperatureData - Function to fetch temperature data for the selected date.\r\n * @returns {JSX.Element} A date selector input and fetch button.\r\n */\r\nfunction DateSelector({ fetchTemperatureData }) {\r\n    // Initialize with the first of the current month\r\n    const today = new Date();\r\n    today.setDate(1); // Set to first of the current month\r\n    const formattedDefaultDate = today.toISOString().substring(0, 10);\r\n    const [selectedDate, setSelectedDate] = useState(formattedDefaultDate);\r\n\r\n    /**\r\n     * handleDateChange\r\n     * \r\n     * Enforces the selected date to be the first day of the chosen month.\r\n     * \r\n     * @param {object} event - The date change event.\r\n     */\r\n    const handleDateChange = (event) => {\r\n        const date = new Date(event.target.value);\r\n        date.setDate(1); // Force date to the first day of the month\r\n        setSelectedDate(date.toISOString().substring(0, 10));\r\n    };\r\n\r\n    /**\r\n     * handleFetchData\r\n     * \r\n     * Triggers the fetch action for the selected date if it is valid.\r\n     */\r\n    const handleFetchData = () => {\r\n        if (selectedDate) {\r\n            fetchTemperatureData(selectedDate);\r\n        } else {\r\n            alert(\"Please select a valid date.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>Select Date (First of Each Month Only): </label>\r\n            <input\r\n                type=\"date\"\r\n                value={selectedDate}\r\n                onChange={handleDateChange}\r\n                onClick={(e) => e.target.showPicker()} // Open date picker on click\r\n                onKeyDown={(e) => e.preventDefault()} // Prevent manual entry\r\n                max={formattedDefaultDate} // Limit to today’s date or earlier\r\n                style={{ cursor: 'pointer' }}\r\n            />\r\n            <button onClick={handleFetchData}>Fetch Data</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateSelector;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,SAAAC,MAAA,IAAAC,OAAA;AAUA,SAASC,YAAYA,CAAC;EAAEC;AAAqB,CAAC,EAAE;EAAAC,EAAA;EAC5C;EACA,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxBD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,MAAMC,oBAAoB,GAAGH,KAAK,CAACI,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACjE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAACS,oBAAoB,CAAC;;EAEtE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMK,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAG,IAAIT,IAAI,CAACQ,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IACzCF,IAAI,CAACR,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACjBK,eAAe,CAACG,IAAI,CAACN,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACxD,CAAC;;EAED;AACJ;AACA;AACA;AACA;EACI,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIP,YAAY,EAAE;MACdR,oBAAoB,CAACQ,YAAY,CAAC;IACtC,CAAC,MAAM;MACHQ,KAAK,CAAC,6BAA6B,CAAC;IACxC;EACJ,CAAC;EAED,oBACIlB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAO;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvDvB,OAAA;MACIwB,IAAI,EAAC,MAAM;MACXR,KAAK,EAAEN,YAAa;MACpBe,QAAQ,EAAEb,gBAAiB;MAC3Bc,OAAO,EAAGC,CAAC,IAAKA,CAAC,CAACZ,MAAM,CAACa,UAAU,CAAC,CAAE,CAAC;MAAA;MACvCC,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,cAAc,CAAC,CAAE,CAAC;MAAA;MACtCC,GAAG,EAAExB,oBAAqB,CAAC;MAAA;MAC3ByB,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAU;IAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFvB,OAAA;MAAQ0B,OAAO,EAAET,eAAgB;MAAAE,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEd;AAACpB,EAAA,CAhDQF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAkDrB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}