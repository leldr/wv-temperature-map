{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction createConfigurationErrorMessage(tenantId) {\n  return `The current credential is not configured to acquire tokens for tenant ${tenantId}. To enable acquiring tokens for this tenant add it to the AdditionallyAllowedTenants on the credential options, or add \"*\" to AdditionallyAllowedTenants to allow acquiring tokens for any tenant.`;\n}\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nexport function processMultiTenantRequest(tenantId, getTokenOptions, additionallyAllowedTenantIds = []) {\n  var _a;\n  let resolvedTenantId;\n  if (tenantId === \"adfs\") {\n    resolvedTenantId = tenantId;\n  } else {\n    resolvedTenantId = (_a = getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId) !== null && _a !== void 0 ? _a : tenantId;\n  }\n  if (tenantId && resolvedTenantId !== tenantId && !additionallyAllowedTenantIds.includes(\"*\") && !additionallyAllowedTenantIds.some(t => t.localeCompare(resolvedTenantId) === 0)) {\n    throw new Error(createConfigurationErrorMessage(tenantId));\n  }\n  return resolvedTenantId;\n}","map":{"version":3,"names":["createConfigurationErrorMessage","tenantId","processMultiTenantRequest","getTokenOptions","additionallyAllowedTenantIds","resolvedTenantId","_a","includes","some","t","localeCompare","Error"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\util\\processMultiTenantRequest.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\n\nfunction createConfigurationErrorMessage(tenantId: string): string {\n  return `The current credential is not configured to acquire tokens for tenant ${tenantId}. To enable acquiring tokens for this tenant add it to the AdditionallyAllowedTenants on the credential options, or add \"*\" to AdditionallyAllowedTenants to allow acquiring tokens for any tenant.`;\n}\n\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nexport function processMultiTenantRequest(\n  tenantId?: string,\n  getTokenOptions?: GetTokenOptions,\n  additionallyAllowedTenantIds: string[] = [],\n): string | undefined {\n  let resolvedTenantId: string | undefined;\n  if (tenantId === \"adfs\") {\n    resolvedTenantId = tenantId;\n  } else {\n    resolvedTenantId = getTokenOptions?.tenantId ?? tenantId;\n  }\n\n  if (\n    tenantId &&\n    resolvedTenantId !== tenantId &&\n    !additionallyAllowedTenantIds.includes(\"*\") &&\n    !additionallyAllowedTenantIds.some((t) => t.localeCompare(resolvedTenantId!) === 0)\n  ) {\n    throw new Error(createConfigurationErrorMessage(tenantId));\n  }\n\n  return resolvedTenantId;\n}\n"],"mappings":"AAAA;AACA;AAIA,SAASA,+BAA+BA,CAACC,QAAgB;EACvD,OAAO,yEAAyEA,QAAQ,qMAAqM;AAC/R;AAEA;;;;;;AAMA,OAAM,SAAUC,yBAAyBA,CACvCD,QAAiB,EACjBE,eAAiC,EACjCC,4BAAA,GAAyC,EAAE;;EAE3C,IAAIC,gBAAoC;EACxC,IAAIJ,QAAQ,KAAK,MAAM,EAAE;IACvBI,gBAAgB,GAAGJ,QAAQ;EAC7B,CAAC,MAAM;IACLI,gBAAgB,GAAG,CAAAC,EAAA,GAAAH,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEF,QAAQ,cAAAK,EAAA,cAAAA,EAAA,GAAIL,QAAQ;EAC1D;EAEA,IACEA,QAAQ,IACRI,gBAAgB,KAAKJ,QAAQ,IAC7B,CAACG,4BAA4B,CAACG,QAAQ,CAAC,GAAG,CAAC,IAC3C,CAACH,4BAA4B,CAACI,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,aAAa,CAACL,gBAAiB,CAAC,KAAK,CAAC,CAAC,EACnF;IACA,MAAM,IAAIM,KAAK,CAACX,+BAA+B,CAACC,QAAQ,CAAC,CAAC;EAC5D;EAEA,OAAOI,gBAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}