{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _nativeDuplexpair = _interopRequireDefault(require(\"native-duplexpair\"));\nvar tls = _interopRequireWildcard(require(\"tls\"));\nvar _events = require(\"events\");\nvar _message = _interopRequireDefault(require(\"./message\"));\nvar _packet = require(\"./packet\");\nvar _incomingMessageStream = _interopRequireDefault(require(\"./incoming-message-stream\"));\nvar _outgoingMessageStream = _interopRequireDefault(require(\"./outgoing-message-stream\"));\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass MessageIO extends _events.EventEmitter {\n  constructor(socket, packetSize, debug) {\n    super();\n    this.socket = socket;\n    this.debug = debug;\n    this.tlsNegotiationComplete = false;\n    this.incomingMessageStream = new _incomingMessageStream.default(this.debug);\n    this.incomingMessageIterator = this.incomingMessageStream[Symbol.asyncIterator]();\n    this.outgoingMessageStream = new _outgoingMessageStream.default(this.debug, {\n      packetSize: packetSize\n    });\n    this.socket.pipe(this.incomingMessageStream);\n    this.outgoingMessageStream.pipe(this.socket);\n  }\n  packetSize(...args) {\n    if (args.length > 0) {\n      const packetSize = args[0];\n      this.debug.log('Packet size changed from ' + this.outgoingMessageStream.packetSize + ' to ' + packetSize);\n      this.outgoingMessageStream.packetSize = packetSize;\n    }\n    if (this.securePair) {\n      this.securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);\n    }\n    return this.outgoingMessageStream.packetSize;\n  }\n\n  // Negotiate TLS encryption.\n  startTls(credentialsDetails, hostname, trustServerCertificate) {\n    if (!credentialsDetails.maxVersion || !['TLSv1.2', 'TLSv1.1', 'TLSv1'].includes(credentialsDetails.maxVersion)) {\n      credentialsDetails.maxVersion = 'TLSv1.2';\n    }\n    const secureContext = tls.createSecureContext(credentialsDetails);\n    return new Promise((resolve, reject) => {\n      const duplexpair = new _nativeDuplexpair.default();\n      const securePair = this.securePair = {\n        cleartext: tls.connect({\n          socket: duplexpair.socket1,\n          servername: hostname,\n          secureContext: secureContext,\n          rejectUnauthorized: !trustServerCertificate\n        }),\n        encrypted: duplexpair.socket2\n      };\n      const onSecureConnect = () => {\n        securePair.encrypted.removeListener('readable', onReadable);\n        securePair.cleartext.removeListener('error', onError);\n        securePair.cleartext.removeListener('secureConnect', onSecureConnect);\n\n        // If we encounter any errors from this point on,\n        // we just forward them to the actual network socket.\n        securePair.cleartext.once('error', err => {\n          this.socket.destroy(err);\n        });\n        const cipher = securePair.cleartext.getCipher();\n        if (cipher) {\n          this.debug.log('TLS negotiated (' + cipher.name + ', ' + cipher.version + ')');\n        }\n        this.emit('secure', securePair.cleartext);\n        securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);\n        this.outgoingMessageStream.unpipe(this.socket);\n        this.socket.unpipe(this.incomingMessageStream);\n        this.socket.pipe(securePair.encrypted);\n        securePair.encrypted.pipe(this.socket);\n        securePair.cleartext.pipe(this.incomingMessageStream);\n        this.outgoingMessageStream.pipe(securePair.cleartext);\n        this.tlsNegotiationComplete = true;\n        resolve();\n      };\n      const onError = err => {\n        securePair.encrypted.removeListener('readable', onReadable);\n        securePair.cleartext.removeListener('error', onError);\n        securePair.cleartext.removeListener('secureConnect', onSecureConnect);\n        securePair.cleartext.destroy();\n        securePair.encrypted.destroy();\n        reject(err);\n      };\n      const onReadable = () => {\n        // When there is handshake data on the encrypted stream of the secure pair,\n        // we wrap it into a `PRELOGIN` message and send it to the server.\n        //\n        // For each `PRELOGIN` message we sent we get back exactly one response message\n        // that contains the server's handshake response data.\n        const message = new _message.default({\n          type: _packet.TYPE.PRELOGIN,\n          resetConnection: false\n        });\n        let chunk;\n        while (chunk = securePair.encrypted.read()) {\n          message.write(chunk);\n        }\n        this.outgoingMessageStream.write(message);\n        message.end();\n        this.readMessage().then(async response => {\n          // Setup readable handler for the next round of handshaking.\n          // If we encounter a `secureConnect` on the cleartext side\n          // of the secure pair, the `readable` handler is cleared\n          // and no further handshake handling will happen.\n          securePair.encrypted.once('readable', onReadable);\n          for await (const data of response) {\n            // We feed the server's handshake response back into the\n            // encrypted end of the secure pair.\n            securePair.encrypted.write(data);\n          }\n        }).catch(onError);\n      };\n      securePair.cleartext.once('error', onError);\n      securePair.cleartext.once('secureConnect', onSecureConnect);\n      securePair.encrypted.once('readable', onReadable);\n    });\n  }\n\n  // TODO listen for 'drain' event when socket.write returns false.\n  // TODO implement incomplete request cancelation (2.2.1.6)\n  sendMessage(packetType, data, resetConnection) {\n    const message = new _message.default({\n      type: packetType,\n      resetConnection: resetConnection\n    });\n    message.end(data);\n    this.outgoingMessageStream.write(message);\n    return message;\n  }\n\n  /**\n   * Read the next incoming message from the socket.\n   */\n  async readMessage() {\n    const result = await this.incomingMessageIterator.next();\n    if (result.done) {\n      throw new Error('unexpected end of message stream');\n    }\n    return result.value;\n  }\n}\nvar _default = exports.default = MessageIO;\nmodule.exports = MessageIO;","map":{"version":3,"names":["_nativeDuplexpair","_interopRequireDefault","require","tls","_interopRequireWildcard","_events","_message","_packet","_incomingMessageStream","_outgoingMessageStream","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","MessageIO","EventEmitter","constructor","socket","packetSize","debug","tlsNegotiationComplete","incomingMessageStream","incomingMessageIterator","Symbol","asyncIterator","outgoingMessageStream","pipe","args","length","log","securePair","cleartext","setMaxSendFragment","startTls","credentialsDetails","hostname","trustServerCertificate","maxVersion","includes","secureContext","createSecureContext","Promise","resolve","reject","duplexpair","connect","socket1","servername","rejectUnauthorized","encrypted","socket2","onSecureConnect","removeListener","onReadable","onError","once","err","destroy","cipher","getCipher","name","version","emit","unpipe","message","type","TYPE","PRELOGIN","resetConnection","chunk","read","write","end","readMessage","then","response","data","catch","sendMessage","packetType","result","next","done","Error","value","_default","exports","module"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\tedious\\src\\message-io.ts"],"sourcesContent":["import DuplexPair from 'native-duplexpair';\n\nimport { Duplex } from 'stream';\nimport * as tls from 'tls';\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\n\nimport Debug from './debug';\n\nimport Message from './message';\nimport { TYPE } from './packet';\n\nimport IncomingMessageStream from './incoming-message-stream';\nimport OutgoingMessageStream from './outgoing-message-stream';\n\nclass MessageIO extends EventEmitter {\n  declare socket: Socket;\n  declare debug: Debug;\n\n  declare tlsNegotiationComplete: boolean;\n\n  declare private incomingMessageStream: IncomingMessageStream;\n  declare outgoingMessageStream: OutgoingMessageStream;\n\n  declare securePair?: {\n    cleartext: tls.TLSSocket;\n    encrypted: Duplex;\n  };\n\n  declare incomingMessageIterator: AsyncIterableIterator<Message>;\n\n  constructor(socket: Socket, packetSize: number, debug: Debug) {\n    super();\n\n    this.socket = socket;\n    this.debug = debug;\n\n    this.tlsNegotiationComplete = false;\n\n    this.incomingMessageStream = new IncomingMessageStream(this.debug);\n    this.incomingMessageIterator = this.incomingMessageStream[Symbol.asyncIterator]();\n\n    this.outgoingMessageStream = new OutgoingMessageStream(this.debug, { packetSize: packetSize });\n\n    this.socket.pipe(this.incomingMessageStream);\n    this.outgoingMessageStream.pipe(this.socket);\n  }\n\n  packetSize(...args: [number]) {\n    if (args.length > 0) {\n      const packetSize = args[0];\n      this.debug.log('Packet size changed from ' + this.outgoingMessageStream.packetSize + ' to ' + packetSize);\n      this.outgoingMessageStream.packetSize = packetSize;\n    }\n\n    if (this.securePair) {\n      this.securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);\n    }\n\n    return this.outgoingMessageStream.packetSize;\n  }\n\n  // Negotiate TLS encryption.\n  startTls(credentialsDetails: tls.SecureContextOptions, hostname: string, trustServerCertificate: boolean) {\n    if (!credentialsDetails.maxVersion || !['TLSv1.2', 'TLSv1.1', 'TLSv1'].includes(credentialsDetails.maxVersion)) {\n      credentialsDetails.maxVersion = 'TLSv1.2';\n    }\n\n    const secureContext = tls.createSecureContext(credentialsDetails);\n\n    return new Promise<void>((resolve, reject) => {\n      const duplexpair = new DuplexPair();\n      const securePair = this.securePair = {\n        cleartext: tls.connect({\n          socket: duplexpair.socket1 as Socket,\n          servername: hostname,\n          secureContext: secureContext,\n          rejectUnauthorized: !trustServerCertificate\n        }),\n        encrypted: duplexpair.socket2\n      };\n\n      const onSecureConnect = () => {\n        securePair.encrypted.removeListener('readable', onReadable);\n        securePair.cleartext.removeListener('error', onError);\n        securePair.cleartext.removeListener('secureConnect', onSecureConnect);\n\n        // If we encounter any errors from this point on,\n        // we just forward them to the actual network socket.\n        securePair.cleartext.once('error', (err) => {\n          this.socket.destroy(err);\n        });\n\n        const cipher = securePair.cleartext.getCipher();\n        if (cipher) {\n          this.debug.log('TLS negotiated (' + cipher.name + ', ' + cipher.version + ')');\n        }\n\n        this.emit('secure', securePair.cleartext);\n\n        securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);\n\n        this.outgoingMessageStream.unpipe(this.socket);\n        this.socket.unpipe(this.incomingMessageStream);\n\n        this.socket.pipe(securePair.encrypted);\n        securePair.encrypted.pipe(this.socket);\n\n        securePair.cleartext.pipe(this.incomingMessageStream);\n        this.outgoingMessageStream.pipe(securePair.cleartext);\n\n        this.tlsNegotiationComplete = true;\n\n        resolve();\n      };\n\n      const onError = (err?: Error) => {\n        securePair.encrypted.removeListener('readable', onReadable);\n        securePair.cleartext.removeListener('error', onError);\n        securePair.cleartext.removeListener('secureConnect', onSecureConnect);\n\n        securePair.cleartext.destroy();\n        securePair.encrypted.destroy();\n\n        reject(err);\n      };\n\n      const onReadable = () => {\n        // When there is handshake data on the encrypted stream of the secure pair,\n        // we wrap it into a `PRELOGIN` message and send it to the server.\n        //\n        // For each `PRELOGIN` message we sent we get back exactly one response message\n        // that contains the server's handshake response data.\n        const message = new Message({ type: TYPE.PRELOGIN, resetConnection: false });\n\n        let chunk;\n        while (chunk = securePair.encrypted.read()) {\n          message.write(chunk);\n        }\n        this.outgoingMessageStream.write(message);\n        message.end();\n\n        this.readMessage().then(async (response) => {\n          // Setup readable handler for the next round of handshaking.\n          // If we encounter a `secureConnect` on the cleartext side\n          // of the secure pair, the `readable` handler is cleared\n          // and no further handshake handling will happen.\n          securePair.encrypted.once('readable', onReadable);\n\n          for await (const data of response) {\n            // We feed the server's handshake response back into the\n            // encrypted end of the secure pair.\n            securePair.encrypted.write(data);\n          }\n        }).catch(onError);\n      };\n\n      securePair.cleartext.once('error', onError);\n      securePair.cleartext.once('secureConnect', onSecureConnect);\n      securePair.encrypted.once('readable', onReadable);\n    });\n  }\n\n  // TODO listen for 'drain' event when socket.write returns false.\n  // TODO implement incomplete request cancelation (2.2.1.6)\n  sendMessage(packetType: number, data?: Buffer, resetConnection?: boolean) {\n    const message = new Message({ type: packetType, resetConnection: resetConnection });\n    message.end(data);\n    this.outgoingMessageStream.write(message);\n    return message;\n  }\n\n  /**\n   * Read the next incoming message from the socket.\n   */\n  async readMessage(): Promise<Message> {\n    const result = await this.incomingMessageIterator.next();\n\n    if (result.done) {\n      throw new Error('unexpected end of message stream');\n    }\n\n    return result.value;\n  }\n}\n\nexport default MessageIO;\nmodule.exports = MessageIO;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}