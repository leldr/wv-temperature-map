{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\MapPage.js\",\n  _s = $RefreshSig$();\n/**\r\n * MapPage.js\r\n * \r\n * This component displays an interactive map of temperature data for locations in West Virginia.\r\n * It includes a logout button that allows the user to end their session and navigate to the login page.\r\n * The map and temperature data are rendered by the child `MapComponent`.\r\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\nimport MapComponent from './MapComponent';\nimport DateSelector from './DateSelector';\nimport axios from 'axios';\n\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapPage = ({\n  setAuthenticated\n}) => {\n  _s();\n  const [temperatureData, setTemperatureData] = useState([]);\n  const date = \"2022-06-01\"; // Static date for testing purposes\n  const navigate = useNavigate(); // Initialize navigate hook\n\n  /**\r\n   * Fetches temperature data for a specific date from the backend API.\r\n   * This function runs when the component mounts and whenever the `date` variable changes.\r\n   */\n  useEffect(() => {\n    const fetchTemperatureData = async () => {\n      try {\n        const response = await axios.get(`/api/temperature/${date}`);\n        setTemperatureData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching temperature data:\", error);\n      }\n    };\n    fetchTemperatureData();\n  }, [date]);\n\n  /**\r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\n  const handleLogout = () => {\n    setAuthenticated(false); // Update authentication state to log out\n    localStorage.removeItem('authenticated'); // Remove from local storage\n    navigate('/'); // Redirect to the login/register page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Temperatures in West Virginia on \", date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n      temperatures: temperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      style: {\n        marginTop: '20px'\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPage, \"oIkw9xnXAvj6nbWTgtyMY8OsdBI=\", false, function () {\n  return [useNavigate];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","MapComponent","DateSelector","axios","jsxDEV","_jsxDEV","MapPage","setAuthenticated","_s","temperatureData","setTemperatureData","date","navigate","fetchTemperatureData","response","get","data","error","console","handleLogout","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","temperatures","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/MapPage.js"],"sourcesContent":["/**\r\n * MapPage.js\r\n * \r\n * This component displays an interactive map of temperature data for locations in West Virginia.\r\n * It includes a logout button that allows the user to end their session and navigate to the login page.\r\n * The map and temperature data are rendered by the child `MapComponent`.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\r\nimport MapComponent from './MapComponent';\r\nimport DateSelector from './DateSelector';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\r\nconst MapPage = ({ setAuthenticated }) => {\r\n  const [temperatureData, setTemperatureData] = useState([]);\r\n  const date = \"2022-06-01\"; // Static date for testing purposes\r\n  const navigate = useNavigate(); // Initialize navigate hook\r\n\r\n  /**\r\n   * Fetches temperature data for a specific date from the backend API.\r\n   * This function runs when the component mounts and whenever the `date` variable changes.\r\n   */\r\n  useEffect(() => {\r\n    const fetchTemperatureData = async () => {\r\n      try {\r\n        const response = await axios.get(`/api/temperature/${date}`);\r\n        setTemperatureData(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching temperature data:\", error);\r\n      }\r\n    };\r\n    fetchTemperatureData();\r\n  }, [date]);\r\n\r\n/**\r\n * Logs out the user by clearing authentication state and local storage,\r\n * then navigating to the login page.\r\n */\r\nconst handleLogout = () => {\r\n  setAuthenticated(false); // Update authentication state to log out\r\n  localStorage.removeItem('authenticated'); // Remove from local storage\r\n  navigate('/'); // Redirect to the login/register page\r\n};\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Temperatures in West Virginia on {date}</h1>\r\n      {/* MapComponent displays the temperature data as markers on the map */}\r\n      <MapComponent temperatures={temperatureData} />\r\n      {/* Logout button triggers the handleLogout function */}\r\n      <button onClick={handleLogout} style={{ marginTop: '20px' }}>Logout</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMa,IAAI,GAAG,YAAY,CAAC,CAAC;EAC3B,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;AACF;AACA;AACA;EACED,SAAS,CAAC,MAAM;IACd,MAAMc,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,oBAAoBJ,IAAI,EAAE,CAAC;QAC5DD,kBAAkB,CAACI,QAAQ,CAACE,IAAI,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IACDJ,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;;EAEZ;AACA;AACA;AACA;EACA,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzBZ,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;IACzBa,YAAY,CAACC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;IAC1CT,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACjB,CAAC;EAGC,oBACEP,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,GAAI,mCAAiC,EAACX,IAAI;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEhDrB,OAAA,CAACJ,YAAY;MAAC0B,YAAY,EAAElB;IAAgB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE/CrB,OAAA;MAAQuB,OAAO,EAAET,YAAa;MAACU,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAR,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzE,CAAC;AAEV,CAAC;AAAClB,EAAA,CAzCIF,OAAO;EAAA,QAGMN,WAAW;AAAA;AAAA+B,EAAA,GAHxBzB,OAAO;AA2Cb,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}