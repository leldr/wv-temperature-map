{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\MapPage.js\",\n  _s = $RefreshSig$();\n/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * Displays a loading indicator while data is being fetched.\r\n */\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport MapComponent from './MapComponent';\nimport DateSelector from './DateSelector';\nimport axios from 'axios';\n\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * \r\n * @component\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers, a logout button, and a loading indicator.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  setAuthenticated\n}) {\n  _s();\n  const [date, setDate] = useState('');\n  const [temperatureData, setTemperatureData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Track loading state\n  const navigate = useNavigate();\n\n  /**\r\n   * fetchTemperatureData\r\n   * \r\n   * Fetches temperature data from the backend for the selected date.\r\n   * Shows a loading indicator while data is being fetched.\r\n   * \r\n   * @async\r\n   * @function\r\n   */\n  const fetchTemperatureData = async () => {\n    if (!date) {\n      alert(\"Please select a date.\");\n      return;\n    }\n    setIsLoading(true); // Set loading state to true\n    console.log(`Fetching temperature data for date: ${date}`);\n    try {\n      const response = await axios.get(`http://localhost:5000/api/temperature/temperature-data`, {\n        params: {\n          date\n        }\n      });\n      setTemperatureData(response.data);\n      console.log(\"Temperature data received:\", response.data);\n    } catch (error) {\n      console.error(\"Failed to fetch temperature data:\", error);\n    } finally {\n      setIsLoading(false); // Reset loading state after fetching\n    }\n  };\n\n  /**\r\n   * handleLogout\r\n   * \r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\n  const handleLogout = () => {\n    setAuthenticated(false);\n    localStorage.removeItem('authenticated');\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monthly Average Temperatures in West Virginia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateSelector, {\n      setDate: setDate,\n      fetchTemperatureData: fetchTemperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(ClipLoader, {\n      color: \"#123abc\",\n      loading: isLoading,\n      size: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(MapComponent, {\n      temperatures: temperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      style: {\n        marginTop: '20px'\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(MapPage, \"tZ2ia1AR8lYMCJzb7wpbElPcrIY=\", false, function () {\n  return [useNavigate];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useNavigate","MapComponent","DateSelector","axios","jsxDEV","_jsxDEV","MapPage","setAuthenticated","_s","date","setDate","temperatureData","setTemperatureData","isLoading","setIsLoading","navigate","fetchTemperatureData","alert","console","log","response","get","params","data","error","handleLogout","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","ClipLoader","color","loading","size","temperatures","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/MapPage.js"],"sourcesContent":["/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * Displays a loading indicator while data is being fetched.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MapComponent from './MapComponent';\r\nimport DateSelector from './DateSelector';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * \r\n * @component\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers, a logout button, and a loading indicator.\r\n */\r\nfunction MapPage({ setAuthenticated }) {\r\n  const [date, setDate] = useState('');\r\n  const [temperatureData, setTemperatureData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);  // Track loading state\r\n  const navigate = useNavigate();\r\n\r\n  /**\r\n   * fetchTemperatureData\r\n   * \r\n   * Fetches temperature data from the backend for the selected date.\r\n   * Shows a loading indicator while data is being fetched.\r\n   * \r\n   * @async\r\n   * @function\r\n   */\r\n  const fetchTemperatureData = async () => {\r\n    if (!date) {\r\n      alert(\"Please select a date.\");\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true); // Set loading state to true\r\n    console.log(`Fetching temperature data for date: ${date}`);\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/temperature/temperature-data`, {\r\n        params: { date },\r\n      });\r\n      setTemperatureData(response.data);\r\n      console.log(\"Temperature data received:\", response.data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch temperature data:\", error);\r\n    } finally {\r\n      setIsLoading(false); // Reset loading state after fetching\r\n    }\r\n  };\r\n\r\n  /**\r\n   * handleLogout\r\n   * \r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\r\n  const handleLogout = () => {\r\n    setAuthenticated(false);\r\n    localStorage.removeItem('authenticated');\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Monthly Average Temperatures in West Virginia</h1>\r\n      \r\n      {/* DateSelector component allows user to select a date and trigger data fetch */}\r\n      <DateSelector setDate={setDate} fetchTemperatureData={fetchTemperatureData} />\r\n\r\n      {/* Loading Indicator */}\r\n{isLoading && <ClipLoader color=\"#123abc\" loading={isLoading} size={50} />}\r\n\r\n\r\n      {/* MapComponent displays the temperature data as markers on the map */}\r\n      {!isLoading && <MapComponent temperatures={temperatureData} />}\r\n\r\n      {/* Logout button triggers the handleLogout function */}\r\n      <button onClick={handleLogout} style={{ marginTop: '20px' }}>Logout</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}