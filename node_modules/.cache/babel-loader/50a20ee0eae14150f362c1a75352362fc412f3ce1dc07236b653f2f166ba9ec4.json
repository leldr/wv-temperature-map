{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\n/**\r\n * MapComponent.js\r\n * \r\n * React component that renders a cell-based heatmap using Leaflet.\r\n * Each cell is represented by a rectangle with a color corresponding to the average temperature in Fahrenheit.\r\n */\n\nimport React, { useEffect } from 'react';\nimport { MapContainer, TileLayer, Rectangle, Tooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n/**\r\n * MapComponent\r\n * \r\n * Renders a cell-based heatmap for temperature data.\r\n * Each cell is color-coded based on average temperature and displays its value on hover.\r\n * \r\n * @component\r\n * @param {Object[]} [temperatureData=[]] - Array of objects with latitude, longitude, and tavg.\r\n * @returns {JSX.Element} A map with a grid-based heatmap overlay.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent({\n  temperatureData = []\n}) {\n  _s();\n  const center = [48, -124]; // Example center for the Washington area\n\n  useEffect(() => {\n    // Log the data to verify if it is being passed correctly\n    console.log(\"Temperature Data:\", temperatureData);\n\n    // Check if the temperatureData array contains valid objects\n    if (temperatureData.length === 0) {\n      console.warn(\"No temperature data available for rendering.\");\n    }\n  }, [temperatureData]);\n\n  // Define a detailed 10-color gradient for average temperature\n  const getColor = value => {\n    if (value < 0) return \"#4B0082\"; // Indigo\n    if (value < 5) return \"#0000FF\"; // Blue\n    if (value < 10) return \"#00BFFF\"; // Deep Sky Blue\n    if (value < 15) return \"#00FF7F\"; // Spring Green\n    if (value < 20) return \"#7FFF00\"; // Chartreuse\n    if (value < 25) return \"#FFFF00\"; // Yellow\n    if (value < 30) return \"#FFA500\"; // Orange\n    if (value < 35) return \"#FF4500\"; // Orange Red\n    if (value < 40) return \"#FF0000\"; // Red\n    return \"#8B0000\"; // Dark Red\n  };\n\n  // Helper function to calculate the corners of a cell\n  const getCellBounds = (latitude, longitude, cellSize = 0.1) => [[latitude - cellSize / 2, longitude - cellSize / 2],\n  // Southwest corner\n  [latitude + cellSize / 2, longitude + cellSize / 2] // Northeast corner\n  ];\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: center,\n    zoom: 7,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), Array.isArray(temperatureData) && temperatureData.length > 0 ? temperatureData.map((point, index) => {\n      // Ensure the required properties exist in each data point\n      if (!point.latitude || !point.longitude || !point.tavg) {\n        console.error(`Invalid data point at index ${index}:`, point);\n        return null;\n      }\n      const bounds = getCellBounds(point.latitude, point.longitude, 0.1); // Ensure no overlap\n      const color = getColor(point.tavg);\n      return /*#__PURE__*/_jsxDEV(Rectangle, {\n        bounds: bounds,\n        pathOptions: {\n          fillColor: color,\n          fillOpacity: 0.7,\n          stroke: false\n        },\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Avg Temp:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 40\n              }, this), \" \", point.tavg.toFixed(2), \" \\xB0F\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: \"No temperature data to display. Please fetch data first.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(MapComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","MapContainer","TileLayer","Rectangle","Tooltip","jsxDEV","_jsxDEV","MapComponent","temperatureData","_s","center","console","log","length","warn","getColor","value","getCellBounds","latitude","longitude","cellSize","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","map","point","index","tavg","error","bounds","color","pathOptions","fillColor","fillOpacity","stroke","toFixed","textAlign","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/MapComponent.js"],"sourcesContent":["/**\r\n * MapComponent.js\r\n * \r\n * React component that renders a cell-based heatmap using Leaflet.\r\n * Each cell is represented by a rectangle with a color corresponding to the average temperature in Fahrenheit.\r\n */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Rectangle, Tooltip } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n/**\r\n * MapComponent\r\n * \r\n * Renders a cell-based heatmap for temperature data.\r\n * Each cell is color-coded based on average temperature and displays its value on hover.\r\n * \r\n * @component\r\n * @param {Object[]} [temperatureData=[]] - Array of objects with latitude, longitude, and tavg.\r\n * @returns {JSX.Element} A map with a grid-based heatmap overlay.\r\n */\r\nfunction MapComponent({ temperatureData = [] }) {\r\n    const center = [48, -124]; // Example center for the Washington area\r\n\r\n    useEffect(() => {\r\n        // Log the data to verify if it is being passed correctly\r\n        console.log(\"Temperature Data:\", temperatureData);\r\n\r\n        // Check if the temperatureData array contains valid objects\r\n        if (temperatureData.length === 0) {\r\n            console.warn(\"No temperature data available for rendering.\");\r\n        }\r\n    }, [temperatureData]);\r\n\r\n    // Define a detailed 10-color gradient for average temperature\r\n    const getColor = (value) => {\r\n        if (value < 0) return \"#4B0082\";       // Indigo\r\n        if (value < 5) return \"#0000FF\";       // Blue\r\n        if (value < 10) return \"#00BFFF\";      // Deep Sky Blue\r\n        if (value < 15) return \"#00FF7F\";      // Spring Green\r\n        if (value < 20) return \"#7FFF00\";      // Chartreuse\r\n        if (value < 25) return \"#FFFF00\";      // Yellow\r\n        if (value < 30) return \"#FFA500\";      // Orange\r\n        if (value < 35) return \"#FF4500\";      // Orange Red\r\n        if (value < 40) return \"#FF0000\";      // Red\r\n        return \"#8B0000\";                      // Dark Red\r\n    };\r\n\r\n    // Helper function to calculate the corners of a cell\r\n    const getCellBounds = (latitude, longitude, cellSize = 0.1) => [\r\n        [latitude - cellSize / 2, longitude - cellSize / 2], // Southwest corner\r\n        [latitude + cellSize / 2, longitude + cellSize / 2], // Northeast corner\r\n    ];\r\n\r\n    return (\r\n        <MapContainer center={center} zoom={7} style={{ height: '500px', width: '100%' }}>\r\n            {/* Add OpenStreetMap Tile Layer */}\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n\r\n            {/* Render a rectangle for each data point */}\r\n            {Array.isArray(temperatureData) && temperatureData.length > 0 ? (\r\n                temperatureData.map((point, index) => {\r\n                    // Ensure the required properties exist in each data point\r\n                    if (!point.latitude || !point.longitude || !point.tavg) {\r\n                        console.error(`Invalid data point at index ${index}:`, point);\r\n                        return null;\r\n                    }\r\n\r\n                    const bounds = getCellBounds(point.latitude, point.longitude, 0.1); // Ensure no overlap\r\n                    const color = getColor(point.tavg);\r\n\r\n                    return (\r\n                        <Rectangle\r\n                            key={index}\r\n                            bounds={bounds}\r\n                            pathOptions={{ fillColor: color, fillOpacity: 0.7, stroke: false }}\r\n                        >\r\n                            {/* Tooltip shows `tavg` on hover */}\r\n                            <Tooltip>\r\n                                <div>\r\n                                    <p><strong>Avg Temp:</strong> {point.tavg.toFixed(2)} Â°F</p>\r\n                                </div>\r\n                            </Tooltip>\r\n                        </Rectangle>\r\n                    );\r\n                })\r\n            ) : (\r\n                <p style={{ textAlign: 'center', marginTop: '20px' }}>\r\n                    No temperature data to display. Please fetch data first.\r\n                </p>\r\n            )}\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}