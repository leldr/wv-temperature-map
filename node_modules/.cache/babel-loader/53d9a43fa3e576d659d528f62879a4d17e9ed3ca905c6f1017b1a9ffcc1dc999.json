{"ast":null,"code":"/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n;\n'use strict';\nconst {\n  ArrayPrototypeSlice,\n  Error,\n  FunctionPrototypeSymbolHasInstance,\n  ObjectDefineProperty,\n  ObjectDefineProperties,\n  ObjectSetPrototypeOf,\n  StringPrototypeToLowerCase,\n  Symbol,\n  SymbolHasInstance\n} = require('../../ours/primordials');\nmodule.exports = Writable;\nWritable.WritableState = WritableState;\nconst {\n  EventEmitter: EE\n} = require('events');\nconst Stream = require('./legacy').Stream;\nconst {\n  Buffer\n} = require('buffer');\nconst destroyImpl = require('./destroy');\nconst {\n  addAbortSignal\n} = require('./add-abort-signal');\nconst {\n  getHighWaterMark,\n  getDefaultHighWaterMark\n} = require('./state');\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED,\n  ERR_STREAM_ALREADY_FINISHED,\n  ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING\n} = require('../../ours/errors').codes;\nconst {\n  errorOrDestroy\n} = destroyImpl;\nObjectSetPrototypeOf(Writable.prototype, Stream.prototype);\nObjectSetPrototypeOf(Writable, Stream);\nfunction nop() {}\nconst kOnFinished = Symbol('kOnFinished');\nfunction WritableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex');\n\n  // Object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!(options && options.objectMode);\n  if (isDuplex) this.objectMode = this.objectMode || !!(options && options.writableObjectMode);\n\n  // The point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write().\n  this.highWaterMark = options ? getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex) : getDefaultHighWaterMark(false);\n\n  // if _final has been called.\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // At the start of calling end()\n  this.ending = false;\n  // When end() has been called, and returned.\n  this.ended = false;\n  // When 'finish' is emitted.\n  this.finished = false;\n\n  // Has it been destroyed\n  this.destroyed = false;\n\n  // Should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  const noDecode = !!(options && options.decodeStrings === false);\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options && options.defaultEncoding || 'utf8';\n\n  // Not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // A flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // When true all writes will be buffered until .uncork() call.\n  this.corked = 0;\n\n  // A flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // A flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // The callback that's passed to _write(chunk, cb).\n  this.onwrite = onwrite.bind(undefined, stream);\n\n  // The callback that the user supplies to write(chunk, encoding, cb).\n  this.writecb = null;\n\n  // The amount that is being written when _write is called.\n  this.writelen = 0;\n\n  // Storage for data passed to the afterWrite() callback in case of\n  // synchronous _write() completion.\n  this.afterWriteTickInfo = null;\n  resetBuffer(this);\n\n  // Number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted.\n  this.pendingcb = 0;\n\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  this.constructed = true;\n\n  // Emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams.\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again.\n  this.errorEmitted = false;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = !options || options.emitClose !== false;\n\n  // Should .destroy() be called after 'finish' (and potentially 'end').\n  this.autoDestroy = !options || options.autoDestroy !== false;\n\n  // Indicates whether the stream has errored. When true all write() calls\n  // should return false. This is needed since when autoDestroy\n  // is disabled we need a way to tell whether the stream has failed.\n  this.errored = null;\n\n  // Indicates whether the stream has finished destroying.\n  this.closed = false;\n\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  this.closeEmitted = false;\n  this[kOnFinished] = [];\n}\n_c = WritableState;\nfunction resetBuffer(state) {\n  state.buffered = [];\n  state.bufferedIndex = 0;\n  state.allBuffers = true;\n  state.allNoop = true;\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  return ArrayPrototypeSlice(this.buffered, this.bufferedIndex);\n};\nObjectDefineProperty(WritableState.prototype, 'bufferedRequestCount', {\n  __proto__: null,\n  get() {\n    return this.buffered.length - this.bufferedIndex;\n  }\n});\nfunction Writable(options) {\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex');\n  if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex);\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n    if (typeof options.construct === 'function') this._construct = options.construct;\n    if (options.signal) addAbortSignal(options.signal, this);\n  }\n  Stream.call(this, options);\n  destroyImpl.construct(this, () => {\n    const state = this._writableState;\n    if (!state.writing) {\n      clearBuffer(this, state);\n    }\n    finishMaybe(this, state);\n  });\n}\n_c2 = Writable;\nObjectDefineProperty(Writable, SymbolHasInstance, {\n  __proto__: null,\n  value: function (object) {\n    if (FunctionPrototypeSymbolHasInstance(this, object)) return true;\n    if (this !== Writable) return false;\n    return object && object._writableState instanceof WritableState;\n  }\n});\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\nfunction _write(stream, chunk, encoding, cb) {\n  const state = stream._writableState;\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = state.defaultEncoding;\n  } else {\n    if (!encoding) encoding = state.defaultEncoding;else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding);\n    if (typeof cb !== 'function') cb = nop;\n  }\n  if (chunk === null) {\n    throw new ERR_STREAM_NULL_VALUES();\n  } else if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      if (state.decodeStrings !== false) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = 'buffer';\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = 'buffer';\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk);\n      encoding = 'buffer';\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n    }\n  }\n  let err;\n  if (state.ending) {\n    err = new ERR_STREAM_WRITE_AFTER_END();\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('write');\n  }\n  if (err) {\n    process.nextTick(cb, err);\n    errorOrDestroy(stream, err, true);\n    return err;\n  }\n  state.pendingcb++;\n  return writeOrBuffer(stream, state, chunk, encoding, cb);\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  return _write(this, chunk, encoding, cb) === true;\n};\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\nWritable.prototype.uncork = function () {\n  const state = this._writableState;\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing) clearBuffer(this, state);\n  }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = StringPrototypeToLowerCase(encoding);\n  if (!Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\n// If we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, callback) {\n  const len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n\n  // stream._write resets state.length\n  const ret = state.length < state.highWaterMark;\n  // We must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked || state.errored || !state.constructed) {\n    state.buffered.push({\n      chunk,\n      encoding,\n      callback\n    });\n    if (state.allBuffers && encoding !== 'buffer') {\n      state.allBuffers = false;\n    }\n    if (state.allNoop && callback !== nop) {\n      state.allNoop = false;\n    }\n  } else {\n    state.writelen = len;\n    state.writecb = callback;\n    state.writing = true;\n    state.sync = true;\n    stream._write(chunk, encoding, state.onwrite);\n    state.sync = false;\n  }\n\n  // Return false if errored or destroyed in order to break\n  // any synchronous while(stream.write(data)) loops.\n  return ret && !state.errored && !state.destroyed;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\nfunction onwriteError(stream, state, er, cb) {\n  --state.pendingcb;\n  cb(er);\n  // Ensure callbacks are invoked even when autoDestroy is\n  // not enabled. Passing `er` here doesn't make sense since\n  // it's related to one specific write, not to the buffered\n  // writes.\n  errorBuffer(state);\n  // This can emit error, but error must always follow cb.\n  errorOrDestroy(stream, er);\n}\nfunction onwrite(stream, er) {\n  const state = stream._writableState;\n  const sync = state.sync;\n  const cb = state.writecb;\n  if (typeof cb !== 'function') {\n    errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK());\n    return;\n  }\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n  if (er) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    er.stack; // eslint-disable-line no-unused-expressions\n\n    if (!state.errored) {\n      state.errored = er;\n    }\n\n    // In case of duplex streams we need to notify the readable side of the\n    // error.\n    if (stream._readableState && !stream._readableState.errored) {\n      stream._readableState.errored = er;\n    }\n    if (sync) {\n      process.nextTick(onwriteError, stream, state, er, cb);\n    } else {\n      onwriteError(stream, state, er, cb);\n    }\n  } else {\n    if (state.buffered.length > state.bufferedIndex) {\n      clearBuffer(stream, state);\n    }\n    if (sync) {\n      // It is a common case that the callback passed to .write() is always\n      // the same. In that case, we do not schedule a new nextTick(), but\n      // rather just increase a counter, to improve performance and avoid\n      // memory allocations.\n      if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {\n        state.afterWriteTickInfo.count++;\n      } else {\n        state.afterWriteTickInfo = {\n          count: 1,\n          cb,\n          stream,\n          state\n        };\n        process.nextTick(afterWriteTick, state.afterWriteTickInfo);\n      }\n    } else {\n      afterWrite(stream, state, 1, cb);\n    }\n  }\n}\nfunction afterWriteTick({\n  stream,\n  state,\n  count,\n  cb\n}) {\n  state.afterWriteTickInfo = null;\n  return afterWrite(stream, state, count, cb);\n}\nfunction afterWrite(stream, state, count, cb) {\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain;\n  if (needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n  while (count-- > 0) {\n    state.pendingcb--;\n    cb();\n  }\n  if (state.destroyed) {\n    errorBuffer(state);\n  }\n  finishMaybe(stream, state);\n}\n\n// If there's something in the buffer waiting, then invoke callbacks.\nfunction errorBuffer(state) {\n  if (state.writing) {\n    return;\n  }\n  for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\n    var _state$errored;\n    const {\n      chunk,\n      callback\n    } = state.buffered[n];\n    const len = state.objectMode ? 1 : chunk.length;\n    state.length -= len;\n    callback((_state$errored = state.errored) !== null && _state$errored !== undefined ? _state$errored : new ERR_STREAM_DESTROYED('write'));\n  }\n  const onfinishCallbacks = state[kOnFinished].splice(0);\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    var _state$errored2;\n    onfinishCallbacks[i]((_state$errored2 = state.errored) !== null && _state$errored2 !== undefined ? _state$errored2 : new ERR_STREAM_DESTROYED('end'));\n  }\n  resetBuffer(state);\n}\n\n// If there's something in the buffer waiting, then process it.\nfunction clearBuffer(stream, state) {\n  if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {\n    return;\n  }\n  const {\n    buffered,\n    bufferedIndex,\n    objectMode\n  } = state;\n  const bufferedLength = buffered.length - bufferedIndex;\n  if (!bufferedLength) {\n    return;\n  }\n  let i = bufferedIndex;\n  state.bufferProcessing = true;\n  if (bufferedLength > 1 && stream._writev) {\n    state.pendingcb -= bufferedLength - 1;\n    const callback = state.allNoop ? nop : err => {\n      for (let n = i; n < buffered.length; ++n) {\n        buffered[n].callback(err);\n      }\n    };\n    // Make a copy of `buffered` if it's going to be used by `callback` above,\n    // since `doWrite` will mutate the array.\n    const chunks = state.allNoop && i === 0 ? buffered : ArrayPrototypeSlice(buffered, i);\n    chunks.allBuffers = state.allBuffers;\n    doWrite(stream, state, true, state.length, chunks, '', callback);\n    resetBuffer(state);\n  } else {\n    do {\n      const {\n        chunk,\n        encoding,\n        callback\n      } = buffered[i];\n      buffered[i++] = null;\n      const len = objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, callback);\n    } while (i < buffered.length && !state.writing);\n    if (i === buffered.length) {\n      resetBuffer(state);\n    } else if (i > 256) {\n      buffered.splice(0, i);\n      state.bufferedIndex = 0;\n    } else {\n      state.bufferedIndex = i;\n    }\n  }\n  state.bufferProcessing = false;\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  if (this._writev) {\n    this._writev([{\n      chunk,\n      encoding\n    }], cb);\n  } else {\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()');\n  }\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function (chunk, encoding, cb) {\n  const state = this._writableState;\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  let err;\n  if (chunk !== null && chunk !== undefined) {\n    const ret = _write(this, chunk, encoding);\n    if (ret instanceof Error) {\n      err = ret;\n    }\n  }\n\n  // .end() fully uncorks.\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n  if (err) {\n    // Do nothing...\n  } else if (!state.errored && !state.ending) {\n    // This is forgiving in terms of unnecessary calls to end() and can hide\n    // logic errors. However, usually such errors are harmless and causing a\n    // hard error can be disproportionately destructive. It is not always\n    // trivial for the user to determine whether end() needs to be called\n    // or not.\n\n    state.ending = true;\n    finishMaybe(this, state, true);\n    state.ended = true;\n  } else if (state.finished) {\n    err = new ERR_STREAM_ALREADY_FINISHED('end');\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('end');\n  }\n  if (typeof cb === 'function') {\n    if (err || state.finished) {\n      process.nextTick(cb, err);\n    } else {\n      state[kOnFinished].push(cb);\n    }\n  }\n  return this;\n};\nfunction needFinish(state) {\n  return state.ending && !state.destroyed && state.constructed && state.length === 0 && !state.errored && state.buffered.length === 0 && !state.finished && !state.writing && !state.errorEmitted && !state.closeEmitted;\n}\nfunction callFinal(stream, state) {\n  let called = false;\n  function onFinish(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : ERR_MULTIPLE_CALLBACK());\n      return;\n    }\n    called = true;\n    state.pendingcb--;\n    if (err) {\n      const onfinishCallbacks = state[kOnFinished].splice(0);\n      for (let i = 0; i < onfinishCallbacks.length; i++) {\n        onfinishCallbacks[i](err);\n      }\n      errorOrDestroy(stream, err, state.sync);\n    } else if (needFinish(state)) {\n      state.prefinished = true;\n      stream.emit('prefinish');\n      // Backwards compat. Don't check state.sync here.\n      // Some streams assume 'finish' will be emitted\n      // asynchronously relative to _final callback.\n      state.pendingcb++;\n      process.nextTick(finish, stream, state);\n    }\n  }\n  state.sync = true;\n  state.pendingcb++;\n  try {\n    stream._final(onFinish);\n  } catch (err) {\n    onFinish(err);\n  }\n  state.sync = false;\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.finalCalled = true;\n      callFinal(stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\nfunction finishMaybe(stream, state, sync) {\n  if (needFinish(state)) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      if (sync) {\n        state.pendingcb++;\n        process.nextTick((stream, state) => {\n          if (needFinish(state)) {\n            finish(stream, state);\n          } else {\n            state.pendingcb--;\n          }\n        }, stream, state);\n      } else if (needFinish(state)) {\n        state.pendingcb++;\n        finish(stream, state);\n      }\n    }\n  }\n}\nfunction finish(stream, state) {\n  state.pendingcb--;\n  state.finished = true;\n  const onfinishCallbacks = state[kOnFinished].splice(0);\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    onfinishCallbacks[i]();\n  }\n  stream.emit('finish');\n  if (state.autoDestroy) {\n    // In case of duplex streams we need a way to detect\n    // if the readable side is ready for autoDestroy as well.\n    const rState = stream._readableState;\n    const autoDestroy = !rState || rState.autoDestroy && (\n    // We don't expect the readable to ever 'end'\n    // if readable is explicitly set to false.\n    rState.endEmitted || rState.readable === false);\n    if (autoDestroy) {\n      stream.destroy();\n    }\n  }\n}\nObjectDefineProperties(Writable.prototype, {\n  closed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.closed : false;\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.destroyed : false;\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly managing destroyed.\n      if (this._writableState) {\n        this._writableState.destroyed = value;\n      }\n    }\n  },\n  writable: {\n    __proto__: null,\n    get() {\n      const w = this._writableState;\n      // w.writable === false means that this is part of a Duplex stream\n      // where the writable side was disabled upon construction.\n      // Compat. The user might manually disable writable side through\n      // deprecated setter.\n      return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended;\n    },\n    set(val) {\n      // Backwards compatible.\n      if (this._writableState) {\n        this._writableState.writable = !!val;\n      }\n    }\n  },\n  writableFinished: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.finished : false;\n    }\n  },\n  writableObjectMode: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.objectMode : false;\n    }\n  },\n  writableBuffer: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.getBuffer();\n    }\n  },\n  writableEnded: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.ending : false;\n    }\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    get() {\n      const wState = this._writableState;\n      if (!wState) return false;\n      return !wState.destroyed && !wState.ending && wState.needDrain;\n    }\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.highWaterMark;\n    }\n  },\n  writableCorked: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.corked : 0;\n    }\n  },\n  writableLength: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.length;\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._writableState ? this._writableState.errored : null;\n    }\n  },\n  writableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);\n    }\n  }\n});\nconst destroy = destroyImpl.destroy;\nWritable.prototype.destroy = function (err, cb) {\n  const state = this._writableState;\n\n  // Invoke pending callbacks.\n  if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {\n    process.nextTick(errorBuffer, state);\n  }\n  destroy.call(this, err, cb);\n  return this;\n};\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};\nWritable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err);\n};\nlet webStreamsAdapters;\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {};\n  return webStreamsAdapters;\n}\nWritable.fromWeb = function (writableStream, options) {\n  return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options);\n};\nWritable.toWeb = function (streamWritable) {\n  return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable);\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"WritableState\");\n$RefreshReg$(_c2, \"Writable\");","map":{"version":3,"names":["process","require","ArrayPrototypeSlice","Error","FunctionPrototypeSymbolHasInstance","ObjectDefineProperty","ObjectDefineProperties","ObjectSetPrototypeOf","StringPrototypeToLowerCase","Symbol","SymbolHasInstance","module","exports","Writable","WritableState","EventEmitter","EE","Stream","Buffer","destroyImpl","addAbortSignal","getHighWaterMark","getDefaultHighWaterMark","ERR_INVALID_ARG_TYPE","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_DESTROYED","ERR_STREAM_ALREADY_FINISHED","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","codes","errorOrDestroy","prototype","nop","kOnFinished","options","stream","isDuplex","objectMode","writableObjectMode","highWaterMark","finalCalled","needDrain","ending","ended","finished","destroyed","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","bind","undefined","writecb","writelen","afterWriteTickInfo","resetBuffer","pendingcb","constructed","prefinished","errorEmitted","emitClose","autoDestroy","errored","closed","closeEmitted","_c","state","buffered","bufferedIndex","allBuffers","allNoop","getBuffer","__proto__","get","_writableState","write","_write","writev","_writev","destroy","_destroy","final","_final","construct","_construct","signal","call","clearBuffer","finishMaybe","_c2","value","object","pipe","chunk","encoding","cb","isEncoding","from","_isUint8Array","_uint8ArrayToBuffer","err","nextTick","writeOrBuffer","cork","uncork","setDefaultEncoding","callback","len","ret","push","doWrite","onwriteError","er","errorBuffer","stack","_readableState","count","afterWriteTick","afterWrite","emit","n","_state$errored","onfinishCallbacks","splice","i","_state$errored2","bufferedLength","chunks","end","needFinish","callFinal","called","onFinish","finish","prefinish","rState","endEmitted","readable","set","writable","w","val","writableFinished","writableBuffer","writableEnded","writableNeedDrain","wState","writableHighWaterMark","writableCorked","writableLength","enumerable","writableAborted","_undestroy","undestroy","captureRejectionSymbol","webStreamsAdapters","lazyWebStreams","fromWeb","writableStream","newStreamWritableFromWritableStream","toWeb","streamWritable","newWritableStreamFromStreamWritable","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/backend/node_modules/readable-stream/lib/internal/streams/writable.js"],"sourcesContent":["/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n;('use strict')\nconst {\n  ArrayPrototypeSlice,\n  Error,\n  FunctionPrototypeSymbolHasInstance,\n  ObjectDefineProperty,\n  ObjectDefineProperties,\n  ObjectSetPrototypeOf,\n  StringPrototypeToLowerCase,\n  Symbol,\n  SymbolHasInstance\n} = require('../../ours/primordials')\nmodule.exports = Writable\nWritable.WritableState = WritableState\nconst { EventEmitter: EE } = require('events')\nconst Stream = require('./legacy').Stream\nconst { Buffer } = require('buffer')\nconst destroyImpl = require('./destroy')\nconst { addAbortSignal } = require('./add-abort-signal')\nconst { getHighWaterMark, getDefaultHighWaterMark } = require('./state')\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED,\n  ERR_STREAM_ALREADY_FINISHED,\n  ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING\n} = require('../../ours/errors').codes\nconst { errorOrDestroy } = destroyImpl\nObjectSetPrototypeOf(Writable.prototype, Stream.prototype)\nObjectSetPrototypeOf(Writable, Stream)\nfunction nop() {}\nconst kOnFinished = Symbol('kOnFinished')\nfunction WritableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex')\n\n  // Object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!(options && options.objectMode)\n  if (isDuplex) this.objectMode = this.objectMode || !!(options && options.writableObjectMode)\n\n  // The point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write().\n  this.highWaterMark = options\n    ? getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex)\n    : getDefaultHighWaterMark(false)\n\n  // if _final has been called.\n  this.finalCalled = false\n\n  // drain event flag.\n  this.needDrain = false\n  // At the start of calling end()\n  this.ending = false\n  // When end() has been called, and returned.\n  this.ended = false\n  // When 'finish' is emitted.\n  this.finished = false\n\n  // Has it been destroyed\n  this.destroyed = false\n\n  // Should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  const noDecode = !!(options && options.decodeStrings === false)\n  this.decodeStrings = !noDecode\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8'\n\n  // Not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0\n\n  // A flag to see when we're in the middle of a write.\n  this.writing = false\n\n  // When true all writes will be buffered until .uncork() call.\n  this.corked = 0\n\n  // A flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true\n\n  // A flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false\n\n  // The callback that's passed to _write(chunk, cb).\n  this.onwrite = onwrite.bind(undefined, stream)\n\n  // The callback that the user supplies to write(chunk, encoding, cb).\n  this.writecb = null\n\n  // The amount that is being written when _write is called.\n  this.writelen = 0\n\n  // Storage for data passed to the afterWrite() callback in case of\n  // synchronous _write() completion.\n  this.afterWriteTickInfo = null\n  resetBuffer(this)\n\n  // Number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted.\n  this.pendingcb = 0\n\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  this.constructed = true\n\n  // Emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams.\n  this.prefinished = false\n\n  // True if the error was already emitted and should not be thrown again.\n  this.errorEmitted = false\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = !options || options.emitClose !== false\n\n  // Should .destroy() be called after 'finish' (and potentially 'end').\n  this.autoDestroy = !options || options.autoDestroy !== false\n\n  // Indicates whether the stream has errored. When true all write() calls\n  // should return false. This is needed since when autoDestroy\n  // is disabled we need a way to tell whether the stream has failed.\n  this.errored = null\n\n  // Indicates whether the stream has finished destroying.\n  this.closed = false\n\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  this.closeEmitted = false\n  this[kOnFinished] = []\n}\nfunction resetBuffer(state) {\n  state.buffered = []\n  state.bufferedIndex = 0\n  state.allBuffers = true\n  state.allNoop = true\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  return ArrayPrototypeSlice(this.buffered, this.bufferedIndex)\n}\nObjectDefineProperty(WritableState.prototype, 'bufferedRequestCount', {\n  __proto__: null,\n  get() {\n    return this.buffered.length - this.bufferedIndex\n  }\n})\nfunction Writable(options) {\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex')\n  if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this)) return new Writable(options)\n  this._writableState = new WritableState(options, this, isDuplex)\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write\n    if (typeof options.writev === 'function') this._writev = options.writev\n    if (typeof options.destroy === 'function') this._destroy = options.destroy\n    if (typeof options.final === 'function') this._final = options.final\n    if (typeof options.construct === 'function') this._construct = options.construct\n    if (options.signal) addAbortSignal(options.signal, this)\n  }\n  Stream.call(this, options)\n  destroyImpl.construct(this, () => {\n    const state = this._writableState\n    if (!state.writing) {\n      clearBuffer(this, state)\n    }\n    finishMaybe(this, state)\n  })\n}\nObjectDefineProperty(Writable, SymbolHasInstance, {\n  __proto__: null,\n  value: function (object) {\n    if (FunctionPrototypeSymbolHasInstance(this, object)) return true\n    if (this !== Writable) return false\n    return object && object._writableState instanceof WritableState\n  }\n})\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE())\n}\nfunction _write(stream, chunk, encoding, cb) {\n  const state = stream._writableState\n  if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = state.defaultEncoding\n  } else {\n    if (!encoding) encoding = state.defaultEncoding\n    else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n    if (typeof cb !== 'function') cb = nop\n  }\n  if (chunk === null) {\n    throw new ERR_STREAM_NULL_VALUES()\n  } else if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      if (state.decodeStrings !== false) {\n        chunk = Buffer.from(chunk, encoding)\n        encoding = 'buffer'\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = 'buffer'\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk)\n      encoding = 'buffer'\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk)\n    }\n  }\n  let err\n  if (state.ending) {\n    err = new ERR_STREAM_WRITE_AFTER_END()\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('write')\n  }\n  if (err) {\n    process.nextTick(cb, err)\n    errorOrDestroy(stream, err, true)\n    return err\n  }\n  state.pendingcb++\n  return writeOrBuffer(stream, state, chunk, encoding, cb)\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  return _write(this, chunk, encoding, cb) === true\n}\nWritable.prototype.cork = function () {\n  this._writableState.corked++\n}\nWritable.prototype.uncork = function () {\n  const state = this._writableState\n  if (state.corked) {\n    state.corked--\n    if (!state.writing) clearBuffer(this, state)\n  }\n}\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = StringPrototypeToLowerCase(encoding)\n  if (!Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n  this._writableState.defaultEncoding = encoding\n  return this\n}\n\n// If we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, callback) {\n  const len = state.objectMode ? 1 : chunk.length\n  state.length += len\n\n  // stream._write resets state.length\n  const ret = state.length < state.highWaterMark\n  // We must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true\n  if (state.writing || state.corked || state.errored || !state.constructed) {\n    state.buffered.push({\n      chunk,\n      encoding,\n      callback\n    })\n    if (state.allBuffers && encoding !== 'buffer') {\n      state.allBuffers = false\n    }\n    if (state.allNoop && callback !== nop) {\n      state.allNoop = false\n    }\n  } else {\n    state.writelen = len\n    state.writecb = callback\n    state.writing = true\n    state.sync = true\n    stream._write(chunk, encoding, state.onwrite)\n    state.sync = false\n  }\n\n  // Return false if errored or destroyed in order to break\n  // any synchronous while(stream.write(data)) loops.\n  return ret && !state.errored && !state.destroyed\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len\n  state.writecb = cb\n  state.writing = true\n  state.sync = true\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'))\n  else if (writev) stream._writev(chunk, state.onwrite)\n  else stream._write(chunk, encoding, state.onwrite)\n  state.sync = false\n}\nfunction onwriteError(stream, state, er, cb) {\n  --state.pendingcb\n  cb(er)\n  // Ensure callbacks are invoked even when autoDestroy is\n  // not enabled. Passing `er` here doesn't make sense since\n  // it's related to one specific write, not to the buffered\n  // writes.\n  errorBuffer(state)\n  // This can emit error, but error must always follow cb.\n  errorOrDestroy(stream, er)\n}\nfunction onwrite(stream, er) {\n  const state = stream._writableState\n  const sync = state.sync\n  const cb = state.writecb\n  if (typeof cb !== 'function') {\n    errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK())\n    return\n  }\n  state.writing = false\n  state.writecb = null\n  state.length -= state.writelen\n  state.writelen = 0\n  if (er) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    er.stack // eslint-disable-line no-unused-expressions\n\n    if (!state.errored) {\n      state.errored = er\n    }\n\n    // In case of duplex streams we need to notify the readable side of the\n    // error.\n    if (stream._readableState && !stream._readableState.errored) {\n      stream._readableState.errored = er\n    }\n    if (sync) {\n      process.nextTick(onwriteError, stream, state, er, cb)\n    } else {\n      onwriteError(stream, state, er, cb)\n    }\n  } else {\n    if (state.buffered.length > state.bufferedIndex) {\n      clearBuffer(stream, state)\n    }\n    if (sync) {\n      // It is a common case that the callback passed to .write() is always\n      // the same. In that case, we do not schedule a new nextTick(), but\n      // rather just increase a counter, to improve performance and avoid\n      // memory allocations.\n      if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {\n        state.afterWriteTickInfo.count++\n      } else {\n        state.afterWriteTickInfo = {\n          count: 1,\n          cb,\n          stream,\n          state\n        }\n        process.nextTick(afterWriteTick, state.afterWriteTickInfo)\n      }\n    } else {\n      afterWrite(stream, state, 1, cb)\n    }\n  }\n}\nfunction afterWriteTick({ stream, state, count, cb }) {\n  state.afterWriteTickInfo = null\n  return afterWrite(stream, state, count, cb)\n}\nfunction afterWrite(stream, state, count, cb) {\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain\n  if (needDrain) {\n    state.needDrain = false\n    stream.emit('drain')\n  }\n  while (count-- > 0) {\n    state.pendingcb--\n    cb()\n  }\n  if (state.destroyed) {\n    errorBuffer(state)\n  }\n  finishMaybe(stream, state)\n}\n\n// If there's something in the buffer waiting, then invoke callbacks.\nfunction errorBuffer(state) {\n  if (state.writing) {\n    return\n  }\n  for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\n    var _state$errored\n    const { chunk, callback } = state.buffered[n]\n    const len = state.objectMode ? 1 : chunk.length\n    state.length -= len\n    callback(\n      (_state$errored = state.errored) !== null && _state$errored !== undefined\n        ? _state$errored\n        : new ERR_STREAM_DESTROYED('write')\n    )\n  }\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    var _state$errored2\n    onfinishCallbacks[i](\n      (_state$errored2 = state.errored) !== null && _state$errored2 !== undefined\n        ? _state$errored2\n        : new ERR_STREAM_DESTROYED('end')\n    )\n  }\n  resetBuffer(state)\n}\n\n// If there's something in the buffer waiting, then process it.\nfunction clearBuffer(stream, state) {\n  if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {\n    return\n  }\n  const { buffered, bufferedIndex, objectMode } = state\n  const bufferedLength = buffered.length - bufferedIndex\n  if (!bufferedLength) {\n    return\n  }\n  let i = bufferedIndex\n  state.bufferProcessing = true\n  if (bufferedLength > 1 && stream._writev) {\n    state.pendingcb -= bufferedLength - 1\n    const callback = state.allNoop\n      ? nop\n      : (err) => {\n          for (let n = i; n < buffered.length; ++n) {\n            buffered[n].callback(err)\n          }\n        }\n    // Make a copy of `buffered` if it's going to be used by `callback` above,\n    // since `doWrite` will mutate the array.\n    const chunks = state.allNoop && i === 0 ? buffered : ArrayPrototypeSlice(buffered, i)\n    chunks.allBuffers = state.allBuffers\n    doWrite(stream, state, true, state.length, chunks, '', callback)\n    resetBuffer(state)\n  } else {\n    do {\n      const { chunk, encoding, callback } = buffered[i]\n      buffered[i++] = null\n      const len = objectMode ? 1 : chunk.length\n      doWrite(stream, state, false, len, chunk, encoding, callback)\n    } while (i < buffered.length && !state.writing)\n    if (i === buffered.length) {\n      resetBuffer(state)\n    } else if (i > 256) {\n      buffered.splice(0, i)\n      state.bufferedIndex = 0\n    } else {\n      state.bufferedIndex = i\n    }\n  }\n  state.bufferProcessing = false\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  if (this._writev) {\n    this._writev(\n      [\n        {\n          chunk,\n          encoding\n        }\n      ],\n      cb\n    )\n  } else {\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()')\n  }\n}\nWritable.prototype._writev = null\nWritable.prototype.end = function (chunk, encoding, cb) {\n  const state = this._writableState\n  if (typeof chunk === 'function') {\n    cb = chunk\n    chunk = null\n    encoding = null\n  } else if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = null\n  }\n  let err\n  if (chunk !== null && chunk !== undefined) {\n    const ret = _write(this, chunk, encoding)\n    if (ret instanceof Error) {\n      err = ret\n    }\n  }\n\n  // .end() fully uncorks.\n  if (state.corked) {\n    state.corked = 1\n    this.uncork()\n  }\n  if (err) {\n    // Do nothing...\n  } else if (!state.errored && !state.ending) {\n    // This is forgiving in terms of unnecessary calls to end() and can hide\n    // logic errors. However, usually such errors are harmless and causing a\n    // hard error can be disproportionately destructive. It is not always\n    // trivial for the user to determine whether end() needs to be called\n    // or not.\n\n    state.ending = true\n    finishMaybe(this, state, true)\n    state.ended = true\n  } else if (state.finished) {\n    err = new ERR_STREAM_ALREADY_FINISHED('end')\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('end')\n  }\n  if (typeof cb === 'function') {\n    if (err || state.finished) {\n      process.nextTick(cb, err)\n    } else {\n      state[kOnFinished].push(cb)\n    }\n  }\n  return this\n}\nfunction needFinish(state) {\n  return (\n    state.ending &&\n    !state.destroyed &&\n    state.constructed &&\n    state.length === 0 &&\n    !state.errored &&\n    state.buffered.length === 0 &&\n    !state.finished &&\n    !state.writing &&\n    !state.errorEmitted &&\n    !state.closeEmitted\n  )\n}\nfunction callFinal(stream, state) {\n  let called = false\n  function onFinish(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : ERR_MULTIPLE_CALLBACK())\n      return\n    }\n    called = true\n    state.pendingcb--\n    if (err) {\n      const onfinishCallbacks = state[kOnFinished].splice(0)\n      for (let i = 0; i < onfinishCallbacks.length; i++) {\n        onfinishCallbacks[i](err)\n      }\n      errorOrDestroy(stream, err, state.sync)\n    } else if (needFinish(state)) {\n      state.prefinished = true\n      stream.emit('prefinish')\n      // Backwards compat. Don't check state.sync here.\n      // Some streams assume 'finish' will be emitted\n      // asynchronously relative to _final callback.\n      state.pendingcb++\n      process.nextTick(finish, stream, state)\n    }\n  }\n  state.sync = true\n  state.pendingcb++\n  try {\n    stream._final(onFinish)\n  } catch (err) {\n    onFinish(err)\n  }\n  state.sync = false\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.finalCalled = true\n      callFinal(stream, state)\n    } else {\n      state.prefinished = true\n      stream.emit('prefinish')\n    }\n  }\n}\nfunction finishMaybe(stream, state, sync) {\n  if (needFinish(state)) {\n    prefinish(stream, state)\n    if (state.pendingcb === 0) {\n      if (sync) {\n        state.pendingcb++\n        process.nextTick(\n          (stream, state) => {\n            if (needFinish(state)) {\n              finish(stream, state)\n            } else {\n              state.pendingcb--\n            }\n          },\n          stream,\n          state\n        )\n      } else if (needFinish(state)) {\n        state.pendingcb++\n        finish(stream, state)\n      }\n    }\n  }\n}\nfunction finish(stream, state) {\n  state.pendingcb--\n  state.finished = true\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    onfinishCallbacks[i]()\n  }\n  stream.emit('finish')\n  if (state.autoDestroy) {\n    // In case of duplex streams we need a way to detect\n    // if the readable side is ready for autoDestroy as well.\n    const rState = stream._readableState\n    const autoDestroy =\n      !rState ||\n      (rState.autoDestroy &&\n        // We don't expect the readable to ever 'end'\n        // if readable is explicitly set to false.\n        (rState.endEmitted || rState.readable === false))\n    if (autoDestroy) {\n      stream.destroy()\n    }\n  }\n}\nObjectDefineProperties(Writable.prototype, {\n  closed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.closed : false\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.destroyed : false\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly managing destroyed.\n      if (this._writableState) {\n        this._writableState.destroyed = value\n      }\n    }\n  },\n  writable: {\n    __proto__: null,\n    get() {\n      const w = this._writableState\n      // w.writable === false means that this is part of a Duplex stream\n      // where the writable side was disabled upon construction.\n      // Compat. The user might manually disable writable side through\n      // deprecated setter.\n      return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended\n    },\n    set(val) {\n      // Backwards compatible.\n      if (this._writableState) {\n        this._writableState.writable = !!val\n      }\n    }\n  },\n  writableFinished: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.finished : false\n    }\n  },\n  writableObjectMode: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.objectMode : false\n    }\n  },\n  writableBuffer: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.getBuffer()\n    }\n  },\n  writableEnded: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.ending : false\n    }\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    get() {\n      const wState = this._writableState\n      if (!wState) return false\n      return !wState.destroyed && !wState.ending && wState.needDrain\n    }\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.highWaterMark\n    }\n  },\n  writableCorked: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.corked : 0\n    }\n  },\n  writableLength: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.length\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._writableState ? this._writableState.errored : null\n    }\n  },\n  writableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(\n        this._writableState.writable !== false &&\n        (this._writableState.destroyed || this._writableState.errored) &&\n        !this._writableState.finished\n      )\n    }\n  }\n})\nconst destroy = destroyImpl.destroy\nWritable.prototype.destroy = function (err, cb) {\n  const state = this._writableState\n\n  // Invoke pending callbacks.\n  if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {\n    process.nextTick(errorBuffer, state)\n  }\n  destroy.call(this, err, cb)\n  return this\n}\nWritable.prototype._undestroy = destroyImpl.undestroy\nWritable.prototype._destroy = function (err, cb) {\n  cb(err)\n}\nWritable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err)\n}\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nWritable.fromWeb = function (writableStream, options) {\n  return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options)\n}\nWritable.toWeb = function (streamWritable) {\n  return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}