{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @internal */\nexport const knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\")\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options = {}) {\n  let context = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n/** @internal */\nexport class TracingContextImpl {\n  constructor(initialContext) {\n    this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : new Map();\n  }\n  setValue(key, value) {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.set(key, value);\n    return newContext;\n  }\n  getValue(key) {\n    return this._contextMap.get(key);\n  }\n  deleteValue(key) {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.delete(key);\n    return newContext;\n  }\n}","map":{"version":3,"names":["knownContextKeys","span","Symbol","for","namespace","createTracingContext","options","context","TracingContextImpl","parentContext","setValue","constructor","initialContext","_contextMap","Map","key","value","newContext","set","getValue","get","deleteValue","delete"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\core-tracing\\src\\tracingContext.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TracingContext, TracingSpan } from \"./interfaces.js\";\n\n/** @internal */\nexport const knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options: CreateTracingContextOptions = {}): TracingContext {\n  let context: TracingContext = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n\n/** @internal */\nexport class TracingContextImpl implements TracingContext {\n  private _contextMap: Map<symbol, unknown>;\n  constructor(initialContext?: TracingContext) {\n    this._contextMap =\n      initialContext instanceof TracingContextImpl\n        ? new Map<symbol, unknown>(initialContext._contextMap)\n        : new Map();\n  }\n\n  setValue(key: symbol, value: unknown): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.set(key, value);\n    return newContext;\n  }\n\n  getValue(key: symbol): unknown {\n    return this._contextMap.get(key);\n  }\n\n  deleteValue(key: symbol): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.delete(key);\n    return newContext;\n  }\n}\n\n/**\n * Represents a set of items that can be set when creating a new {@link TracingContext}.\n */\nexport interface CreateTracingContextOptions {\n  /** The {@link parentContext} - the newly created context will contain all the values of the parent context unless overridden. */\n  parentContext?: TracingContext;\n  /** An initial span to set on the context. */\n  span?: TracingSpan;\n  /** The namespace to set on any child spans. */\n  namespace?: string;\n}\n"],"mappings":"AAAA;AACA;AAIA;AACA,OAAO,MAAMA,gBAAgB,GAAG;EAC9BC,IAAI,EAAEC,MAAM,CAACC,GAAG,CAAC,0BAA0B,CAAC;EAC5CC,SAAS,EAAEF,MAAM,CAACC,GAAG,CAAC,+BAA+B;CACtD;AAED;;;;;;;AAOA,OAAM,SAAUE,oBAAoBA,CAACC,OAAA,GAAuC,EAAE;EAC5E,IAAIC,OAAO,GAAmB,IAAIC,kBAAkB,CAACF,OAAO,CAACG,aAAa,CAAC;EAC3E,IAAIH,OAAO,CAACL,IAAI,EAAE;IAChBM,OAAO,GAAGA,OAAO,CAACG,QAAQ,CAACV,gBAAgB,CAACC,IAAI,EAAEK,OAAO,CAACL,IAAI,CAAC;EACjE;EACA,IAAIK,OAAO,CAACF,SAAS,EAAE;IACrBG,OAAO,GAAGA,OAAO,CAACG,QAAQ,CAACV,gBAAgB,CAACI,SAAS,EAAEE,OAAO,CAACF,SAAS,CAAC;EAC3E;EACA,OAAOG,OAAO;AAChB;AAEA;AACA,OAAM,MAAOC,kBAAkB;EAE7BG,YAAYC,cAA+B;IACzC,IAAI,CAACC,WAAW,GACdD,cAAc,YAAYJ,kBAAkB,GACxC,IAAIM,GAAG,CAAkBF,cAAc,CAACC,WAAW,CAAC,GACpD,IAAIC,GAAG,EAAE;EACjB;EAEAJ,QAAQA,CAACK,GAAW,EAAEC,KAAc;IAClC,MAAMC,UAAU,GAAG,IAAIT,kBAAkB,CAAC,IAAI,CAAC;IAC/CS,UAAU,CAACJ,WAAW,CAACK,GAAG,CAACH,GAAG,EAAEC,KAAK,CAAC;IACtC,OAAOC,UAAU;EACnB;EAEAE,QAAQA,CAACJ,GAAW;IAClB,OAAO,IAAI,CAACF,WAAW,CAACO,GAAG,CAACL,GAAG,CAAC;EAClC;EAEAM,WAAWA,CAACN,GAAW;IACrB,MAAME,UAAU,GAAG,IAAIT,kBAAkB,CAAC,IAAI,CAAC;IAC/CS,UAAU,CAACJ,WAAW,CAACS,MAAM,CAACP,GAAG,CAAC;IAClC,OAAOE,UAAU;EACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}