{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"@azure/core-util\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  constructor(message, options = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    // The request and response may contain sensitive information in the headers or body.\n    // To help prevent this sensitive information being accidentally logged, the request and response\n    // properties are marked as non-enumerable here. This prevents them showing up in the output of\n    // JSON.stringify and console.log.\n    Object.defineProperty(this, \"request\", {\n      value: options.request,\n      enumerable: false\n    });\n    Object.defineProperty(this, \"response\", {\n      value: options.response,\n      enumerable: false\n    });\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom]() {\n    // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n    // response get sanitized.\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), {\n      request: this.request,\n      response: this.response\n    }))}`;\n  }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}","map":{"version":3,"names":["isError","custom","Sanitizer","errorSanitizer","RestError","Error","constructor","message","options","name","code","statusCode","Object","defineProperty","value","request","enumerable","response","setPrototypeOf","prototype","sanitize","assign","REQUEST_SEND_ERROR","PARSE_ERROR","isRestError","e"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\core-rest-pipeline\\src\\restError.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isError } from \"@azure/core-util\";\nimport type { PipelineRequest, PipelineResponse } from \"./interfaces.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * The options supported by RestError.\n */\nexport interface RestErrorOptions {\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  response?: PipelineResponse;\n}\n\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  public code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  public statusCode?: number;\n  /**\n   * The request that was made.\n   * This property is non-enumerable.\n   */\n  public request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   * This property is non-enumerable.\n   */\n  public response?: PipelineResponse;\n  /**\n   * Bonus property set by the throw site.\n   */\n  public details?: unknown;\n\n  constructor(message: string, options: RestErrorOptions = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n\n    // The request and response may contain sensitive information in the headers or body.\n    // To help prevent this sensitive information being accidentally logged, the request and response\n    // properties are marked as non-enumerable here. This prevents them showing up in the output of\n    // JSON.stringify and console.log.\n    Object.defineProperty(this, \"request\", { value: options.request, enumerable: false });\n    Object.defineProperty(this, \"response\", { value: options.response, enumerable: false });\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n    // response get sanitized.\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize({\n      ...this,\n      request: this.request,\n      response: this.response,\n    })}`;\n  }\n}\n\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e: unknown): e is RestError {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,OAAO,QAAQ,kBAAkB;AAE1C,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,SAAS,QAAQ,qBAAqB;AAE/C,MAAMC,cAAc,GAAG,IAAID,SAAS,EAAE;AAwBtC;;;AAGA,OAAM,MAAOE,SAAU,SAAQC,KAAK;EAoClCC,YAAYC,OAAe,EAAEC,OAAA,GAA4B,EAAE;IACzD,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,WAAW;IACvB,IAAI,CAACC,IAAI,GAAGF,OAAO,CAACE,IAAI;IACxB,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACG,UAAU;IAEpC;IACA;IACA;IACA;IACAC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MAAEC,KAAK,EAAEN,OAAO,CAACO,OAAO;MAAEC,UAAU,EAAE;IAAK,CAAE,CAAC;IACrFJ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MAAEC,KAAK,EAAEN,OAAO,CAACS,QAAQ;MAAED,UAAU,EAAE;IAAK,CAAE,CAAC;IAEvFJ,MAAM,CAACM,cAAc,CAAC,IAAI,EAAEd,SAAS,CAACe,SAAS,CAAC;EAClD;EAEA;;;EAGA,CAAClB,MAAM,IAAC;IACN;IACA;IACA,OAAO,cAAc,IAAI,CAACM,OAAO,OAAOJ,cAAc,CAACiB,QAAQ,CAAAR,MAAA,CAAAS,MAAA,CAAAT,MAAA,CAAAS,MAAA,KAC1D,IAAI;MACPN,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBE,QAAQ,EAAE,IAAI,CAACA;IAAQ,GACvB,EAAE;EACN;;AA9DA;;;;;AAKgBb,SAAA,CAAAkB,kBAAkB,GAAW,oBAAoB;AACjE;;;;AAIgBlB,SAAA,CAAAmB,WAAW,GAAW,aAAa;AAuDrD;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,CAAU;EACpC,IAAIA,CAAC,YAAYrB,SAAS,EAAE;IAC1B,OAAO,IAAI;EACb;EACA,OAAOJ,OAAO,CAACyB,CAAC,CAAC,IAAIA,CAAC,CAAChB,IAAI,KAAK,WAAW;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}