{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\DateSelector.js\",\n  _s = $RefreshSig$();\n/**\r\n * DateSelector.js\r\n * \r\n * Component for selecting a date restricted to the first day of each month.\r\n * The input field is set to be readonly, ensuring users only interact with the calendar picker.\r\n */\n\nimport React, { useState } from 'react';\n\n/**\r\n * DateSelector Component\r\n * \r\n * Allows users to select a date restricted to the first day of each month and fetch data on button click.\r\n * \r\n * @component\r\n * @param {function} fetchTemperatureData - Function to fetch temperature data for the selected date.\r\n * @returns {JSX.Element} A date selector input and fetch button.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DateSelector({\n  fetchTemperatureData\n}) {\n  _s();\n  // Initialize with the first of the current month\n  const defaultDate = new Date();\n  defaultDate.setDate(1);\n  const formattedDefaultDate = defaultDate.toISOString().substring(0, 10);\n  const [selectedDate, setSelectedDate] = useState(formattedDefaultDate);\n\n  /**\r\n   * handleDateChange\r\n   * \r\n   * Updates the selected date and restricts it to the first day of the month.\r\n   * \r\n   * @param {object} event - The date change event.\r\n   */\n  const handleDateChange = event => {\n    const date = new Date(event.target.value);\n    date.setDate(1); // Enforce first day of the month\n    setSelectedDate(date.toISOString().substring(0, 10));\n  };\n\n  /**\r\n   * handleFetchData\r\n   * \r\n   * Triggers the fetch action for the selected date.\r\n   */\n  const handleFetchData = () => {\n    if (selectedDate) {\n      fetchTemperatureData(selectedDate);\n    } else {\n      alert(\"Please select a valid date.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Date (First of Each Month Only): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: selectedDate,\n      onChange: handleDateChange,\n      max: formattedDefaultDate,\n      readOnly: true // Ensures user cannot type manually\n      ,\n      style: {\n        cursor: 'pointer'\n      } // Changes cursor to indicate calendar selection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetchData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(DateSelector, \"Nc18tCBhwk1o+W62eJpMcU10bKM=\");\n_c = DateSelector;\nexport default DateSelector;\nvar _c;\n$RefreshReg$(_c, \"DateSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DateSelector","fetchTemperatureData","_s","defaultDate","Date","setDate","formattedDefaultDate","toISOString","substring","selectedDate","setSelectedDate","handleDateChange","event","date","target","value","handleFetchData","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","max","readOnly","style","cursor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/DateSelector.js"],"sourcesContent":["/**\r\n * DateSelector.js\r\n * \r\n * Component for selecting a date restricted to the first day of each month.\r\n * The input field is set to be readonly, ensuring users only interact with the calendar picker.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * DateSelector Component\r\n * \r\n * Allows users to select a date restricted to the first day of each month and fetch data on button click.\r\n * \r\n * @component\r\n * @param {function} fetchTemperatureData - Function to fetch temperature data for the selected date.\r\n * @returns {JSX.Element} A date selector input and fetch button.\r\n */\r\nfunction DateSelector({ fetchTemperatureData }) {\r\n    // Initialize with the first of the current month\r\n    const defaultDate = new Date();\r\n    defaultDate.setDate(1);\r\n    const formattedDefaultDate = defaultDate.toISOString().substring(0, 10);\r\n    const [selectedDate, setSelectedDate] = useState(formattedDefaultDate);\r\n\r\n    /**\r\n     * handleDateChange\r\n     * \r\n     * Updates the selected date and restricts it to the first day of the month.\r\n     * \r\n     * @param {object} event - The date change event.\r\n     */\r\n    const handleDateChange = (event) => {\r\n        const date = new Date(event.target.value);\r\n        date.setDate(1); // Enforce first day of the month\r\n        setSelectedDate(date.toISOString().substring(0, 10));\r\n    };\r\n\r\n    /**\r\n     * handleFetchData\r\n     * \r\n     * Triggers the fetch action for the selected date.\r\n     */\r\n    const handleFetchData = () => {\r\n        if (selectedDate) {\r\n            fetchTemperatureData(selectedDate);\r\n        } else {\r\n            alert(\"Please select a valid date.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>Select Date (First of Each Month Only): </label>\r\n            <input\r\n                type=\"date\"\r\n                value={selectedDate}\r\n                onChange={handleDateChange}\r\n                max={formattedDefaultDate}\r\n                readOnly // Ensures user cannot type manually\r\n                style={{ cursor: 'pointer' }} // Changes cursor to indicate calendar selection\r\n            />\r\n            <button onClick={handleFetchData}>Fetch Data</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateSelector;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,SAASC,YAAYA,CAAC;EAAEC;AAAqB,CAAC,EAAE;EAAAC,EAAA;EAC5C;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9BD,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC;EACtB,MAAMC,oBAAoB,GAAGH,WAAW,CAACI,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACvE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAACS,oBAAoB,CAAC;;EAEtE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMK,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAG,IAAIT,IAAI,CAACQ,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IACzCF,IAAI,CAACR,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACjBK,eAAe,CAACG,IAAI,CAACN,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACxD,CAAC;;EAED;AACJ;AACA;AACA;AACA;EACI,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIP,YAAY,EAAE;MACdR,oBAAoB,CAACQ,YAAY,CAAC;IACtC,CAAC,MAAM;MACHQ,KAAK,CAAC,6BAA6B,CAAC;IACxC;EACJ,CAAC;EAED,oBACIlB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAO;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvDvB,OAAA;MACIwB,IAAI,EAAC,MAAM;MACXR,KAAK,EAAEN,YAAa;MACpBe,QAAQ,EAAEb,gBAAiB;MAC3Bc,GAAG,EAAEnB,oBAAqB;MAC1BoB,QAAQ,OAAC;MAAA;MACTC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAU,CAAE,CAAC;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACFvB,OAAA;MAAQ8B,OAAO,EAAEb,eAAgB;MAAAE,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEd;AAACpB,EAAA,CA/CQF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAiDrB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}