{"ast":null,"code":"/*! @azure/msal-common v14.16.0 2024-11-05 */\n'use strict';\n\nimport { IntFields, PerformanceEventAbbreviations, PerformanceEventStatus } from './PerformanceEvent.mjs';\nimport { StubPerformanceMeasurement } from './StubPerformanceClient.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\nimport { CacheError } from '../../error/CacheError.mjs';\nimport { ServerError } from '../../error/ServerError.mjs';\nimport { InteractionRequiredAuthError } from '../../error/InteractionRequiredAuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Starts context by adding payload to the stack\r\n * @param event {PerformanceEvent}\r\n * @param abbreviations {Map<string, string>} event name abbreviations\r\n * @param stack {?PerformanceEventStackedContext[]} stack\r\n */\nfunction startContext(event, abbreviations, stack) {\n  if (!stack) {\n    return;\n  }\n  stack.push({\n    name: abbreviations.get(event.name) || event.name\n  });\n}\n/**\r\n * Ends context by removing payload from the stack and returning parent or self, if stack is empty, payload\r\n *\r\n * @param event {PerformanceEvent}\r\n * @param abbreviations {Map<string, string>} event name abbreviations\r\n * @param stack {?PerformanceEventStackedContext[]} stack\r\n * @param error {?unknown} error\r\n */\nfunction endContext(event, abbreviations, stack, error) {\n  if (!(stack !== null && stack !== void 0 && stack.length)) {\n    return;\n  }\n  const peek = stack => {\n    return stack.length ? stack[stack.length - 1] : undefined;\n  };\n  const abbrEventName = abbreviations.get(event.name) || event.name;\n  const top = peek(stack);\n  if ((top === null || top === void 0 ? void 0 : top.name) !== abbrEventName) {\n    return;\n  }\n  const current = stack === null || stack === void 0 ? void 0 : stack.pop();\n  if (!current) {\n    return;\n  }\n  const errorCode = error instanceof AuthError ? error.errorCode : error instanceof Error ? error.name : undefined;\n  const subErr = error instanceof AuthError ? error.subError : undefined;\n  if (errorCode && current.childErr !== errorCode) {\n    current.err = errorCode;\n    if (subErr) {\n      current.subErr = subErr;\n    }\n  }\n  delete current.name;\n  delete current.childErr;\n  const context = {\n    ...current,\n    dur: event.durationMs\n  };\n  if (!event.success) {\n    context.fail = 1;\n  }\n  const parent = peek(stack);\n  if (!parent) {\n    return {\n      [abbrEventName]: context\n    };\n  }\n  if (errorCode) {\n    parent.childErr = errorCode;\n  }\n  let childName;\n  if (!parent[abbrEventName]) {\n    childName = abbrEventName;\n  } else {\n    const siblings = Object.keys(parent).filter(key => key.startsWith(abbrEventName)).length;\n    childName = `${abbrEventName}_${siblings + 1}`;\n  }\n  parent[childName] = context;\n  return parent;\n}\n/**\r\n * Adds error name and stack trace to the telemetry event\r\n * @param error {Error}\r\n * @param logger {Logger}\r\n * @param event {PerformanceEvent}\r\n * @param stackMaxSize {number} max error stack size to capture\r\n */\nfunction addError(error, logger, event, stackMaxSize = 5) {\n  var _event$errorStack, _error$stack;\n  if (!(error instanceof Error)) {\n    logger.trace(\"PerformanceClient.addErrorStack: Input error is not instance of Error\", event.correlationId);\n    return;\n  } else if (error instanceof AuthError) {\n    event.errorCode = error.errorCode;\n    event.subErrorCode = error.subError;\n    if (error instanceof ServerError || error instanceof InteractionRequiredAuthError) {\n      event.serverErrorNo = error.errorNo;\n    }\n    return;\n  } else if (error instanceof CacheError) {\n    event.errorCode = error.errorCode;\n    return;\n  } else if ((_event$errorStack = event.errorStack) !== null && _event$errorStack !== void 0 && _event$errorStack.length) {\n    logger.trace(\"PerformanceClient.addErrorStack: Stack already exist\", event.correlationId);\n    return;\n  } else if (!((_error$stack = error.stack) !== null && _error$stack !== void 0 && _error$stack.length)) {\n    logger.trace(\"PerformanceClient.addErrorStack: Input stack is empty\", event.correlationId);\n    return;\n  }\n  if (error.stack) {\n    event.errorStack = compactStack(error.stack, stackMaxSize);\n  }\n  event.errorName = error.name;\n}\n/**\r\n * Compacts error stack into array by fetching N first entries\r\n * @param stack {string} error stack\r\n * @param stackMaxSize {number} max error stack size to capture\r\n * @returns {string[]}\r\n */\nfunction compactStack(stack, stackMaxSize) {\n  if (stackMaxSize < 0) {\n    return [];\n  }\n  const stackArr = stack.split(\"\\n\") || [];\n  const res = [];\n  // Check for a handful of known, common runtime errors and log them (with redaction where applicable).\n  const firstLine = stackArr[0];\n  if (firstLine.startsWith(\"TypeError: Cannot read property\") || firstLine.startsWith(\"TypeError: Cannot read properties of\") || firstLine.startsWith(\"TypeError: Cannot set property\") || firstLine.startsWith(\"TypeError: Cannot set properties of\") || firstLine.endsWith(\"is not a function\")) {\n    // These types of errors are not at risk of leaking PII. They will indicate unavailable APIs\n    res.push(compactStackLine(firstLine));\n  } else if (firstLine.startsWith(\"SyntaxError\") || firstLine.startsWith(\"TypeError\")) {\n    // Prevent unintentional leaking of arbitrary info by redacting contents between both single and double quotes\n    res.push(compactStackLine(\n    // Example: SyntaxError: Unexpected token 'e', \"test\" is not valid JSON -> SyntaxError: Unexpected token <redacted>, <redacted> is not valid JSON\n    firstLine.replace(/['].*[']|[\"].*[\"]/g, \"<redacted>\")));\n  }\n  // Get top N stack lines\n  for (let ix = 1; ix < stackArr.length; ix++) {\n    if (res.length >= stackMaxSize) {\n      break;\n    }\n    const line = stackArr[ix];\n    res.push(compactStackLine(line));\n  }\n  return res;\n}\n/**\r\n * Compacts error stack line by shortening file path\r\n * Example: https://localhost/msal-common/src/authority/Authority.js:100:1 -> Authority.js:100:1\r\n * @param line {string} stack line\r\n * @returns {string}\r\n */\nfunction compactStackLine(line) {\n  const filePathIx = line.lastIndexOf(\" \") + 1;\n  if (filePathIx < 1) {\n    return line;\n  }\n  const filePath = line.substring(filePathIx);\n  let fileNameIx = filePath.lastIndexOf(\"/\");\n  fileNameIx = fileNameIx < 0 ? filePath.lastIndexOf(\"\\\\\") : fileNameIx;\n  if (fileNameIx >= 0) {\n    return (line.substring(0, filePathIx) + \"(\" + filePath.substring(fileNameIx + 1) + (filePath.charAt(filePath.length - 1) === \")\" ? \"\" : \")\")).trimStart();\n  }\n  return line.trimStart();\n}\nclass PerformanceClient {\n  /**\r\n   * Creates an instance of PerformanceClient,\r\n   * an abstract class containing core performance telemetry logic.\r\n   *\r\n   * @constructor\r\n   * @param {string} clientId Client ID of the application\r\n   * @param {string} authority Authority used by the application\r\n   * @param {Logger} logger Logger used by the application\r\n   * @param {string} libraryName Name of the library\r\n   * @param {string} libraryVersion Version of the library\r\n   * @param {ApplicationTelemetry} applicationTelemetry application name and version\r\n   * @param {Set<String>} intFields integer fields to be truncated\r\n   * @param {Map<string, string>} abbreviations event name abbreviations\r\n   */\n  constructor(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, intFields, abbreviations) {\n    this.authority = authority;\n    this.libraryName = libraryName;\n    this.libraryVersion = libraryVersion;\n    this.applicationTelemetry = applicationTelemetry;\n    this.clientId = clientId;\n    this.logger = logger;\n    this.callbacks = new Map();\n    this.eventsByCorrelationId = new Map();\n    this.eventStack = new Map();\n    this.queueMeasurements = new Map();\n    this.preQueueTimeByCorrelationId = new Map();\n    this.intFields = intFields || new Set();\n    for (const item of IntFields) {\n      this.intFields.add(item);\n    }\n    this.abbreviations = abbreviations || new Map();\n    for (const [key, value] of PerformanceEventAbbreviations) {\n      this.abbreviations.set(key, value);\n    }\n  }\n  /**\r\n   * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n   * Note: this function can be changed to abstract at the next major version bump.\r\n   *\r\n   * @param {string} measureName\r\n   * @param {string} correlationId\r\n   * @returns {IPerformanceMeasurement}\r\n   * @deprecated This method will be removed in the next major version\r\n   */\n  startPerformanceMeasurement(measureName,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  correlationId // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    return {};\n  }\n  /**\r\n   * Gets map of pre-queue times by correlation Id\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {string} correlationId\r\n   * @returns {number}\r\n   */\n  getPreQueueTime(eventName, correlationId) {\n    const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    if (!preQueueEvent) {\n      this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`);\n      return;\n    } else if (preQueueEvent.name !== eventName) {\n      this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`);\n      return;\n    }\n    return preQueueEvent.time;\n  }\n  /**\r\n   * Calculates the difference between current time and time when function was queued.\r\n   * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\r\n   *\r\n   * @param {number} preQueueTime\r\n   * @param {number} currentTime\r\n   * @returns {number}\r\n   */\n  calculateQueuedTime(preQueueTime, currentTime) {\n    if (preQueueTime < 1) {\n      this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`);\n      return 0;\n    }\n    if (currentTime < 1) {\n      this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${currentTime}`);\n      return 0;\n    }\n    if (currentTime < preQueueTime) {\n      this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\n      return 0;\n    }\n    return currentTime - preQueueTime;\n  }\n  /**\r\n   * Adds queue measurement time to QueueMeasurements array for given correlation ID.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n  addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!correlationId) {\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`);\n      return;\n    }\n    if (queueTime === 0) {\n      // Possible for there to be no queue time after calculation\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`);\n    } else if (!queueTime) {\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`);\n      return;\n    }\n    const queueMeasurement = {\n      eventName,\n      // Always default queue time to 0 for manually completed (improperly instrumented)\n      queueTime: manuallyCompleted ? 0 : queueTime,\n      manuallyCompleted\n    };\n    // Adds to existing correlation Id if present in queueMeasurements\n    const existingMeasurements = this.queueMeasurements.get(correlationId);\n    if (existingMeasurements) {\n      existingMeasurements.push(queueMeasurement);\n      this.queueMeasurements.set(correlationId, existingMeasurements);\n    } else {\n      // Sets new correlation Id if not present in queueMeasurements\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`);\n      const measurementArray = [queueMeasurement];\n      this.queueMeasurements.set(correlationId, measurementArray);\n    }\n    // Delete processed pre-queue event.\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n  }\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {InProgressPerformanceEvent}\r\n   */\n  startMeasurement(measureName, correlationId) {\n    var _this$applicationTele, _this$applicationTele2;\n    // Generate a placeholder correlation if the request does not provide one\n    const eventCorrelationId = correlationId || this.generateId();\n    if (!correlationId) {\n      this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\n    }\n    this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\n    const inProgressEvent = {\n      eventId: this.generateId(),\n      status: PerformanceEventStatus.InProgress,\n      authority: this.authority,\n      libraryName: this.libraryName,\n      libraryVersion: this.libraryVersion,\n      clientId: this.clientId,\n      name: measureName,\n      startTimeMs: Date.now(),\n      correlationId: eventCorrelationId,\n      appName: (_this$applicationTele = this.applicationTelemetry) === null || _this$applicationTele === void 0 ? void 0 : _this$applicationTele.appName,\n      appVersion: (_this$applicationTele2 = this.applicationTelemetry) === null || _this$applicationTele2 === void 0 ? void 0 : _this$applicationTele2.appVersion\n    };\n    // Store in progress events so they can be discarded if not ended properly\n    this.cacheEventByCorrelationId(inProgressEvent);\n    startContext(inProgressEvent, this.abbreviations, this.eventStack.get(eventCorrelationId));\n    // Return the event and functions the caller can use to properly end/flush the measurement\n    return {\n      end: (event, error) => {\n        return this.endMeasurement({\n          // Initial set of event properties\n          ...inProgressEvent,\n          // Properties set when event ends\n          ...event\n        }, error);\n      },\n      discard: () => {\n        return this.discardMeasurements(inProgressEvent.correlationId);\n      },\n      add: fields => {\n        return this.addFields(fields, inProgressEvent.correlationId);\n      },\n      increment: fields => {\n        return this.incrementFields(fields, inProgressEvent.correlationId);\n      },\n      event: inProgressEvent,\n      measurement: new StubPerformanceMeasurement()\n    };\n  }\n  /**\r\n   * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n   * as consumers should instead use the function returned by startMeasurement.\r\n   * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\r\n   * otherwise.\r\n   *\r\n   * @param {PerformanceEvent} event\r\n   * @param {unknown} error\r\n   * @returns {(PerformanceEvent | null)}\r\n   */\n  endMeasurement(event, error) {\n    var _finalEvent$incomplet;\n    const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (!rootEvent) {\n      this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\n      return null;\n    }\n    const isRoot = event.eventId === rootEvent.eventId;\n    let queueInfo = {\n      totalQueueTime: 0,\n      totalQueueCount: 0,\n      manuallyCompletedCount: 0\n    };\n    event.durationMs = Math.round(event.durationMs || this.getDurationMs(event.startTimeMs));\n    const context = JSON.stringify(endContext(event, this.abbreviations, this.eventStack.get(rootEvent.correlationId), error));\n    if (isRoot) {\n      queueInfo = this.getQueueInfo(event.correlationId);\n      this.discardMeasurements(rootEvent.correlationId);\n    } else {\n      var _rootEvent$incomplete;\n      (_rootEvent$incomplete = rootEvent.incompleteSubMeasurements) === null || _rootEvent$incomplete === void 0 ? void 0 : _rootEvent$incomplete.delete(event.eventId);\n    }\n    this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${event.durationMs} ms`, event.correlationId);\n    if (error) {\n      addError(error, this.logger, rootEvent);\n    }\n    // Add sub-measurement attribute to root event.\n    if (!isRoot) {\n      rootEvent[event.name + \"DurationMs\"] = Math.floor(event.durationMs);\n      return {\n        ...rootEvent\n      };\n    }\n    if (isRoot && !error && (rootEvent.errorCode || rootEvent.subErrorCode)) {\n      this.logger.trace(`PerformanceClient: Remove error and sub-error codes for root event ${event.name} as intermediate error was successfully handled`, event.correlationId);\n      rootEvent.errorCode = undefined;\n      rootEvent.subErrorCode = undefined;\n    }\n    let finalEvent = {\n      ...rootEvent,\n      ...event\n    };\n    let incompleteSubsCount = 0;\n    // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n    (_finalEvent$incomplet = finalEvent.incompleteSubMeasurements) === null || _finalEvent$incomplet === void 0 ? void 0 : _finalEvent$incomplet.forEach(subMeasurement => {\n      this.logger.trace(`PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`, finalEvent.correlationId);\n      incompleteSubsCount++;\n    });\n    finalEvent.incompleteSubMeasurements = undefined;\n    finalEvent = {\n      ...finalEvent,\n      queuedTimeMs: queueInfo.totalQueueTime,\n      queuedCount: queueInfo.totalQueueCount,\n      queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n      status: PerformanceEventStatus.Completed,\n      incompleteSubsCount,\n      context\n    };\n    this.truncateIntegralFields(finalEvent);\n    this.emitEvents([finalEvent], event.correlationId);\n    return finalEvent;\n  }\n  /**\r\n   * Saves extra information to be emitted when the measurements are flushed\r\n   * @param fields\r\n   * @param correlationId\r\n   */\n  addFields(fields, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating static fields\");\n    const event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      this.eventsByCorrelationId.set(correlationId, {\n        ...event,\n        ...fields\n      });\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  }\n  /**\r\n   * Increment counters to be emitted when the measurements are flushed\r\n   * @param fields {string[]}\r\n   * @param correlationId {string} correlation identifier\r\n   */\n  incrementFields(fields, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating counters\");\n    const event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      for (const counter in fields) {\n        if (!event.hasOwnProperty(counter)) {\n          event[counter] = 0;\n        } else if (isNaN(Number(event[counter]))) {\n          return;\n        }\n        event[counter] += fields[counter];\n      }\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  }\n  /**\r\n   * Upserts event into event cache.\r\n   * First key is the correlation id, second key is the event id.\r\n   * Allows for events to be grouped by correlation id,\r\n   * and to easily allow for properties on them to be updated.\r\n   *\r\n   * @private\r\n   * @param {PerformanceEvent} event\r\n   */\n  cacheEventByCorrelationId(event) {\n    const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (rootEvent) {\n      this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\n      rootEvent.incompleteSubMeasurements = rootEvent.incompleteSubMeasurements || new Map();\n      rootEvent.incompleteSubMeasurements.set(event.eventId, {\n        name: event.name,\n        startTimeMs: event.startTimeMs\n      });\n    } else {\n      this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\n      this.eventsByCorrelationId.set(event.correlationId, {\n        ...event\n      });\n      this.eventStack.set(event.correlationId, []);\n    }\n  }\n  getQueueInfo(correlationId) {\n    const queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\n    if (!queueMeasurementForCorrelationId) {\n      this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`);\n    }\n    let totalQueueTime = 0;\n    let totalQueueCount = 0;\n    let manuallyCompletedCount = 0;\n    queueMeasurementForCorrelationId === null || queueMeasurementForCorrelationId === void 0 ? void 0 : queueMeasurementForCorrelationId.forEach(measurement => {\n      totalQueueTime += measurement.queueTime;\n      totalQueueCount++;\n      manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n    });\n    return {\n      totalQueueTime,\n      totalQueueCount,\n      manuallyCompletedCount\n    };\n  }\n  /**\r\n   * Removes measurements and aux data for a given correlation id.\r\n   *\r\n   * @param {string} correlationId\r\n   */\n  discardMeasurements(correlationId) {\n    this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n    this.eventsByCorrelationId.delete(correlationId);\n    this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\n    this.queueMeasurements.delete(correlationId);\n    this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n    this.logger.trace(\"PerformanceClient: Event stack discarded\", correlationId);\n    this.eventStack.delete(correlationId);\n  }\n  /**\r\n   * Registers a callback function to receive performance events.\r\n   *\r\n   * @param {PerformanceCallbackFunction} callback\r\n   * @returns {string}\r\n   */\n  addPerformanceCallback(callback) {\n    for (const [id, cb] of this.callbacks) {\n      if (cb.toString() === callback.toString()) {\n        this.logger.warning(`PerformanceClient: Performance callback is already registered with id: ${id}`);\n        return id;\n      }\n    }\n    const callbackId = this.generateId();\n    this.callbacks.set(callbackId, callback);\n    this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\n    return callbackId;\n  }\n  /**\r\n   * Removes a callback registered with addPerformanceCallback.\r\n   *\r\n   * @param {string} callbackId\r\n   * @returns {boolean}\r\n   */\n  removePerformanceCallback(callbackId) {\n    const result = this.callbacks.delete(callbackId);\n    if (result) {\n      this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\n    } else {\n      this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\n    }\n    return result;\n  }\n  /**\r\n   * Emits events to all registered callbacks.\r\n   *\r\n   * @param {PerformanceEvent[]} events\r\n   * @param {?string} [correlationId]\r\n   */\n  emitEvents(events, correlationId) {\n    this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n    this.callbacks.forEach((callback, callbackId) => {\n      this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\n      callback.apply(null, [events]);\n    });\n  }\n  /**\r\n   * Enforce truncation of integral fields in performance event.\r\n   * @param {PerformanceEvent} event performance event to update.\r\n   */\n  truncateIntegralFields(event) {\n    this.intFields.forEach(key => {\n      if (key in event && typeof event[key] === \"number\") {\n        event[key] = Math.floor(event[key]);\n      }\n    });\n  }\n  /**\r\n   * Returns event duration in milliseconds\r\n   * @param startTimeMs {number}\r\n   * @returns {number}\r\n   */\n  getDurationMs(startTimeMs) {\n    const durationMs = Date.now() - startTimeMs;\n    // Handle clock skew\n    return durationMs < 0 ? durationMs : 0;\n  }\n}\nexport { PerformanceClient, addError, compactStack, compactStackLine, endContext, startContext };","map":{"version":3,"names":["startContext","event","abbreviations","stack","push","name","get","endContext","error","length","peek","undefined","abbrEventName","top","current","pop","errorCode","AuthError","Error","subErr","subError","childErr","err","context","dur","durationMs","success","fail","parent","childName","siblings","Object","keys","filter","key","startsWith","addError","logger","stackMaxSize","_event$errorStack","_error$stack","trace","correlationId","subErrorCode","ServerError","InteractionRequiredAuthError","serverErrorNo","errorNo","CacheError","errorStack","compactStack","errorName","stackArr","split","res","firstLine","endsWith","compactStackLine","replace","ix","line","filePathIx","lastIndexOf","filePath","substring","fileNameIx","charAt","trimStart","PerformanceClient","constructor","clientId","authority","libraryName","libraryVersion","applicationTelemetry","intFields","callbacks","Map","eventsByCorrelationId","eventStack","queueMeasurements","preQueueTimeByCorrelationId","Set","item","IntFields","add","value","PerformanceEventAbbreviations","set","startPerformanceMeasurement","measureName","getPreQueueTime","eventName","preQueueEvent","time","calculateQueuedTime","preQueueTime","currentTime","addQueueMeasurement","queueTime","manuallyCompleted","queueMeasurement","existingMeasurements","measurementArray","delete","startMeasurement","_this$applicationTele","_this$applicationTele2","eventCorrelationId","generateId","info","inProgressEvent","eventId","status","PerformanceEventStatus","InProgress","startTimeMs","Date","now","appName","appVersion","cacheEventByCorrelationId","end","endMeasurement","discard","discardMeasurements","fields","addFields","increment","incrementFields","measurement","StubPerformanceMeasurement","_finalEvent$incomplet","rootEvent","isRoot","queueInfo","totalQueueTime","totalQueueCount","manuallyCompletedCount","Math","round","getDurationMs","JSON","stringify","getQueueInfo","_rootEvent$incomplete","incompleteSubMeasurements","floor","finalEvent","incompleteSubsCount","forEach","subMeasurement","queuedTimeMs","queuedCount","queuedManuallyCompletedCount","Completed","truncateIntegralFields","emitEvents","counter","hasOwnProperty","isNaN","Number","queueMeasurementForCorrelationId","addPerformanceCallback","callback","id","cb","toString","warning","callbackId","verbose","removePerformanceCallback","result","events","apply"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\msal-common\\src\\telemetry\\performance\\PerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ApplicationTelemetry } from \"../../config/ClientConfiguration.js\";\nimport { Logger } from \"../../logger/Logger.js\";\nimport {\n    InProgressPerformanceEvent,\n    IPerformanceClient,\n    PerformanceCallbackFunction,\n    QueueMeasurement,\n} from \"./IPerformanceClient.js\";\nimport {\n    IntFields,\n    PerformanceEvent,\n    PerformanceEventAbbreviations,\n    PerformanceEventContext,\n    PerformanceEvents,\n    PerformanceEventStackedContext,\n    PerformanceEventStatus,\n} from \"./PerformanceEvent.js\";\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement.js\";\nimport { StubPerformanceMeasurement } from \"./StubPerformanceClient.js\";\nimport { AuthError } from \"../../error/AuthError.js\";\nimport { CacheError } from \"../../error/CacheError.js\";\nimport { ServerError } from \"../../error/ServerError.js\";\nimport { InteractionRequiredAuthError } from \"../../error/InteractionRequiredAuthError.js\";\n\nexport interface PreQueueEvent {\n    name: PerformanceEvents;\n    time: number;\n}\n\n/**\n * Starts context by adding payload to the stack\n * @param event {PerformanceEvent}\n * @param abbreviations {Map<string, string>} event name abbreviations\n * @param stack {?PerformanceEventStackedContext[]} stack\n */\nexport function startContext(\n    event: PerformanceEvent,\n    abbreviations: Map<string, string>,\n    stack?: PerformanceEventStackedContext[]\n): void {\n    if (!stack) {\n        return;\n    }\n\n    stack.push({\n        name: abbreviations.get(event.name) || event.name,\n    });\n}\n\n/**\n * Ends context by removing payload from the stack and returning parent or self, if stack is empty, payload\n *\n * @param event {PerformanceEvent}\n * @param abbreviations {Map<string, string>} event name abbreviations\n * @param stack {?PerformanceEventStackedContext[]} stack\n * @param error {?unknown} error\n */\nexport function endContext(\n    event: PerformanceEvent,\n    abbreviations: Map<string, string>,\n    stack?: PerformanceEventStackedContext[],\n    error?: unknown\n): PerformanceEventContext | undefined {\n    if (!stack?.length) {\n        return;\n    }\n\n    const peek = (stack: PerformanceEventStackedContext[]) => {\n        return stack.length ? stack[stack.length - 1] : undefined;\n    };\n\n    const abbrEventName = abbreviations.get(event.name) || event.name;\n    const top = peek(stack);\n    if (top?.name !== abbrEventName) {\n        return;\n    }\n\n    const current = stack?.pop();\n    if (!current) {\n        return;\n    }\n\n    const errorCode =\n        error instanceof AuthError\n            ? error.errorCode\n            : error instanceof Error\n            ? error.name\n            : undefined;\n    const subErr = error instanceof AuthError ? error.subError : undefined;\n\n    if (errorCode && current.childErr !== errorCode) {\n        current.err = errorCode;\n        if (subErr) {\n            current.subErr = subErr;\n        }\n    }\n\n    delete current.name;\n    delete current.childErr;\n\n    const context: PerformanceEventContext = {\n        ...current,\n        dur: event.durationMs,\n    };\n\n    if (!event.success) {\n        context.fail = 1;\n    }\n\n    const parent = peek(stack);\n    if (!parent) {\n        return { [abbrEventName]: context };\n    }\n\n    if (errorCode) {\n        parent.childErr = errorCode;\n    }\n\n    let childName: string;\n    if (!parent[abbrEventName]) {\n        childName = abbrEventName;\n    } else {\n        const siblings = Object.keys(parent).filter((key) =>\n            key.startsWith(abbrEventName)\n        ).length;\n        childName = `${abbrEventName}_${siblings + 1}`;\n    }\n    parent[childName] = context;\n    return parent;\n}\n\n/**\n * Adds error name and stack trace to the telemetry event\n * @param error {Error}\n * @param logger {Logger}\n * @param event {PerformanceEvent}\n * @param stackMaxSize {number} max error stack size to capture\n */\nexport function addError(\n    error: unknown,\n    logger: Logger,\n    event: PerformanceEvent,\n    stackMaxSize: number = 5\n): void {\n    if (!(error instanceof Error)) {\n        logger.trace(\n            \"PerformanceClient.addErrorStack: Input error is not instance of Error\",\n            event.correlationId\n        );\n        return;\n    } else if (error instanceof AuthError) {\n        event.errorCode = error.errorCode;\n        event.subErrorCode = error.subError;\n        if (\n            error instanceof ServerError ||\n            error instanceof InteractionRequiredAuthError\n        ) {\n            event.serverErrorNo = error.errorNo;\n        }\n        return;\n    } else if (error instanceof CacheError) {\n        event.errorCode = error.errorCode;\n        return;\n    } else if (event.errorStack?.length) {\n        logger.trace(\n            \"PerformanceClient.addErrorStack: Stack already exist\",\n            event.correlationId\n        );\n        return;\n    } else if (!error.stack?.length) {\n        logger.trace(\n            \"PerformanceClient.addErrorStack: Input stack is empty\",\n            event.correlationId\n        );\n        return;\n    }\n\n    if (error.stack) {\n        event.errorStack = compactStack(error.stack, stackMaxSize);\n    }\n    event.errorName = error.name;\n}\n\n/**\n * Compacts error stack into array by fetching N first entries\n * @param stack {string} error stack\n * @param stackMaxSize {number} max error stack size to capture\n * @returns {string[]}\n */\nexport function compactStack(stack: string, stackMaxSize: number): string[] {\n    if (stackMaxSize < 0) {\n        return [];\n    }\n\n    const stackArr = stack.split(\"\\n\") || [];\n\n    const res = [];\n\n    // Check for a handful of known, common runtime errors and log them (with redaction where applicable).\n    const firstLine = stackArr[0];\n    if (\n        firstLine.startsWith(\"TypeError: Cannot read property\") ||\n        firstLine.startsWith(\"TypeError: Cannot read properties of\") ||\n        firstLine.startsWith(\"TypeError: Cannot set property\") ||\n        firstLine.startsWith(\"TypeError: Cannot set properties of\") ||\n        firstLine.endsWith(\"is not a function\")\n    ) {\n        // These types of errors are not at risk of leaking PII. They will indicate unavailable APIs\n        res.push(compactStackLine(firstLine));\n    } else if (\n        firstLine.startsWith(\"SyntaxError\") ||\n        firstLine.startsWith(\"TypeError\")\n    ) {\n        // Prevent unintentional leaking of arbitrary info by redacting contents between both single and double quotes\n        res.push(\n            compactStackLine(\n                // Example: SyntaxError: Unexpected token 'e', \"test\" is not valid JSON -> SyntaxError: Unexpected token <redacted>, <redacted> is not valid JSON\n                firstLine.replace(/['].*[']|[\"].*[\"]/g, \"<redacted>\")\n            )\n        );\n    }\n\n    // Get top N stack lines\n    for (let ix = 1; ix < stackArr.length; ix++) {\n        if (res.length >= stackMaxSize) {\n            break;\n        }\n        const line = stackArr[ix];\n        res.push(compactStackLine(line));\n    }\n    return res;\n}\n\n/**\n * Compacts error stack line by shortening file path\n * Example: https://localhost/msal-common/src/authority/Authority.js:100:1 -> Authority.js:100:1\n * @param line {string} stack line\n * @returns {string}\n */\nexport function compactStackLine(line: string): string {\n    const filePathIx = line.lastIndexOf(\" \") + 1;\n    if (filePathIx < 1) {\n        return line;\n    }\n    const filePath = line.substring(filePathIx);\n\n    let fileNameIx = filePath.lastIndexOf(\"/\");\n    fileNameIx = fileNameIx < 0 ? filePath.lastIndexOf(\"\\\\\") : fileNameIx;\n\n    if (fileNameIx >= 0) {\n        return (\n            line.substring(0, filePathIx) +\n            \"(\" +\n            filePath.substring(fileNameIx + 1) +\n            (filePath.charAt(filePath.length - 1) === \")\" ? \"\" : \")\")\n        ).trimStart();\n    }\n\n    return line.trimStart();\n}\n\nexport abstract class PerformanceClient implements IPerformanceClient {\n    protected authority: string;\n    protected libraryName: string;\n    protected libraryVersion: string;\n    protected applicationTelemetry: ApplicationTelemetry;\n    protected clientId: string;\n    protected logger: Logger;\n    protected callbacks: Map<string, PerformanceCallbackFunction>;\n\n    /**\n     * Multiple events with the same correlation id.\n     * @protected\n     * @type {Map<string, PerformanceEvent>}\n     */\n    protected eventsByCorrelationId: Map<string, PerformanceEvent>;\n\n    /**\n     * Map of pre-queue times by correlation Id\n     *\n     * @protected\n     * @type {Map<string, PreQueueEvent>}\n     */\n    protected preQueueTimeByCorrelationId: Map<string, PreQueueEvent>;\n\n    /**\n     * Map of queue measurements by correlation Id\n     *\n     * @protected\n     * @type {Map<string, Array<QueueMeasurement>>}\n     */\n    protected queueMeasurements: Map<string, Array<QueueMeasurement>>;\n\n    protected intFields: Set<string>;\n\n    /**\n     * Map of stacked events by correlation id.\n     *\n     * @protected\n     */\n    protected eventStack: Map<string, PerformanceEventStackedContext[]>;\n\n    /**\n     * Event name abbreviations\n     *\n     * @protected\n     */\n    protected abbreviations: Map<string, string>;\n\n    /**\n     * Creates an instance of PerformanceClient,\n     * an abstract class containing core performance telemetry logic.\n     *\n     * @constructor\n     * @param {string} clientId Client ID of the application\n     * @param {string} authority Authority used by the application\n     * @param {Logger} logger Logger used by the application\n     * @param {string} libraryName Name of the library\n     * @param {string} libraryVersion Version of the library\n     * @param {ApplicationTelemetry} applicationTelemetry application name and version\n     * @param {Set<String>} intFields integer fields to be truncated\n     * @param {Map<string, string>} abbreviations event name abbreviations\n     */\n    constructor(\n        clientId: string,\n        authority: string,\n        logger: Logger,\n        libraryName: string,\n        libraryVersion: string,\n        applicationTelemetry: ApplicationTelemetry,\n        intFields?: Set<string>,\n        abbreviations?: Map<string, string>\n    ) {\n        this.authority = authority;\n        this.libraryName = libraryName;\n        this.libraryVersion = libraryVersion;\n        this.applicationTelemetry = applicationTelemetry;\n        this.clientId = clientId;\n        this.logger = logger;\n        this.callbacks = new Map();\n        this.eventsByCorrelationId = new Map();\n        this.eventStack = new Map();\n        this.queueMeasurements = new Map();\n        this.preQueueTimeByCorrelationId = new Map();\n        this.intFields = intFields || new Set();\n        for (const item of IntFields) {\n            this.intFields.add(item);\n        }\n        this.abbreviations = abbreviations || new Map();\n        for (const [key, value] of PerformanceEventAbbreviations) {\n            this.abbreviations.set(key, value);\n        }\n    }\n\n    /**\n     * Generates and returns a unique id, typically a guid.\n     *\n     * @abstract\n     * @returns {string}\n     */\n    abstract generateId(): string;\n\n    /**\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n     * Note: this function can be changed to abstract at the next major version bump.\n     *\n     * @param {string} measureName\n     * @param {string} correlationId\n     * @returns {IPerformanceMeasurement}\n     * @deprecated This method will be removed in the next major version\n     */\n    startPerformanceMeasurement(\n        measureName: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n        correlationId: string // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): IPerformanceMeasurement {\n        return {} as IPerformanceMeasurement;\n    }\n\n    /**\n     * Sets pre-queue time by correlation Id\n     *\n     * @abstract\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns\n     */\n    abstract setPreQueueTime(\n        eventName: PerformanceEvents,\n        correlationId?: string\n    ): void;\n\n    /**\n     * Gets map of pre-queue times by correlation Id\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns {number}\n     */\n    getPreQueueTime(eventName: string, correlationId: string): number | void {\n        const preQueueEvent: PreQueueEvent | undefined =\n            this.preQueueTimeByCorrelationId.get(correlationId);\n\n        if (!preQueueEvent) {\n            this.logger.trace(\n                `PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`\n            );\n            return;\n        } else if (preQueueEvent.name !== eventName) {\n            this.logger.trace(\n                `PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`\n            );\n            return;\n        }\n\n        return preQueueEvent.time;\n    }\n\n    /**\n     * Calculates the difference between current time and time when function was queued.\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\n     *\n     * @param {number} preQueueTime\n     * @param {number} currentTime\n     * @returns {number}\n     */\n    calculateQueuedTime(preQueueTime: number, currentTime: number): number {\n        if (preQueueTime < 1) {\n            this.logger.trace(\n                `PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`\n            );\n            return 0;\n        }\n\n        if (currentTime < 1) {\n            this.logger.trace(\n                `PerformanceClient: currentTime should be a positive integer and not ${currentTime}`\n            );\n            return 0;\n        }\n\n        if (currentTime < preQueueTime) {\n            this.logger.trace(\n                \"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\"\n            );\n            return 0;\n        }\n\n        return currentTime - preQueueTime;\n    }\n\n    /**\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(\n        eventName: string,\n        correlationId?: string,\n        queueTime?: number,\n        manuallyCompleted?: boolean\n    ): void {\n        if (!correlationId) {\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`\n            );\n            return;\n        }\n\n        if (queueTime === 0) {\n            // Possible for there to be no queue time after calculation\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`\n            );\n        } else if (!queueTime) {\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`\n            );\n            return;\n        }\n\n        const queueMeasurement: QueueMeasurement = {\n            eventName,\n            // Always default queue time to 0 for manually completed (improperly instrumented)\n            queueTime: manuallyCompleted ? 0 : queueTime,\n            manuallyCompleted,\n        };\n\n        // Adds to existing correlation Id if present in queueMeasurements\n        const existingMeasurements = this.queueMeasurements.get(correlationId);\n        if (existingMeasurements) {\n            existingMeasurements.push(queueMeasurement);\n            this.queueMeasurements.set(correlationId, existingMeasurements);\n        } else {\n            // Sets new correlation Id if not present in queueMeasurements\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`\n            );\n            const measurementArray = [queueMeasurement];\n            this.queueMeasurements.set(correlationId, measurementArray);\n        }\n        // Delete processed pre-queue event.\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n    }\n\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {InProgressPerformanceEvent}\n     */\n    startMeasurement(\n        measureName: string,\n        correlationId?: string\n    ): InProgressPerformanceEvent {\n        // Generate a placeholder correlation if the request does not provide one\n        const eventCorrelationId = correlationId || this.generateId();\n        if (!correlationId) {\n            this.logger.info(\n                `PerformanceClient: No correlation id provided for ${measureName}, generating`,\n                eventCorrelationId\n            );\n        }\n\n        this.logger.trace(\n            `PerformanceClient: Performance measurement started for ${measureName}`,\n            eventCorrelationId\n        );\n\n        const inProgressEvent: PerformanceEvent = {\n            eventId: this.generateId(),\n            status: PerformanceEventStatus.InProgress,\n            authority: this.authority,\n            libraryName: this.libraryName,\n            libraryVersion: this.libraryVersion,\n            clientId: this.clientId,\n            name: measureName,\n            startTimeMs: Date.now(),\n            correlationId: eventCorrelationId,\n            appName: this.applicationTelemetry?.appName,\n            appVersion: this.applicationTelemetry?.appVersion,\n        };\n\n        // Store in progress events so they can be discarded if not ended properly\n        this.cacheEventByCorrelationId(inProgressEvent);\n        startContext(\n            inProgressEvent,\n            this.abbreviations,\n            this.eventStack.get(eventCorrelationId)\n        );\n\n        // Return the event and functions the caller can use to properly end/flush the measurement\n        return {\n            end: (\n                event?: Partial<PerformanceEvent>,\n                error?: unknown\n            ): PerformanceEvent | null => {\n                return this.endMeasurement(\n                    {\n                        // Initial set of event properties\n                        ...inProgressEvent,\n                        // Properties set when event ends\n                        ...event,\n                    },\n                    error\n                );\n            },\n            discard: () => {\n                return this.discardMeasurements(inProgressEvent.correlationId);\n            },\n            add: (fields: { [key: string]: {} | undefined }) => {\n                return this.addFields(fields, inProgressEvent.correlationId);\n            },\n            increment: (fields: { [key: string]: number | undefined }) => {\n                return this.incrementFields(\n                    fields,\n                    inProgressEvent.correlationId\n                );\n            },\n            event: inProgressEvent,\n            measurement: new StubPerformanceMeasurement(),\n        };\n    }\n\n    /**\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\n     * as consumers should instead use the function returned by startMeasurement.\n     * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\n     * otherwise.\n     *\n     * @param {PerformanceEvent} event\n     * @param {unknown} error\n     * @returns {(PerformanceEvent | null)}\n     */\n    endMeasurement(\n        event: PerformanceEvent,\n        error?: unknown\n    ): PerformanceEvent | null {\n        const rootEvent: PerformanceEvent | undefined =\n            this.eventsByCorrelationId.get(event.correlationId);\n        if (!rootEvent) {\n            this.logger.trace(\n                `PerformanceClient: Measurement not found for ${event.eventId}`,\n                event.correlationId\n            );\n            return null;\n        }\n\n        const isRoot = event.eventId === rootEvent.eventId;\n        let queueInfo = {\n            totalQueueTime: 0,\n            totalQueueCount: 0,\n            manuallyCompletedCount: 0,\n        };\n\n        event.durationMs = Math.round(\n            event.durationMs || this.getDurationMs(event.startTimeMs)\n        );\n\n        const context = JSON.stringify(\n            endContext(\n                event,\n                this.abbreviations,\n                this.eventStack.get(rootEvent.correlationId),\n                error\n            )\n        );\n\n        if (isRoot) {\n            queueInfo = this.getQueueInfo(event.correlationId);\n            this.discardMeasurements(rootEvent.correlationId);\n        } else {\n            rootEvent.incompleteSubMeasurements?.delete(event.eventId);\n        }\n\n        this.logger.trace(\n            `PerformanceClient: Performance measurement ended for ${event.name}: ${event.durationMs} ms`,\n            event.correlationId\n        );\n\n        if (error) {\n            addError(error, this.logger, rootEvent);\n        }\n\n        // Add sub-measurement attribute to root event.\n        if (!isRoot) {\n            rootEvent[event.name + \"DurationMs\"] = Math.floor(event.durationMs);\n            return { ...rootEvent };\n        }\n\n        if (\n            isRoot &&\n            !error &&\n            (rootEvent.errorCode || rootEvent.subErrorCode)\n        ) {\n            this.logger.trace(\n                `PerformanceClient: Remove error and sub-error codes for root event ${event.name} as intermediate error was successfully handled`,\n                event.correlationId\n            );\n            rootEvent.errorCode = undefined;\n            rootEvent.subErrorCode = undefined;\n        }\n\n        let finalEvent: PerformanceEvent = { ...rootEvent, ...event };\n        let incompleteSubsCount: number = 0;\n        // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n        finalEvent.incompleteSubMeasurements?.forEach((subMeasurement) => {\n            this.logger.trace(\n                `PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`,\n                finalEvent.correlationId\n            );\n            incompleteSubsCount++;\n        });\n        finalEvent.incompleteSubMeasurements = undefined;\n\n        finalEvent = {\n            ...finalEvent,\n            queuedTimeMs: queueInfo.totalQueueTime,\n            queuedCount: queueInfo.totalQueueCount,\n            queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n            status: PerformanceEventStatus.Completed,\n            incompleteSubsCount,\n            context,\n        };\n        this.truncateIntegralFields(finalEvent);\n        this.emitEvents([finalEvent], event.correlationId);\n\n        return finalEvent;\n    }\n\n    /**\n     * Saves extra information to be emitted when the measurements are flushed\n     * @param fields\n     * @param correlationId\n     */\n    addFields(\n        fields: { [key: string]: {} | undefined },\n        correlationId: string\n    ): void {\n        this.logger.trace(\"PerformanceClient: Updating static fields\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            this.eventsByCorrelationId.set(correlationId, {\n                ...event,\n                ...fields,\n            });\n        } else {\n            this.logger.trace(\n                \"PerformanceClient: Event not found for\",\n                correlationId\n            );\n        }\n    }\n\n    /**\n     * Increment counters to be emitted when the measurements are flushed\n     * @param fields {string[]}\n     * @param correlationId {string} correlation identifier\n     */\n    incrementFields(\n        fields: { [key: string]: number | undefined },\n        correlationId: string\n    ): void {\n        this.logger.trace(\"PerformanceClient: Updating counters\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            for (const counter in fields) {\n                if (!event.hasOwnProperty(counter)) {\n                    event[counter] = 0;\n                } else if (isNaN(Number(event[counter]))) {\n                    return;\n                }\n                event[counter] += fields[counter];\n            }\n        } else {\n            this.logger.trace(\n                \"PerformanceClient: Event not found for\",\n                correlationId\n            );\n        }\n    }\n\n    /**\n     * Upserts event into event cache.\n     * First key is the correlation id, second key is the event id.\n     * Allows for events to be grouped by correlation id,\n     * and to easily allow for properties on them to be updated.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     */\n    protected cacheEventByCorrelationId(event: PerformanceEvent): void {\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n        if (rootEvent) {\n            this.logger.trace(\n                `PerformanceClient: Performance measurement for ${event.name} added/updated`,\n                event.correlationId\n            );\n            rootEvent.incompleteSubMeasurements =\n                rootEvent.incompleteSubMeasurements || new Map();\n            rootEvent.incompleteSubMeasurements.set(event.eventId, {\n                name: event.name,\n                startTimeMs: event.startTimeMs,\n            });\n        } else {\n            this.logger.trace(\n                `PerformanceClient: Performance measurement for ${event.name} started`,\n                event.correlationId\n            );\n            this.eventsByCorrelationId.set(event.correlationId, { ...event });\n            this.eventStack.set(event.correlationId, []);\n        }\n    }\n\n    private getQueueInfo(correlationId: string): {\n        totalQueueTime: number;\n        totalQueueCount: number;\n        manuallyCompletedCount: number;\n    } {\n        const queueMeasurementForCorrelationId =\n            this.queueMeasurements.get(correlationId);\n        if (!queueMeasurementForCorrelationId) {\n            this.logger.trace(\n                `PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`\n            );\n        }\n\n        let totalQueueTime = 0;\n        let totalQueueCount = 0;\n        let manuallyCompletedCount = 0;\n        queueMeasurementForCorrelationId?.forEach((measurement) => {\n            totalQueueTime += measurement.queueTime;\n            totalQueueCount++;\n            manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n        });\n\n        return {\n            totalQueueTime,\n            totalQueueCount,\n            manuallyCompletedCount,\n        };\n    }\n\n    /**\n     * Removes measurements and aux data for a given correlation id.\n     *\n     * @param {string} correlationId\n     */\n    discardMeasurements(correlationId: string): void {\n        this.logger.trace(\n            \"PerformanceClient: Performance measurements discarded\",\n            correlationId\n        );\n        this.eventsByCorrelationId.delete(correlationId);\n\n        this.logger.trace(\n            \"PerformanceClient: QueueMeasurements discarded\",\n            correlationId\n        );\n        this.queueMeasurements.delete(correlationId);\n\n        this.logger.trace(\n            \"PerformanceClient: Pre-queue times discarded\",\n            correlationId\n        );\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n\n        this.logger.trace(\n            \"PerformanceClient: Event stack discarded\",\n            correlationId\n        );\n        this.eventStack.delete(correlationId);\n    }\n\n    /**\n     * Registers a callback function to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        for (const [id, cb] of this.callbacks) {\n            if (cb.toString() === callback.toString()) {\n                this.logger.warning(\n                    `PerformanceClient: Performance callback is already registered with id: ${id}`\n                );\n                return id;\n            }\n        }\n\n        const callbackId = this.generateId();\n        this.callbacks.set(callbackId, callback);\n        this.logger.verbose(\n            `PerformanceClient: Performance callback registered with id: ${callbackId}`\n        );\n\n        return callbackId;\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        const result = this.callbacks.delete(callbackId);\n\n        if (result) {\n            this.logger.verbose(\n                `PerformanceClient: Performance callback ${callbackId} removed.`\n            );\n        } else {\n            this.logger.verbose(\n                `PerformanceClient: Performance callback ${callbackId} not removed.`\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     * Emits events to all registered callbacks.\n     *\n     * @param {PerformanceEvent[]} events\n     * @param {?string} [correlationId]\n     */\n    emitEvents(events: PerformanceEvent[], correlationId: string): void {\n        this.logger.verbose(\n            \"PerformanceClient: Emitting performance events\",\n            correlationId\n        );\n\n        this.callbacks.forEach(\n            (callback: PerformanceCallbackFunction, callbackId: string) => {\n                this.logger.trace(\n                    `PerformanceClient: Emitting event to callback ${callbackId}`,\n                    correlationId\n                );\n                callback.apply(null, [events]);\n            }\n        );\n    }\n\n    /**\n     * Enforce truncation of integral fields in performance event.\n     * @param {PerformanceEvent} event performance event to update.\n     */\n    private truncateIntegralFields(event: PerformanceEvent): void {\n        this.intFields.forEach((key) => {\n            if (key in event && typeof event[key] === \"number\") {\n                event[key] = Math.floor(event[key]);\n            }\n        });\n    }\n\n    /**\n     * Returns event duration in milliseconds\n     * @param startTimeMs {number}\n     * @returns {number}\n     */\n    private getDurationMs(startTimeMs: number): number {\n        const durationMs = Date.now() - startTimeMs;\n        // Handle clock skew\n        return durationMs < 0 ? durationMs : 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}