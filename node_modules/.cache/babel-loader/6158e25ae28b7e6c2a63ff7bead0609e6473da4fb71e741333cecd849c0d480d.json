{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\MapPage.js\",\n  _s = $RefreshSig$();\n/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * The data is then displayed on the map using the MapComponent.\r\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\nimport MapComponent from './MapComponent';\nimport DateSelector from './DateSelector';\nimport axios from 'axios';\n\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage() {\n  _s();\n  const [date, setDate] = useState(''); // Selected date\n  const [temperatureData, setTemperatureData] = useState([]); // Temperature data for the map\n\n  const navigate = useNavigate(); // Initialize navigate hook\n\n  /**\r\n       * fetchTemperatureData\r\n       * \r\n       * Fetches temperature data from the backend for the selected date.\r\n       * \r\n       * @async\r\n       * @function\r\n       */\n  const fetchTemperatureData = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3001/api/temperature-data`, {\n        params: {\n          date\n        }\n      });\n      setTemperatureData(response.data);\n    } catch (error) {\n      console.error(\"Failed to fetch temperature data:\", error);\n    }\n  };\n\n  /**\r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\n  const handleLogout = () => {\n    setAuthenticated(false); // Update authentication state to log out\n    localStorage.removeItem('authenticated'); // Remove from local storage\n    navigate('/'); // Redirect to the login/register page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Temperatures in West Virginia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateSelector, {\n      fetchTemperatureData: fetchTemperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n      temperatures: temperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      style: {\n        marginTop: '20px'\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(MapPage, \"ygfR0rrge+wfQWhFt4MatVkXsvw=\", false, function () {\n  return [useNavigate];\n});\n_c = MapPage;\n;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","MapComponent","DateSelector","axios","jsxDEV","_jsxDEV","MapPage","_s","date","setDate","temperatureData","setTemperatureData","navigate","fetchTemperatureData","response","get","params","data","error","console","handleLogout","setAuthenticated","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","temperatures","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/MapPage.js"],"sourcesContent":["/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * The data is then displayed on the map using the MapComponent.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\r\nimport MapComponent from './MapComponent';\r\nimport DateSelector from './DateSelector';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\r\nfunction MapPage() {\r\n  const [date, setDate] = useState('');  // Selected date\r\n  const [temperatureData, setTemperatureData] = useState([]);  // Temperature data for the map\r\n\r\n  const navigate = useNavigate(); // Initialize navigate hook\r\n \r\n/**\r\n     * fetchTemperatureData\r\n     * \r\n     * Fetches temperature data from the backend for the selected date.\r\n     * \r\n     * @async\r\n     * @function\r\n     */\r\nconst fetchTemperatureData = async () => {\r\n  try {\r\n      const response = await axios.get(`http://localhost:3001/api/temperature-data`, {\r\n          params: { date }\r\n      });\r\n      setTemperatureData(response.data);\r\n  } catch (error) {\r\n      console.error(\"Failed to fetch temperature data:\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Logs out the user by clearing authentication state and local storage,\r\n * then navigating to the login page.\r\n */\r\nconst handleLogout = () => {\r\n  setAuthenticated(false); // Update authentication state to log out\r\n  localStorage.removeItem('authenticated'); // Remove from local storage\r\n  navigate('/'); // Redirect to the login/register page\r\n};\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Temperatures in West Virginia</h1>\r\n      {/* DateSelector component allows user to select a date and fetch data */}\r\n      <DateSelector fetchTemperatureData={fetchTemperatureData} />\r\n      {/* MapComponent displays the temperature data as markers on the map */}\r\n      <MapComponent temperatures={temperatureData} />\r\n      {/* Logout button triggers the handleLogout function */}\r\n      <button onClick={handleLogout} style={{ marginTop: '20px' }}>Logout</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACvC,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAE7D,MAAMc,QAAQ,GAAGZ,WAAW,CAAC,CAAC,CAAC,CAAC;;EAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,MAAMa,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,4CAA4C,EAAE;QAC3EC,MAAM,EAAE;UAAER;QAAK;MACnB,CAAC,CAAC;MACFG,kBAAkB,CAACG,QAAQ,CAACG,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;;EAED;AACA;AACA;AACA;EACA,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;IACzBC,YAAY,CAACC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;IAC1CX,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACjB,CAAC;EAGC,oBACEP,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEtCvB,OAAA,CAACH,YAAY;MAACW,oBAAoB,EAAEA;IAAqB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE5DvB,OAAA,CAACJ,YAAY;MAAC4B,YAAY,EAAEnB;IAAgB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE/CvB,OAAA;MAAQyB,OAAO,EAAEV,YAAa;MAACW,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAR,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzE,CAAC;AAEV;AAACrB,EAAA,CA/CQD,OAAO;EAAA,QAIGN,WAAW;AAAA;AAAAiC,EAAA,GAJrB3B,OAAO;AA+Cf;AAED,eAAeA,OAAO;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}