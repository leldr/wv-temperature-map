{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst {\n  exec\n} = require('child_process');\n\n/**\r\n * GET /api/temperature-data\r\n * \r\n * Retrieves temperature data for a specified date by executing the Python script.\r\n * \r\n * @param {string} req.query.date - The date (YYYY-MM-DD) for data retrieval.\r\n * @returns {JSON} JSON response containing temperature data (latitude, longitude, tavg).\r\n */\nrouter.get('/temperature-data', (req, res) => {\n  const date = req.query.date;\n\n  // Validate date parameter format (YYYY-MM-DD)\n  const isValidDate = /^\\d{4}-\\d{2}-\\d{2}$/.test(date);\n  if (!date || !isValidDate) {\n    return res.status(400).json({\n      error: 'Invalid date format. Expected format: YYYY-MM-DD'\n    });\n  }\n\n  // Execute the Python script with the specified date\n  exec(`python3 get_temperature_data.py ${date}`, {\n    maxBuffer: 500 * 1024 * 1024\n  }, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`Execution error: ${error.message}`);\n      return res.status(500).json({\n        error: 'Failed to execute temperature data retrieval script',\n        details: error.message\n      });\n    }\n    if (stderr) {\n      console.warn(`Script warning output: ${stderr}`); // Log any warnings to console but don’t treat as fatal\n    }\n    try {\n      // Parse JSON output from the Python script\n      const data = JSON.parse(stdout);\n      res.json(data);\n    } catch (parseError) {\n      console.error(`JSON parsing error: ${parseError}`);\n      // console.error(`Raw script output: ${stdout}`);  // Log raw output for debugging\n      res.status(500).json({\n        error: 'Failed to parse temperature data',\n        details: parseError.message\n      });\n    }\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","exec","get","req","res","date","query","isValidDate","test","status","json","error","maxBuffer","stdout","stderr","console","message","details","warn","data","JSON","parse","parseError","module","exports"],"sources":["C:/Users/phlos/wv-temperature-map/src/backend/routes/stac.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst { exec } = require('child_process');\r\n\r\n/**\r\n * GET /api/temperature-data\r\n * \r\n * Retrieves temperature data for a specified date by executing the Python script.\r\n * \r\n * @param {string} req.query.date - The date (YYYY-MM-DD) for data retrieval.\r\n * @returns {JSON} JSON response containing temperature data (latitude, longitude, tavg).\r\n */\r\nrouter.get('/temperature-data', (req, res) => {\r\n    const date = req.query.date;\r\n\r\n    // Validate date parameter format (YYYY-MM-DD)\r\n    const isValidDate = /^\\d{4}-\\d{2}-\\d{2}$/.test(date);\r\n    if (!date || !isValidDate) {\r\n        return res.status(400).json({ error: 'Invalid date format. Expected format: YYYY-MM-DD' });\r\n    }\r\n\r\n    // Execute the Python script with the specified date\r\n    exec(`python3 get_temperature_data.py ${date}`, { maxBuffer: 500 * 1024 * 1024 }, (error, stdout, stderr) => {\r\n        if (error) {\r\n            console.error(`Execution error: ${error.message}`);\r\n            return res.status(500).json({\r\n                error: 'Failed to execute temperature data retrieval script',\r\n                details: error.message\r\n            });\r\n        }\r\n\r\n        if (stderr) {\r\n            console.warn(`Script warning output: ${stderr}`);  // Log any warnings to console but don’t treat as fatal\r\n        }\r\n\r\n        try {\r\n            // Parse JSON output from the Python script\r\n            const data = JSON.parse(stdout);\r\n            res.json(data);\r\n        } catch (parseError) {\r\n            console.error(`JSON parsing error: ${parseError}`);\r\n            // console.error(`Raw script output: ${stdout}`);  // Log raw output for debugging\r\n            res.status(500).json({\r\n                error: 'Failed to parse temperature data',\r\n                details: parseError.message\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC;AAAK,CAAC,GAAGH,OAAO,CAAC,eAAe,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACG,GAAG,CAAC,mBAAmB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC1C,MAAMC,IAAI,GAAGF,GAAG,CAACG,KAAK,CAACD,IAAI;;EAE3B;EACA,MAAME,WAAW,GAAG,qBAAqB,CAACC,IAAI,CAACH,IAAI,CAAC;EACpD,IAAI,CAACA,IAAI,IAAI,CAACE,WAAW,EAAE;IACvB,OAAOH,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAmD,CAAC,CAAC;EAC9F;;EAEA;EACAV,IAAI,CAAC,mCAAmCI,IAAI,EAAE,EAAE;IAAEO,SAAS,EAAE,GAAG,GAAG,IAAI,GAAG;EAAK,CAAC,EAAE,CAACD,KAAK,EAAEE,MAAM,EAAEC,MAAM,KAAK;IACzG,IAAIH,KAAK,EAAE;MACPI,OAAO,CAACJ,KAAK,CAAC,oBAAoBA,KAAK,CAACK,OAAO,EAAE,CAAC;MAClD,OAAOZ,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACxBC,KAAK,EAAE,qDAAqD;QAC5DM,OAAO,EAAEN,KAAK,CAACK;MACnB,CAAC,CAAC;IACN;IAEA,IAAIF,MAAM,EAAE;MACRC,OAAO,CAACG,IAAI,CAAC,0BAA0BJ,MAAM,EAAE,CAAC,CAAC,CAAE;IACvD;IAEA,IAAI;MACA;MACA,MAAMK,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACR,MAAM,CAAC;MAC/BT,GAAG,CAACM,IAAI,CAACS,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOG,UAAU,EAAE;MACjBP,OAAO,CAACJ,KAAK,CAAC,uBAAuBW,UAAU,EAAE,CAAC;MAClD;MACAlB,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACjBC,KAAK,EAAE,kCAAkC;QACzCM,OAAO,EAAEK,UAAU,CAACN;MACxB,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAEFO,MAAM,CAACC,OAAO,GAAGzB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}