{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../errors\";\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { DefaultAuthorityHost, DefaultTenantId } from \"../constants\";\nimport { randomUUID as coreRandomUUID, isNode, isNodeLike } from \"@azure/core-util\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { msalCommon } from \"./msal\";\n/**\n * @internal\n */\nconst logger = credentialLogger(\"IdentityUtils\");\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nconst LatestAuthenticationRecordVersion = \"1.0\";\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nexport function ensureValidMsalToken(scopes, msalToken, getTokenOptions) {\n  const error = message => {\n    logger.getToken.info(message);\n    return new AuthenticationRequiredError({\n      scopes: Array.isArray(scopes) ? scopes : [scopes],\n      getTokenOptions,\n      message\n    });\n  };\n  if (!msalToken) {\n    throw error(\"No response\");\n  }\n  if (!msalToken.expiresOn) {\n    throw error(`Response had no \"expiresOn\" property.`);\n  }\n  if (!msalToken.accessToken) {\n    throw error(`Response had no \"accessToken\" property.`);\n  }\n}\n/**\n * Returns the authority host from either the options bag or the AZURE_AUTHORITY_HOST environment variable.\n *\n * Defaults to {@link DefaultAuthorityHost}.\n * @internal\n */\nexport function getAuthorityHost(options) {\n  let authorityHost = options === null || options === void 0 ? void 0 : options.authorityHost;\n  if (!authorityHost && isNodeLike) {\n    authorityHost = process.env.AZURE_AUTHORITY_HOST;\n  }\n  return authorityHost !== null && authorityHost !== void 0 ? authorityHost : DefaultAuthorityHost;\n}\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nexport function getAuthority(tenantId, host) {\n  if (!host) {\n    host = DefaultAuthorityHost;\n  }\n  if (new RegExp(`${tenantId}/?$`).test(host)) {\n    return host;\n  }\n  if (host.endsWith(\"/\")) {\n    return host + tenantId;\n  } else {\n    return `${host}/${tenantId}`;\n  }\n}\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nexport function getKnownAuthorities(tenantId, authorityHost, disableInstanceDiscovery) {\n  if (tenantId === \"adfs\" && authorityHost || disableInstanceDiscovery) {\n    return [authorityHost];\n  }\n  return [];\n}\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param credLogger - The logger of the credential.\n * @internal\n */\nexport const defaultLoggerCallback = (credLogger, platform = isNode ? \"Node\" : \"Browser\") => (level, message, containsPii) => {\n  if (containsPii) {\n    return;\n  }\n  switch (level) {\n    case msalCommon.LogLevel.Error:\n      credLogger.info(`MSAL ${platform} V2 error: ${message}`);\n      return;\n    case msalCommon.LogLevel.Info:\n      credLogger.info(`MSAL ${platform} V2 info message: ${message}`);\n      return;\n    case msalCommon.LogLevel.Verbose:\n      credLogger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n      return;\n    case msalCommon.LogLevel.Warning:\n      credLogger.info(`MSAL ${platform} V2 warning: ${message}`);\n      return;\n  }\n};\n/**\n * @internal\n */\nexport function getMSALLogLevel(logLevel) {\n  switch (logLevel) {\n    case \"error\":\n      return msalCommon.LogLevel.Error;\n    case \"info\":\n      return msalCommon.LogLevel.Info;\n    case \"verbose\":\n      return msalCommon.LogLevel.Verbose;\n    case \"warning\":\n      return msalCommon.LogLevel.Warning;\n    default:\n      // default msal logging level should be Info\n      return msalCommon.LogLevel.Info;\n  }\n}\n/**\n * Wraps core-util's randomUUID in order to allow for mocking in tests.\n * This prepares the library for the upcoming core-util update to ESM.\n *\n * @internal\n * @returns A string containing a random UUID\n */\nexport function randomUUID() {\n  return coreRandomUUID();\n}\n/**\n * Handles MSAL errors.\n */\nexport function handleMsalError(scopes, error, getTokenOptions) {\n  if (error.name === \"AuthError\" || error.name === \"ClientAuthError\" || error.name === \"BrowserAuthError\") {\n    const msalError = error;\n    switch (msalError.errorCode) {\n      case \"endpoints_resolution_error\":\n        logger.info(formatError(scopes, error.message));\n        return new CredentialUnavailableError(error.message);\n      case \"device_code_polling_cancelled\":\n        return new AbortError(\"The authentication has been aborted by the caller.\");\n      case \"consent_required\":\n      case \"interaction_required\":\n      case \"login_required\":\n        logger.info(formatError(scopes, `Authentication returned errorCode ${msalError.errorCode}`));\n        break;\n      default:\n        logger.info(formatError(scopes, `Failed to acquire token: ${error.message}`));\n        break;\n    }\n  }\n  if (error.name === \"ClientConfigurationError\" || error.name === \"BrowserConfigurationAuthError\" || error.name === \"AbortError\" || error.name === \"AuthenticationError\") {\n    return error;\n  }\n  if (error.name === \"NativeAuthError\") {\n    logger.info(formatError(scopes, `Error from the native broker: ${error.message} with status code: ${error.statusCode}`));\n    return error;\n  }\n  return new AuthenticationRequiredError({\n    scopes,\n    getTokenOptions,\n    message: error.message\n  });\n}\n// transformations.ts\nexport function publicToMsal(account) {\n  const [environment] = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [\"\"];\n  return Object.assign(Object.assign({}, account), {\n    localAccountId: account.homeAccountId,\n    environment\n  });\n}\nexport function msalToPublic(clientId, account) {\n  const record = {\n    authority: getAuthority(account.tenantId, account.environment),\n    homeAccountId: account.homeAccountId,\n    tenantId: account.tenantId || DefaultTenantId,\n    username: account.username,\n    clientId,\n    version: LatestAuthenticationRecordVersion\n  };\n  return record;\n}\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nexport function serializeAuthenticationRecord(record) {\n  return JSON.stringify(record);\n}\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nexport function deserializeAuthenticationRecord(serializedRecord) {\n  const parsed = JSON.parse(serializedRecord);\n  if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n    throw Error(\"Unsupported AuthenticationRecord version\");\n  }\n  return parsed;\n}","map":{"version":3,"names":["AuthenticationRequiredError","CredentialUnavailableError","credentialLogger","formatError","DefaultAuthorityHost","DefaultTenantId","randomUUID","coreRandomUUID","isNode","isNodeLike","AbortError","msalCommon","logger","LatestAuthenticationRecordVersion","ensureValidMsalToken","scopes","msalToken","getTokenOptions","error","message","getToken","info","Array","isArray","expiresOn","accessToken","getAuthorityHost","options","authorityHost","process","env","AZURE_AUTHORITY_HOST","getAuthority","tenantId","host","RegExp","test","endsWith","getKnownAuthorities","disableInstanceDiscovery","defaultLoggerCallback","credLogger","platform","level","containsPii","LogLevel","Error","Info","Verbose","Warning","getMSALLogLevel","logLevel","handleMsalError","name","msalError","errorCode","statusCode","publicToMsal","account","environment","authority","match","Object","assign","localAccountId","homeAccountId","msalToPublic","clientId","record","username","version","serializeAuthenticationRecord","JSON","stringify","deserializeAuthenticationRecord","serializedRecord","parsed","parse"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\msal\\utils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AuthenticationRecord, MsalAccountInfo, MsalToken, ValidMsalToken } from \"./types\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../errors\";\nimport { CredentialLogger, credentialLogger, formatError } from \"../util/logging\";\nimport { DefaultAuthorityHost, DefaultTenantId } from \"../constants\";\nimport { randomUUID as coreRandomUUID, isNode, isNodeLike } from \"@azure/core-util\";\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport { AzureLogLevel } from \"@azure/logger\";\nimport { GetTokenOptions } from \"@azure/core-auth\";\nimport { msalCommon } from \"./msal\";\n\nexport interface ILoggerCallback {\n  (level: msalCommon.LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * @internal\n */\nconst logger = credentialLogger(\"IdentityUtils\");\n\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nconst LatestAuthenticationRecordVersion = \"1.0\";\n\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nexport function ensureValidMsalToken(\n  scopes: string | string[],\n  msalToken?: MsalToken | null,\n  getTokenOptions?: GetTokenOptions,\n): asserts msalToken is ValidMsalToken {\n  const error = (message: string): Error => {\n    logger.getToken.info(message);\n    return new AuthenticationRequiredError({\n      scopes: Array.isArray(scopes) ? scopes : [scopes],\n      getTokenOptions,\n      message,\n    });\n  };\n  if (!msalToken) {\n    throw error(\"No response\");\n  }\n  if (!msalToken.expiresOn) {\n    throw error(`Response had no \"expiresOn\" property.`);\n  }\n  if (!msalToken.accessToken) {\n    throw error(`Response had no \"accessToken\" property.`);\n  }\n}\n\n/**\n * Returns the authority host from either the options bag or the AZURE_AUTHORITY_HOST environment variable.\n *\n * Defaults to {@link DefaultAuthorityHost}.\n * @internal\n */\nexport function getAuthorityHost(options?: { authorityHost?: string }): string {\n  let authorityHost = options?.authorityHost;\n\n  if (!authorityHost && isNodeLike) {\n    authorityHost = process.env.AZURE_AUTHORITY_HOST;\n  }\n\n  return authorityHost ?? DefaultAuthorityHost;\n}\n\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nexport function getAuthority(tenantId: string, host?: string): string {\n  if (!host) {\n    host = DefaultAuthorityHost;\n  }\n  if (new RegExp(`${tenantId}/?$`).test(host)) {\n    return host;\n  }\n  if (host.endsWith(\"/\")) {\n    return host + tenantId;\n  } else {\n    return `${host}/${tenantId}`;\n  }\n}\n\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nexport function getKnownAuthorities(\n  tenantId: string,\n  authorityHost: string,\n  disableInstanceDiscovery?: boolean,\n): string[] {\n  if ((tenantId === \"adfs\" && authorityHost) || disableInstanceDiscovery) {\n    return [authorityHost];\n  }\n  return [];\n}\n\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param credLogger - The logger of the credential.\n * @internal\n */\nexport const defaultLoggerCallback: (\n  logger: CredentialLogger,\n  platform?: \"Node\" | \"Browser\",\n) => ILoggerCallback =\n  (credLogger: CredentialLogger, platform: \"Node\" | \"Browser\" = isNode ? \"Node\" : \"Browser\") =>\n  (level, message, containsPii): void => {\n    if (containsPii) {\n      return;\n    }\n    switch (level) {\n      case msalCommon.LogLevel.Error:\n        credLogger.info(`MSAL ${platform} V2 error: ${message}`);\n        return;\n      case msalCommon.LogLevel.Info:\n        credLogger.info(`MSAL ${platform} V2 info message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Verbose:\n        credLogger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Warning:\n        credLogger.info(`MSAL ${platform} V2 warning: ${message}`);\n        return;\n    }\n  };\n\n/**\n * @internal\n */\nexport function getMSALLogLevel(logLevel: AzureLogLevel | undefined): msalCommon.LogLevel {\n  switch (logLevel) {\n    case \"error\":\n      return msalCommon.LogLevel.Error;\n    case \"info\":\n      return msalCommon.LogLevel.Info;\n    case \"verbose\":\n      return msalCommon.LogLevel.Verbose;\n    case \"warning\":\n      return msalCommon.LogLevel.Warning;\n    default:\n      // default msal logging level should be Info\n      return msalCommon.LogLevel.Info;\n  }\n}\n\n/**\n * Wraps core-util's randomUUID in order to allow for mocking in tests.\n * This prepares the library for the upcoming core-util update to ESM.\n *\n * @internal\n * @returns A string containing a random UUID\n */\nexport function randomUUID(): string {\n  return coreRandomUUID();\n}\n\n/**\n * Handles MSAL errors.\n */\nexport function handleMsalError(\n  scopes: string[],\n  error: Error,\n  getTokenOptions?: GetTokenOptions,\n): Error {\n  if (\n    error.name === \"AuthError\" ||\n    error.name === \"ClientAuthError\" ||\n    error.name === \"BrowserAuthError\"\n  ) {\n    const msalError = error as msalCommon.AuthError;\n    switch (msalError.errorCode) {\n      case \"endpoints_resolution_error\":\n        logger.info(formatError(scopes, error.message));\n        return new CredentialUnavailableError(error.message);\n      case \"device_code_polling_cancelled\":\n        return new AbortError(\"The authentication has been aborted by the caller.\");\n      case \"consent_required\":\n      case \"interaction_required\":\n      case \"login_required\":\n        logger.info(\n          formatError(scopes, `Authentication returned errorCode ${msalError.errorCode}`),\n        );\n        break;\n      default:\n        logger.info(formatError(scopes, `Failed to acquire token: ${error.message}`));\n        break;\n    }\n  }\n  if (\n    error.name === \"ClientConfigurationError\" ||\n    error.name === \"BrowserConfigurationAuthError\" ||\n    error.name === \"AbortError\" ||\n    error.name === \"AuthenticationError\"\n  ) {\n    return error;\n  }\n  if (error.name === \"NativeAuthError\") {\n    logger.info(\n      formatError(\n        scopes,\n        `Error from the native broker: ${error.message} with status code: ${\n          (error as any).statusCode\n        }`,\n      ),\n    );\n    return error;\n  }\n  return new AuthenticationRequiredError({ scopes, getTokenOptions, message: error.message });\n}\n\n// transformations.ts\n\nexport function publicToMsal(account: AuthenticationRecord): msalCommon.AccountInfo {\n  const [environment] = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [\"\"];\n  return {\n    ...account,\n    localAccountId: account.homeAccountId,\n    environment,\n  };\n}\n\nexport function msalToPublic(clientId: string, account: MsalAccountInfo): AuthenticationRecord {\n  const record = {\n    authority: getAuthority(account.tenantId, account.environment),\n    homeAccountId: account.homeAccountId,\n    tenantId: account.tenantId || DefaultTenantId,\n    username: account.username,\n    clientId,\n    version: LatestAuthenticationRecordVersion,\n  };\n  return record;\n}\n\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nexport function serializeAuthenticationRecord(record: AuthenticationRecord): string {\n  return JSON.stringify(record);\n}\n\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nexport function deserializeAuthenticationRecord(serializedRecord: string): AuthenticationRecord {\n  const parsed: AuthenticationRecord & { version?: string } = JSON.parse(serializedRecord);\n\n  if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n    throw Error(\"Unsupported AuthenticationRecord version\");\n  }\n\n  return parsed;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}