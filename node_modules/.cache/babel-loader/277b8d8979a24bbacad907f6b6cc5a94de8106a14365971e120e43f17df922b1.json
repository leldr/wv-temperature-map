{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\DateSelector.js\",\n  _s = $RefreshSig$();\n/**\r\n * DateSelector.js\r\n * \r\n * Component for selecting the date, limited to the first day of each month.\r\n * Triggers data retrieval when \"Enter\" is pressed.\r\n */\n\nimport React, { useState } from 'react';\n\n/**\r\n * DateSelector Component\r\n * \r\n * Allows users to select a date, limited to the first day of each month,\r\n * and fetch temperature data on \"Enter\" key press.\r\n * \r\n * @component\r\n * @param {function} fetchTemperatureData - Function to fetch data for the selected date.\r\n * @returns {JSX.Element} Date selector with restricted selection and enter key support.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DateSelector({\n  fetchTemperatureData\n}) {\n  _s();\n  // Initialize with the first of the current month\n  const defaultDate = new Date().toISOString().substring(0, 7) + '-01';\n  const [selectedDate, setSelectedDate] = useState(defaultDate);\n\n  /**\r\n   * handleDateChange\r\n   * \r\n   * Updates the selected date, ensuring it is valid and restricted to the first day of each month.\r\n   * \r\n   * @param {object} event - The date change event.\r\n   */\n  const handleDateChange = event => {\n    const date = new Date(event.target.value);\n    if (!isNaN(date.getTime())) {\n      // Validate date\n      date.setDate(1); // Set to first day of the month\n      setSelectedDate(date.toISOString().substring(0, 10));\n    } else {\n      setSelectedDate(defaultDate); // Reset to default if invalid\n    }\n  };\n\n  /**\r\n   * handleKeyPress\r\n   * \r\n   * Detects \"Enter\" key press to initiate data retrieval.\r\n   * \r\n   * @param {object} event - The key press event.\r\n   */\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      fetchTemperatureData(selectedDate);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Date (First of Each Month Only): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: selectedDate,\n      onChange: handleDateChange,\n      onKeyPress: handleKeyPress,\n      max: defaultDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(DateSelector, \"mQ5jsEuCX/ma1vzcM1ReUOTr4TQ=\");\n_c = DateSelector;\nexport default DateSelector;\nvar _c;\n$RefreshReg$(_c, \"DateSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DateSelector","fetchTemperatureData","_s","defaultDate","Date","toISOString","substring","selectedDate","setSelectedDate","handleDateChange","event","date","target","value","isNaN","getTime","setDate","handleKeyPress","key","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyPress","max","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/DateSelector.js"],"sourcesContent":["/**\r\n * DateSelector.js\r\n * \r\n * Component for selecting the date, limited to the first day of each month.\r\n * Triggers data retrieval when \"Enter\" is pressed.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * DateSelector Component\r\n * \r\n * Allows users to select a date, limited to the first day of each month,\r\n * and fetch temperature data on \"Enter\" key press.\r\n * \r\n * @component\r\n * @param {function} fetchTemperatureData - Function to fetch data for the selected date.\r\n * @returns {JSX.Element} Date selector with restricted selection and enter key support.\r\n */\r\nfunction DateSelector({ fetchTemperatureData }) {\r\n    // Initialize with the first of the current month\r\n    const defaultDate = new Date().toISOString().substring(0, 7) + '-01';\r\n    const [selectedDate, setSelectedDate] = useState(defaultDate);\r\n\r\n    /**\r\n     * handleDateChange\r\n     * \r\n     * Updates the selected date, ensuring it is valid and restricted to the first day of each month.\r\n     * \r\n     * @param {object} event - The date change event.\r\n     */\r\n    const handleDateChange = (event) => {\r\n        const date = new Date(event.target.value);\r\n        if (!isNaN(date.getTime())) { // Validate date\r\n            date.setDate(1); // Set to first day of the month\r\n            setSelectedDate(date.toISOString().substring(0, 10));\r\n        } else {\r\n            setSelectedDate(defaultDate); // Reset to default if invalid\r\n        }\r\n    };\r\n\r\n    /**\r\n     * handleKeyPress\r\n     * \r\n     * Detects \"Enter\" key press to initiate data retrieval.\r\n     * \r\n     * @param {object} event - The key press event.\r\n     */\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            fetchTemperatureData(selectedDate);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>Select Date (First of Each Month Only): </label>\r\n            <input\r\n                type=\"date\"\r\n                value={selectedDate}\r\n                onChange={handleDateChange}\r\n                onKeyPress={handleKeyPress}\r\n                max={defaultDate}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateSelector;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,SAAAC,MAAA,IAAAC,OAAA;AAUA,SAASC,YAAYA,CAAC;EAAEC;AAAqB,CAAC,EAAE;EAAAC,EAAA;EAC5C;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;EACpE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAACM,WAAW,CAAC;;EAE7D;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMM,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAG,IAAIP,IAAI,CAACM,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IACzC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,EAAE;MAAE;MAC1BJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MACjBR,eAAe,CAACG,IAAI,CAACN,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC,MAAM;MACHE,eAAe,CAACL,WAAW,CAAC,CAAC,CAAC;IAClC;EACJ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMc,cAAc,GAAIP,KAAK,IAAK;IAC9B,IAAIA,KAAK,CAACQ,GAAG,KAAK,OAAO,EAAE;MACvBjB,oBAAoB,CAACM,YAAY,CAAC;IACtC;EACJ,CAAC;EAED,oBACIR,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,EAAO;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvDxB,OAAA;MACIyB,IAAI,EAAC,MAAM;MACXX,KAAK,EAAEN,YAAa;MACpBkB,QAAQ,EAAEhB,gBAAiB;MAC3BiB,UAAU,EAAET,cAAe;MAC3BU,GAAG,EAAExB;IAAY;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACrB,EAAA,CA/CQF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAiDrB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}