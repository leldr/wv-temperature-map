{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/**\n * App.js\n * \n * Main component that handles routing and authentication for the application.\n * If the user is not authenticated, they are redirected to the login page.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport MapPage from './MapPage';\nimport LoginPage from './LoginPage';\n\n/**\n * App component\n * \n * Manages authentication state and routing for the application.\n * @returns {JSX.Element} Rendered App component with conditional routing.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to store authentication status\n  const [authenticated, setAuthenticated] = useState(localStorage.getItem('authenticated') === 'true');\n\n  // Effect to update local storage whenever the authentication state changes\n  useEffect(() => {\n    localStorage.setItem('authenticated', authenticated);\n  }, [authenticated]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: authenticated ? /*#__PURE__*/_jsxDEV(MapPage, {\n          setAuthenticated: setAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {\n          setAuthenticated: setAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3DMsjzPSFXne1kh5qvWCbeWsCjY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Navigate","MapPage","LoginPage","jsxDEV","_jsxDEV","App","_s","authenticated","setAuthenticated","localStorage","getItem","setItem","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/App.js"],"sourcesContent":["/**\n * App.js\n * \n * Main component that handles routing and authentication for the application.\n * If the user is not authenticated, they are redirected to the login page.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport MapPage from './MapPage';\nimport LoginPage from './LoginPage';\n\n/**\n * App component\n * \n * Manages authentication state and routing for the application.\n * @returns {JSX.Element} Rendered App component with conditional routing.\n */\nfunction App() {\n  // State to store authentication status\n  const [authenticated, setAuthenticated] = useState(\n    localStorage.getItem('authenticated') === 'true'\n  );\n\n  // Effect to update local storage whenever the authentication state changes\n  useEffect(() => {\n    localStorage.setItem('authenticated', authenticated);\n  }, [authenticated]);\n\n  return (\n    <Router>\n      <Routes>\n        {/* If authenticated, route to the MapPage, otherwise redirect to LoginPage */}\n        <Route\n          path=\"/\"\n          element={\n            authenticated ? (\n              <MapPage setAuthenticated={setAuthenticated} />\n            ) : (\n              <Navigate to=\"/login\" replace />\n            )\n          }\n        />\n        <Route\n          path=\"/login\"\n          element={<LoginPage setAuthenticated={setAuthenticated} />}\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAChDe,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,KAAK,MAC5C,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACdc,YAAY,CAACE,OAAO,CAAC,eAAe,EAAEJ,aAAa,CAAC;EACtD,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,oBACEH,OAAA,CAACP,MAAM;IAAAe,QAAA,eACLR,OAAA,CAACL,MAAM;MAAAa,QAAA,gBAELR,OAAA,CAACN,KAAK;QACJe,IAAI,EAAC,GAAG;QACRC,OAAO,EACLP,aAAa,gBACXH,OAAA,CAACH,OAAO;UAACO,gBAAgB,EAAEA;QAAiB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAE/Cd,OAAA,CAACJ,QAAQ;UAACmB,EAAE,EAAC,QAAQ;UAACC,OAAO;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAElC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACFd,OAAA,CAACN,KAAK;QACJe,IAAI,EAAC,QAAQ;QACbC,OAAO,eAAEV,OAAA,CAACF,SAAS;UAACM,gBAAgB,EAAEA;QAAiB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAACZ,EAAA,CAhCQD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}