{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\n/**\r\n * MapComponent.js\r\n * \r\n * React component that renders a heatmap for temperature data using Leaflet.\r\n * Displays `tnormal` on the heatmap and `tavg` in hover tooltips.\r\n */\n\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet'; // Import the Leaflet library\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet's CSS\nimport 'leaflet.heat'; // Import Leaflet Heatmap plugin\n\n/**\r\n * MapComponent\r\n * \r\n * Renders a map with heatmap visualization for temperature data.\r\n * Each point includes a popup with details for latitude, longitude, and average temperature.\r\n * \r\n * @component\r\n * @param {Object[]} [temperatures=[]] - Array of objects with latitude, longitude, tavg, and tnormal values.\r\n * @returns {JSX.Element} A map with heatmap and optional markers for additional data.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent({\n  temperatures = []\n}) {\n  _s();\n  const mapRef = useRef(null); // Ref to store the Leaflet map instance\n  const heatLayerRef = useRef(null); // Ref to store the heat layer\n\n  useEffect(() => {\n    // Initialize the map only once\n    if (!mapRef.current) {\n      mapRef.current = L.map('heatmap').setView([48, -124], 7); // Center on NW US\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(mapRef.current);\n    }\n    if (temperatures.length === 0) return; // Skip rendering if no temperature data available\n\n    // Prepare heatmap data ([latitude, longitude, intensity])\n    const heatmapData = temperatures.filter(point => point.latitude && point.longitude && point.tnormal !== null).map(point => [point.latitude, point.longitude, point.tnormal]);\n\n    // Add or update the heatmap layer\n    if (heatLayerRef.current) {\n      heatLayerRef.current.setLatLngs(heatmapData);\n    } else {\n      heatLayerRef.current = L.heatLayer(heatmapData, {\n        radius: 40,\n        blur: 15,\n        maxZoom: 10,\n        gradient: {\n          0.0: '#800080',\n          // Purple\n          0.1: '#0000FF',\n          // Blue\n          0.2: '#00FFFF',\n          // Cyan\n          0.3: '#00FF00',\n          // Lime\n          0.4: '#008000',\n          // Green\n          0.5: '#FFFF00',\n          // Yellow\n          0.6: '#FFA500',\n          // Orange\n          0.7: '#FF0000',\n          // Red\n          0.8: '#8B0000',\n          // Dark Red\n          1.0: '#000000' // Black\n        }\n      }).addTo(mapRef.current);\n    }\n\n    // Add tooltips for `tavg`\n    temperatures.forEach(point => {\n      if (point.latitude && point.longitude && point.tavg !== null) {\n        const marker = L.circleMarker([point.latitude, point.longitude], {\n          radius: 5,\n          color: 'transparent'\n        });\n        marker.bindTooltip(`Avg Temp: ${point.tavg.toFixed(2)} °F`, {\n          permanent: false\n        });\n        marker.addTo(mapRef.current);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, [temperatures]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"heatmap\",\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: temperatures.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: \"Please select a date to fetch and display the heatmap.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n_s(MapComponent, \"fa7ApoVvVGkY7cakUYLfKeDao1c=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","L","jsxDEV","_jsxDEV","MapComponent","temperatures","_s","mapRef","heatLayerRef","current","map","setView","tileLayer","attribution","addTo","length","heatmapData","filter","point","latitude","longitude","tnormal","setLatLngs","heatLayer","radius","blur","maxZoom","gradient","forEach","tavg","marker","circleMarker","color","bindTooltip","toFixed","permanent","remove","id","style","height","width","children","textAlign","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/MapComponent.js"],"sourcesContent":["/**\r\n * MapComponent.js\r\n * \r\n * React component that renders a heatmap for temperature data using Leaflet.\r\n * Displays `tnormal` on the heatmap and `tavg` in hover tooltips.\r\n */\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet'; // Import the Leaflet library\r\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet's CSS\r\nimport 'leaflet.heat'; // Import Leaflet Heatmap plugin\r\n\r\n/**\r\n * MapComponent\r\n * \r\n * Renders a map with heatmap visualization for temperature data.\r\n * Each point includes a popup with details for latitude, longitude, and average temperature.\r\n * \r\n * @component\r\n * @param {Object[]} [temperatures=[]] - Array of objects with latitude, longitude, tavg, and tnormal values.\r\n * @returns {JSX.Element} A map with heatmap and optional markers for additional data.\r\n */\r\nfunction MapComponent({ temperatures = [] }) {\r\n    const mapRef = useRef(null); // Ref to store the Leaflet map instance\r\n    const heatLayerRef = useRef(null); // Ref to store the heat layer\r\n\r\n    useEffect(() => {\r\n        // Initialize the map only once\r\n        if (!mapRef.current) {\r\n            mapRef.current = L.map('heatmap').setView([48, -124], 7); // Center on NW US\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n            }).addTo(mapRef.current);\r\n        }\r\n\r\n        if (temperatures.length === 0) return; // Skip rendering if no temperature data available\r\n\r\n        // Prepare heatmap data ([latitude, longitude, intensity])\r\n        const heatmapData = temperatures\r\n            .filter((point) => point.latitude && point.longitude && point.tnormal !== null)\r\n            .map((point) => [\r\n                point.latitude,\r\n                point.longitude,\r\n                point.tnormal,\r\n            ]);\r\n\r\n        // Add or update the heatmap layer\r\n        if (heatLayerRef.current) {\r\n            heatLayerRef.current.setLatLngs(heatmapData);\r\n        } else {\r\n            heatLayerRef.current = L.heatLayer(heatmapData, {\r\n                radius: 40,\r\n                blur: 15,\r\n                maxZoom: 10,\r\n                gradient: {\r\n                    0.0: '#800080', // Purple\r\n                    0.1: '#0000FF', // Blue\r\n                    0.2: '#00FFFF', // Cyan\r\n                    0.3: '#00FF00', // Lime\r\n                    0.4: '#008000', // Green\r\n                    0.5: '#FFFF00', // Yellow\r\n                    0.6: '#FFA500', // Orange\r\n                    0.7: '#FF0000', // Red\r\n                    0.8: '#8B0000', // Dark Red\r\n                    1.0: '#000000', // Black\r\n                },\r\n            }).addTo(mapRef.current);\r\n        }\r\n\r\n        // Add tooltips for `tavg`\r\n        temperatures.forEach((point) => {\r\n            if (point.latitude && point.longitude && point.tavg !== null) {\r\n                const marker = L.circleMarker([point.latitude, point.longitude], {\r\n                    radius: 5,\r\n                    color: 'transparent',\r\n                });\r\n                marker.bindTooltip(\r\n                    `Avg Temp: ${point.tavg.toFixed(2)} °F`,\r\n                    { permanent: false }\r\n                );\r\n                marker.addTo(mapRef.current);\r\n            }\r\n        });\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (mapRef.current) {\r\n                mapRef.current.remove();\r\n                mapRef.current = null;\r\n            }\r\n        };\r\n    }, [temperatures]);\r\n\r\n    return (\r\n        <div id=\"heatmap\" style={{ height: '500px', width: '100%' }}>\r\n            {temperatures.length === 0 && (\r\n                <p style={{ textAlign: 'center', marginTop: '20px' }}>\r\n                    Please select a date to fetch and display the heatmap.\r\n                </p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}