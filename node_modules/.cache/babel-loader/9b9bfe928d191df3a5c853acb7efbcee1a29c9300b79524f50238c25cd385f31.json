{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = void 0;\nvar _events = require(\"events\");\nvar _streamParser = _interopRequireDefault(require(\"./stream-parser\"));\nvar _stream = require(\"stream\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass Parser extends _events.EventEmitter {\n  constructor(message, debug, handler, options) {\n    super();\n    this.debug = debug;\n    this.options = options;\n    this.parser = _stream.Readable.from(_streamParser.default.parseTokens(message, this.debug, this.options));\n    this.parser.on('data', token => {\n      debug.token(token);\n      handler[token.handlerName](token);\n    });\n    this.parser.on('drain', () => {\n      this.emit('drain');\n    });\n    this.parser.on('end', () => {\n      this.emit('end');\n    });\n  }\n  pause() {\n    return this.parser.pause();\n  }\n  resume() {\n    return this.parser.resume();\n  }\n}\nexports.Parser = Parser;","map":{"version":3,"names":["_events","require","_streamParser","_interopRequireDefault","_stream","obj","__esModule","default","Parser","EventEmitter","constructor","message","debug","handler","options","parser","Readable","from","parseTokens","on","token","handlerName","emit","pause","resume","exports"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\tedious\\src\\token\\token-stream-parser.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport StreamParser, { type ParserOptions } from './stream-parser';\nimport Debug from '../debug';\nimport { Token } from './token';\nimport { Readable } from 'stream';\nimport Message from '../message';\nimport { TokenHandler } from './handler';\n\nexport class Parser extends EventEmitter {\n  declare debug: Debug;\n  declare options: ParserOptions;\n  declare parser: Readable;\n\n  constructor(message: Message, debug: Debug, handler: TokenHandler, options: ParserOptions) {\n    super();\n\n    this.debug = debug;\n    this.options = options;\n\n    this.parser = Readable.from(StreamParser.parseTokens(message, this.debug, this.options));\n    this.parser.on('data', (token: Token) => {\n      debug.token(token);\n      handler[token.handlerName as keyof TokenHandler](token as any);\n    });\n\n    this.parser.on('drain', () => {\n      this.emit('drain');\n    });\n\n    this.parser.on('end', () => {\n      this.emit('end');\n    });\n  }\n\n  declare on: (\n    ((event: 'end', listener: () => void) => this) &\n    ((event: string | symbol, listener: (...args: any[]) => void) => this)\n  );\n\n  pause() {\n    return this.parser.pause();\n  }\n\n  resume() {\n    return this.parser.resume();\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;AAGA,IAAAG,OAAA,GAAAH,OAAA;AAAkC,SAAAE,uBAAAE,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAI3B,MAAMG,MAAM,SAASR,OAAA,CAAAS,YAAY,CAAC;EAKvCC,WAAWA,CAACC,OAAgB,EAAEC,KAAY,EAAEC,OAAqB,EAAEC,OAAsB,EAAE;IACzF,KAAK,CAAC,CAAC;IAEP,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,OAAO,GAAGA,OAAO;IAEtB,IAAI,CAACC,MAAM,GAAGX,OAAA,CAAAY,QAAQ,CAACC,IAAI,CAACf,aAAA,CAAAK,OAAY,CAACW,WAAW,CAACP,OAAO,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACE,OAAO,CAAC,CAAC;IACxF,IAAI,CAACC,MAAM,CAACI,EAAE,CAAC,MAAM,EAAGC,KAAY,IAAK;MACvCR,KAAK,CAACQ,KAAK,CAACA,KAAK,CAAC;MAClBP,OAAO,CAACO,KAAK,CAACC,WAAW,CAAuB,CAACD,KAAY,CAAC;IAChE,CAAC,CAAC;IAEF,IAAI,CAACL,MAAM,CAACI,EAAE,CAAC,OAAO,EAAE,MAAM;MAC5B,IAAI,CAACG,IAAI,CAAC,OAAO,CAAC;IACpB,CAAC,CAAC;IAEF,IAAI,CAACP,MAAM,CAACI,EAAE,CAAC,KAAK,EAAE,MAAM;MAC1B,IAAI,CAACG,IAAI,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC;EACJ;EAOAC,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAACR,MAAM,CAACQ,KAAK,CAAC,CAAC;EAC5B;EAEAC,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACT,MAAM,CAACS,MAAM,CAAC,CAAC;EAC7B;AACF;AAACC,OAAA,CAAAjB,MAAA,GAAAA,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}