{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n  const userAgentPromise = getUserAgentValue(options.userAgentPrefix);\n  const sanitizer = new Sanitizer({\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n  });\n  const tracingClient = tryCreateTracingClient();\n  return {\n    name: tracingPolicyName,\n    async sendRequest(request, next) {\n      var _a;\n      if (!tracingClient) {\n        return next(request);\n      }\n      const userAgent = await userAgentPromise;\n      const spanAttributes = {\n        \"http.url\": sanitizer.sanitizeUrl(request.url),\n        \"http.method\": request.method,\n        \"http.user_agent\": userAgent,\n        requestId: request.requestId\n      };\n      if (userAgent) {\n        spanAttributes[\"http.user_agent\"] = userAgent;\n      }\n      const {\n        span,\n        tracingContext\n      } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n      if (!span || !tracingContext) {\n        return next(request);\n      }\n      try {\n        const response = await tracingClient.withContext(tracingContext, next, request);\n        tryProcessResponse(span, response);\n        return response;\n      } catch (err) {\n        tryProcessError(span, err);\n        throw err;\n      }\n    }\n  };\n}\nfunction tryCreateTracingClient() {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION\n    });\n  } catch (e) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(`HTTP ${request.method}`, {\n      tracingOptions: request.tracingOptions\n    }, {\n      spanKind: \"client\",\n      spanAttributes\n    });\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n    // set headers\n    const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return {\n      span,\n      tracingContext: updatedOptions.tracingOptions.tracingContext\n    };\n  } catch (e) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryProcessError(span, error) {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\nfunction tryProcessResponse(span, response) {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    span.setStatus({\n      status: \"success\"\n    });\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}","map":{"version":3,"names":["createTracingClient","SDK_VERSION","getUserAgentValue","logger","getErrorMessage","isError","isRestError","Sanitizer","tracingPolicyName","tracingPolicy","options","userAgentPromise","userAgentPrefix","sanitizer","additionalAllowedQueryParameters","tracingClient","tryCreateTracingClient","name","sendRequest","request","next","userAgent","spanAttributes","sanitizeUrl","url","method","requestId","span","tracingContext","_a","tryCreateSpan","response","withContext","tryProcessResponse","err","tryProcessError","namespace","packageName","packageVersion","e","warning","undefined","updatedOptions","startSpan","tracingOptions","spanKind","isRecording","end","headers","createRequestHeaders","key","value","Object","entries","set","error","setStatus","status","statusCode","setAttribute","serviceRequestId","get"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\core-rest-pipeline\\src\\policies\\tracingPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  type TracingClient,\n  type TracingContext,\n  type TracingSpan,\n  createTracingClient,\n} from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n\n/**\n * Options to configure the tracing policy.\n */\nexport interface TracingPolicyOptions {\n  /**\n   * String prefix to add to the user agent logged as metadata\n   * on the generated Span.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options: TracingPolicyOptions = {}): PipelinePolicy {\n  const userAgentPromise = getUserAgentValue(options.userAgentPrefix);\n  const sanitizer = new Sanitizer({\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n  });\n  const tracingClient = tryCreateTracingClient();\n\n  return {\n    name: tracingPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!tracingClient) {\n        return next(request);\n      }\n\n      const userAgent = await userAgentPromise;\n\n      const spanAttributes = {\n        \"http.url\": sanitizer.sanitizeUrl(request.url),\n        \"http.method\": request.method,\n        \"http.user_agent\": userAgent,\n        requestId: request.requestId,\n      };\n      if (userAgent) {\n        spanAttributes[\"http.user_agent\"] = userAgent;\n      }\n\n      const { span, tracingContext } = tryCreateSpan(tracingClient, request, spanAttributes) ?? {};\n\n      if (!span || !tracingContext) {\n        return next(request);\n      }\n\n      try {\n        const response = await tracingClient.withContext(tracingContext, next, request);\n        tryProcessResponse(span, response);\n        return response;\n      } catch (err: any) {\n        tryProcessError(span, err);\n        throw err;\n      }\n    },\n  };\n}\n\nfunction tryCreateTracingClient(): TracingClient | undefined {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION,\n    });\n  } catch (e: unknown) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryCreateSpan(\n  tracingClient: TracingClient,\n  request: PipelineRequest,\n  spanAttributes: Record<string, unknown>,\n): { span: TracingSpan; tracingContext: TracingContext } | undefined {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const { span, updatedOptions } = tracingClient.startSpan(\n      `HTTP ${request.method}`,\n      { tracingOptions: request.tracingOptions },\n      {\n        spanKind: \"client\",\n        spanAttributes,\n      },\n    );\n\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n\n    // set headers\n    const headers = tracingClient.createRequestHeaders(\n      updatedOptions.tracingOptions.tracingContext,\n    );\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n  } catch (e: any) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryProcessError(span: TracingSpan, error: unknown): void {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined,\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n\nfunction tryProcessResponse(span: TracingSpan, response: PipelineResponse): void {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    span.setStatus({\n      status: \"success\",\n    });\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}