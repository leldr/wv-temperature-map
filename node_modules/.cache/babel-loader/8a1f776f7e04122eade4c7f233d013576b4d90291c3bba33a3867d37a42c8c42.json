{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n    case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n}\n;\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n_c = StringDecoder;\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\nvar _c;\n$RefreshReg$(_c, \"StringDecoder\");","map":{"version":3,"names":["Buffer","require","isEncoding","encoding","toLowerCase","_normalizeEncoding","enc","retried","normalizeEncoding","nenc","Error","exports","StringDecoder","nb","text","utf16Text","end","utf16End","fillLast","utf8FillLast","base64Text","base64End","write","simpleWrite","simpleEnd","lastNeed","lastTotal","lastChar","allocUnsafe","_c","prototype","buf","length","r","i","undefined","utf8End","utf8Text","copy","toString","utf8CheckByte","byte","utf8CheckIncomplete","self","j","utf8CheckExtraBytes","p","total","c","charCodeAt","slice","n","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/backend/node_modules/string_decoder/lib/string_decoder.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}