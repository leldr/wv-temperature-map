{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _collation = require(\"../collation\");\nvar _token = require(\"./token\");\nvar _helpers = require(\"./helpers\");\nconst types = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\nfunction _readNewAndOldValue(buf, offset, length, type) {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER':\n      {\n        let newValue;\n        ({\n          offset,\n          value: newValue\n        } = (0, _helpers.readBVarChar)(buf, offset));\n        let oldValue;\n        ({\n          offset,\n          value: oldValue\n        } = (0, _helpers.readBVarChar)(buf, offset));\n        switch (type.name) {\n          case 'PACKET_SIZE':\n            return new _helpers.Result(new _token.PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)), offset);\n          case 'DATABASE':\n            return new _helpers.Result(new _token.DatabaseEnvChangeToken(newValue, oldValue), offset);\n          case 'LANGUAGE':\n            return new _helpers.Result(new _token.LanguageEnvChangeToken(newValue, oldValue), offset);\n          case 'CHARSET':\n            return new _helpers.Result(new _token.CharsetEnvChangeToken(newValue, oldValue), offset);\n          case 'DATABASE_MIRRORING_PARTNER':\n            return new _helpers.Result(new _token.DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue), offset);\n        }\n        throw new Error('unreachable');\n      }\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION':\n      {\n        let newValue;\n        ({\n          offset,\n          value: newValue\n        } = (0, _helpers.readBVarByte)(buf, offset));\n        let oldValue;\n        ({\n          offset,\n          value: oldValue\n        } = (0, _helpers.readBVarByte)(buf, offset));\n        switch (type.name) {\n          case 'SQL_COLLATION':\n            {\n              const newCollation = newValue.length ? _collation.Collation.fromBuffer(newValue) : undefined;\n              const oldCollation = oldValue.length ? _collation.Collation.fromBuffer(oldValue) : undefined;\n              return new _helpers.Result(new _token.CollationChangeToken(newCollation, oldCollation), offset);\n            }\n          case 'BEGIN_TXN':\n            return new _helpers.Result(new _token.BeginTransactionEnvChangeToken(newValue, oldValue), offset);\n          case 'COMMIT_TXN':\n            return new _helpers.Result(new _token.CommitTransactionEnvChangeToken(newValue, oldValue), offset);\n          case 'ROLLBACK_TXN':\n            return new _helpers.Result(new _token.RollbackTransactionEnvChangeToken(newValue, oldValue), offset);\n          case 'RESET_CONNECTION':\n            return new _helpers.Result(new _token.ResetConnectionEnvChangeToken(newValue, oldValue), offset);\n        }\n        throw new Error('unreachable');\n      }\n    case 'ROUTING_CHANGE':\n      {\n        let routePacket;\n        ({\n          offset,\n          value: routePacket\n        } = (0, _helpers.readUsVarByte)(buf, offset));\n        let oldValue;\n        ({\n          offset,\n          value: oldValue\n        } = (0, _helpers.readUsVarByte)(buf, offset));\n\n        // Routing Change:\n        // Byte 1: Protocol (must be 0)\n        // Bytes 2-3 (USHORT): Port number\n        // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n        // Bytes 6-*: Server name in unicode characters\n        const protocol = routePacket.readUInt8(0);\n        if (protocol !== 0) {\n          throw new Error('Unknown protocol byte in routing change event');\n        }\n        const port = routePacket.readUInt16LE(1);\n        const serverLen = routePacket.readUInt16LE(3);\n        // 2 bytes per char, starting at offset 5\n        const server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);\n        const newValue = {\n          protocol: protocol,\n          port: port,\n          server: server\n        };\n        return new _helpers.Result(new _token.RoutingEnvChangeToken(newValue, oldValue), offset);\n      }\n    default:\n      {\n        console.error('Tedious > Unsupported ENVCHANGE type ' + type.name);\n\n        // skip unknown bytes\n        return new _helpers.Result(undefined, offset + length - 1);\n      }\n  }\n}\nfunction envChangeParser(buf, offset, _options) {\n  let tokenLength;\n  ({\n    offset,\n    value: tokenLength\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  if (buf.length < offset + tokenLength) {\n    throw new _helpers.NotEnoughDataError(offset + tokenLength);\n  }\n  let typeNumber;\n  ({\n    offset,\n    value: typeNumber\n  } = (0, _helpers.readUInt8)(buf, offset));\n  const type = types[typeNumber];\n  if (!type) {\n    console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber);\n    return new _helpers.Result(undefined, offset + tokenLength - 1);\n  }\n  return _readNewAndOldValue(buf, offset, tokenLength, type);\n}\nvar _default = exports.default = envChangeParser;\nmodule.exports = envChangeParser;","map":{"version":3,"names":["_collation","require","_token","_helpers","types","name","event","_readNewAndOldValue","buf","offset","length","type","newValue","value","readBVarChar","oldValue","Result","PacketSizeEnvChangeToken","parseInt","DatabaseEnvChangeToken","LanguageEnvChangeToken","CharsetEnvChangeToken","DatabaseMirroringPartnerEnvChangeToken","Error","readBVarByte","newCollation","Collation","fromBuffer","undefined","oldCollation","CollationChangeToken","BeginTransactionEnvChangeToken","CommitTransactionEnvChangeToken","RollbackTransactionEnvChangeToken","ResetConnectionEnvChangeToken","routePacket","readUsVarByte","protocol","readUInt8","port","readUInt16LE","serverLen","server","toString","RoutingEnvChangeToken","console","error","envChangeParser","_options","tokenLength","NotEnoughDataError","typeNumber","_default","exports","default","module"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\tedious\\src\\token\\env-change-token-parser.ts"],"sourcesContent":["import { type ParserOptions } from './stream-parser';\nimport { Collation } from '../collation';\n\nimport {\n  DatabaseEnvChangeToken,\n  LanguageEnvChangeToken,\n  CharsetEnvChangeToken,\n  PacketSizeEnvChangeToken,\n  BeginTransactionEnvChangeToken,\n  CommitTransactionEnvChangeToken,\n  RollbackTransactionEnvChangeToken,\n  DatabaseMirroringPartnerEnvChangeToken,\n  ResetConnectionEnvChangeToken,\n  RoutingEnvChangeToken,\n  CollationChangeToken,\n  type EnvChangeToken\n} from './token';\n\nimport { NotEnoughDataError, readBVarByte, readBVarChar, readUInt16LE, readUInt8, readUsVarByte, Result } from './helpers';\n\nconst types: { [key: number]: { name: string, event?: string }} = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\n\nfunction _readNewAndOldValue(buf: Buffer, offset: number, length: number, type: { name: string, event?: string }): Result<EnvChangeToken | undefined> {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER': {\n      let newValue;\n      ({ offset, value: newValue } = readBVarChar(buf, offset));\n\n      let oldValue;\n      ({ offset, value: oldValue } = readBVarChar(buf, offset));\n\n      switch (type.name) {\n        case 'PACKET_SIZE':\n          return new Result(new PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)), offset);\n\n        case 'DATABASE':\n          return new Result(new DatabaseEnvChangeToken(newValue, oldValue), offset);\n\n        case 'LANGUAGE':\n          return new Result(new LanguageEnvChangeToken(newValue, oldValue), offset);\n\n        case 'CHARSET':\n          return new Result(new CharsetEnvChangeToken(newValue, oldValue), offset);\n\n        case 'DATABASE_MIRRORING_PARTNER':\n          return new Result(new DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue), offset);\n      }\n\n      throw new Error('unreachable');\n    }\n\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION': {\n      let newValue;\n      ({ offset, value: newValue } = readBVarByte(buf, offset));\n\n      let oldValue;\n      ({ offset, value: oldValue } = readBVarByte(buf, offset));\n\n      switch (type.name) {\n        case 'SQL_COLLATION': {\n          const newCollation = newValue.length ? Collation.fromBuffer(newValue) : undefined;\n          const oldCollation = oldValue.length ? Collation.fromBuffer(oldValue) : undefined;\n\n          return new Result(new CollationChangeToken(newCollation, oldCollation), offset);\n        }\n\n        case 'BEGIN_TXN':\n          return new Result(new BeginTransactionEnvChangeToken(newValue, oldValue), offset);\n\n        case 'COMMIT_TXN':\n          return new Result(new CommitTransactionEnvChangeToken(newValue, oldValue), offset);\n\n        case 'ROLLBACK_TXN':\n          return new Result(new RollbackTransactionEnvChangeToken(newValue, oldValue), offset);\n\n        case 'RESET_CONNECTION':\n          return new Result(new ResetConnectionEnvChangeToken(newValue, oldValue), offset);\n      }\n\n      throw new Error('unreachable');\n    }\n\n    case 'ROUTING_CHANGE': {\n      let routePacket;\n      ({ offset, value: routePacket } = readUsVarByte(buf, offset));\n\n      let oldValue;\n      ({ offset, value: oldValue } = readUsVarByte(buf, offset));\n\n      // Routing Change:\n      // Byte 1: Protocol (must be 0)\n      // Bytes 2-3 (USHORT): Port number\n      // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n      // Bytes 6-*: Server name in unicode characters\n      const protocol = routePacket.readUInt8(0);\n      if (protocol !== 0) {\n        throw new Error('Unknown protocol byte in routing change event');\n      }\n\n      const port = routePacket.readUInt16LE(1);\n      const serverLen = routePacket.readUInt16LE(3);\n      // 2 bytes per char, starting at offset 5\n      const server = routePacket.toString('ucs2', 5, 5 + (serverLen * 2));\n\n      const newValue = {\n        protocol: protocol,\n        port: port,\n        server: server\n      };\n\n      return new Result(new RoutingEnvChangeToken(newValue, oldValue), offset);\n    }\n\n    default: {\n      console.error('Tedious > Unsupported ENVCHANGE type ' + type.name);\n\n      // skip unknown bytes\n      return new Result(undefined, offset + length - 1);\n    }\n  }\n}\n\nfunction envChangeParser(buf: Buffer, offset: number, _options: ParserOptions): Result<EnvChangeToken | undefined> {\n  let tokenLength;\n  ({ offset, value: tokenLength } = readUInt16LE(buf, offset));\n\n  if (buf.length < offset + tokenLength) {\n    throw new NotEnoughDataError(offset + tokenLength);\n  }\n\n  let typeNumber;\n  ({ offset, value: typeNumber } = readUInt8(buf, offset));\n\n  const type = types[typeNumber];\n\n  if (!type) {\n    console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber);\n    return new Result(undefined, offset + tokenLength - 1);\n  }\n\n  return _readNewAndOldValue(buf, offset, tokenLength, type);\n}\n\nexport default envChangeParser;\nmodule.exports = envChangeParser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}