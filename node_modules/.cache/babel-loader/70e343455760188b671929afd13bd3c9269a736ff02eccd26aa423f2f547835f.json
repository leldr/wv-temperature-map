{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\MapPage.js\",\n  _s = $RefreshSig$();\n/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * The data is then displayed on the map using the MapComponent.\r\n */\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport MapComponent from './MapComponent';\nimport DateSelector from './DateSelector';\nimport axios from 'axios';\n\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * \r\n * @component\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  setAuthenticated\n}) {\n  _s();\n  const [date] = useState(''); // Selected date for data retrieval\n  const [temperatureData, setTemperatureData] = useState([]); // Array to hold temperature data for the map\n  const navigate = useNavigate(); // Hook for programmatic navigation\n\n  /**\r\n  * fetchTemperatureData\r\n  * \r\n  * Fetches temperature data from the backend for the selected date.\r\n  * \r\n  * @async\r\n  * @function\r\n  */\n  const fetchTemperatureData = async () => {\n    if (!date) {\n      alert(\"Please select a date.\");\n      return;\n    }\n    console.log(`Fetching temperature data for date: ${date}`);\n    try {\n      const response = await axios.get(`http://localhost:5000/api/temperature/temperature-data`, {\n        params: {\n          date\n        }\n      });\n      setTemperatureData(response.data);\n      console.log(\"Temperature data received:\", response.data);\n    } catch (error) {\n      console.error(\"Failed to fetch temperature data:\", error);\n    }\n  };\n\n  /**\r\n   * Updates the selected date state when a new date is chosen.\r\n   * @param {string} newDate - The date selected by the user.\r\n   */\n  const handleDateChange = newDate => {\n    setDate(newDate);\n  };\n\n  /**\r\n   * handleLogout\r\n   * \r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\n  const handleLogout = () => {\n    setAuthenticated(false); // Update authentication state to log out\n    localStorage.removeItem('authenticated'); // Clear authentication from local storage\n    navigate('/'); // Redirect to the login/register page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monthly Average Temperatures in West Virginia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateSelector, {\n      fetchTemperatureData: fetchTemperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n      temperatures: temperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      style: {\n        marginTop: '20px'\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(MapPage, \"XhjhE0i8K+fYHQyncno/8g+TpLQ=\", false, function () {\n  return [useNavigate];\n});\n_c = MapPage;\n;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useNavigate","MapComponent","DateSelector","axios","jsxDEV","_jsxDEV","MapPage","setAuthenticated","_s","date","temperatureData","setTemperatureData","navigate","fetchTemperatureData","alert","console","log","response","get","params","data","error","handleDateChange","newDate","setDate","handleLogout","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","temperatures","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/MapPage.js"],"sourcesContent":["/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * The data is then displayed on the map using the MapComponent.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MapComponent from './MapComponent';\r\nimport DateSelector from './DateSelector';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * \r\n * @component\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\r\nfunction MapPage({ setAuthenticated }) {\r\n  const [date] = useState('');  // Selected date for data retrieval\r\n  const [temperatureData, setTemperatureData] = useState([]);  // Array to hold temperature data for the map\r\n  const navigate = useNavigate();  // Hook for programmatic navigation\r\n\r\n /**\r\n * fetchTemperatureData\r\n * \r\n * Fetches temperature data from the backend for the selected date.\r\n * \r\n * @async\r\n * @function\r\n */\r\n const fetchTemperatureData = async () => {\r\n  if (!date) {\r\n    alert(\"Please select a date.\");\r\n    return;\r\n  }\r\n  console.log(`Fetching temperature data for date: ${date}`);\r\n  try {\r\n    const response = await axios.get(`http://localhost:5000/api/temperature/temperature-data`, {\r\n      params: { date },\r\n    });\r\n    setTemperatureData(response.data);\r\n    console.log(\"Temperature data received:\", response.data);\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch temperature data:\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the selected date state when a new date is chosen.\r\n * @param {string} newDate - The date selected by the user.\r\n */\r\nconst handleDateChange = (newDate) => {\r\n  setDate(newDate);\r\n};\r\n\r\n  /**\r\n   * handleLogout\r\n   * \r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\r\n  const handleLogout = () => {\r\n    setAuthenticated(false);  // Update authentication state to log out\r\n    localStorage.removeItem('authenticated');  // Clear authentication from local storage\r\n    navigate('/');  // Redirect to the login/register page\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Monthly Average Temperatures in West Virginia</h1>\r\n      \r\n      {/* DateSelector component allows user to select a date and trigger data fetch */}\r\n      <DateSelector fetchTemperatureData={fetchTemperatureData} />\r\n\r\n      {/* MapComponent displays the temperature data as markers on the map */}\r\n      <MapComponent temperatures={temperatureData} />\r\n\r\n      {/* Logout button triggers the handleLogout function */}\r\n      <button onClick={handleLogout} style={{ marginTop: '20px' }}>Logout</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}