{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createClientLogger } from \"@azure/logger\";\n/**\n * The AzureLogger used for all clients within the identity package\n */\nexport const logger = createClientLogger(\"identity\");\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nexport function processEnvVars(supportedEnvVars) {\n  return supportedEnvVars.reduce((acc, envVariable) => {\n    if (process.env[envVariable]) {\n      acc.assigned.push(envVariable);\n    } else {\n      acc.missing.push(envVariable);\n    }\n    return acc;\n  }, {\n    missing: [],\n    assigned: []\n  });\n}\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\nexport function logEnvVars(credentialName, supportedEnvVars) {\n  const {\n    assigned\n  } = processEnvVars(supportedEnvVars);\n  logger.info(`${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`);\n}\n/**\n * Formatting the success event on the credentials\n */\nexport function formatSuccess(scope) {\n  return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n/**\n * Formatting the success event on the credentials\n */\nexport function formatError(scope, error) {\n  let message = \"ERROR.\";\n  if (scope === null || scope === void 0 ? void 0 : scope.length) {\n    message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n  }\n  return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nexport function credentialLoggerInstance(title, parent, log = logger) {\n  const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n  function info(message) {\n    log.info(`${fullTitle} =>`, message);\n  }\n  function warning(message) {\n    log.warning(`${fullTitle} =>`, message);\n  }\n  function verbose(message) {\n    log.verbose(`${fullTitle} =>`, message);\n  }\n  function error(message) {\n    log.error(`${fullTitle} =>`, message);\n  }\n  return {\n    title,\n    fullTitle,\n    info,\n    warning,\n    verbose,\n    error\n  };\n}\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nexport function credentialLogger(title, log = logger) {\n  const credLogger = credentialLoggerInstance(title, undefined, log);\n  return Object.assign(Object.assign({}, credLogger), {\n    parent: log,\n    getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log)\n  });\n}","map":{"version":3,"names":["createClientLogger","logger","processEnvVars","supportedEnvVars","reduce","acc","envVariable","process","env","assigned","push","missing","logEnvVars","credentialName","info","join","formatSuccess","scope","Array","isArray","formatError","error","message","length","credentialLoggerInstance","title","parent","log","fullTitle","warning","verbose","credentialLogger","credLogger","undefined","Object","assign","getToken"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\util\\logging.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\n\n/**\n * The AzureLogger used for all clients within the identity package\n */\nexport const logger = createClientLogger(\"identity\");\n\ninterface EnvironmentAccumulator {\n  missing: string[];\n  assigned: string[];\n}\n\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nexport function processEnvVars(supportedEnvVars: string[]): EnvironmentAccumulator {\n  return supportedEnvVars.reduce(\n    (acc: EnvironmentAccumulator, envVariable: string) => {\n      if (process.env[envVariable]) {\n        acc.assigned.push(envVariable);\n      } else {\n        acc.missing.push(envVariable);\n      }\n      return acc;\n    },\n    { missing: [], assigned: [] },\n  );\n}\n\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\nexport function logEnvVars(credentialName: string, supportedEnvVars: string[]): void {\n  const { assigned } = processEnvVars(supportedEnvVars);\n  logger.info(\n    `${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`,\n  );\n}\n\n/**\n * Formatting the success event on the credentials\n */\nexport function formatSuccess(scope: string | string[]): string {\n  return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n\n/**\n * Formatting the success event on the credentials\n */\nexport function formatError(scope: string | string[] | undefined, error: Error | string): string {\n  let message = \"ERROR.\";\n  if (scope?.length) {\n    message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n  }\n  return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n\n/**\n * A CredentialLoggerInstance is a logger properly formatted to work in a credential's constructor, and its methods.\n */\nexport interface CredentialLoggerInstance {\n  title: string;\n  fullTitle: string;\n  info(message: string): void;\n  warning(message: string): void;\n  verbose(message: string): void;\n  error(err: string): void;\n}\n\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nexport function credentialLoggerInstance(\n  title: string,\n  parent?: CredentialLoggerInstance,\n  log: AzureLogger = logger,\n): CredentialLoggerInstance {\n  const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n\n  function info(message: string): void {\n    log.info(`${fullTitle} =>`, message);\n  }\n\n  function warning(message: string): void {\n    log.warning(`${fullTitle} =>`, message);\n  }\n\n  function verbose(message: string): void {\n    log.verbose(`${fullTitle} =>`, message);\n  }\n\n  function error(message: string): void {\n    log.error(`${fullTitle} =>`, message);\n  }\n\n  return {\n    title,\n    fullTitle,\n    info,\n    warning,\n    verbose,\n    error,\n  };\n}\n\n/**\n * A CredentialLogger is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n */\nexport interface CredentialLogger extends CredentialLoggerInstance {\n  parent: AzureLogger;\n  getToken: CredentialLoggerInstance;\n}\n\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nexport function credentialLogger(title: string, log: AzureLogger = logger): CredentialLogger {\n  const credLogger = credentialLoggerInstance(title, undefined, log);\n  return {\n    ...credLogger,\n    parent: log,\n    getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}