{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { processMultiTenantRequest, resolveAdditionallyAllowedTenantIds } from \"../util/tenantIdUtils\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nimport { ensureScopes } from \"../util/scopeUtils\";\nimport { tracingClient } from \"../util/tracing\";\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Microsoft Entra ID inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential {\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Microsoft Entra ID with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the Microsoft Entra Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://learn.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(options) {\n    if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n      const error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n    this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n    const browserOptions = options;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(`Invalid loginStyle: ${browserOptions.loginStyle}. Should be any of the following: ${loginStyles.join(\", \")}.`);\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n    const msalOptions = Object.assign(Object.assign({}, options), {\n      tokenCredentialOptions: options,\n      logger,\n      loginStyle: loginStyle,\n      redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri\n    });\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n  }\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes, options = {}) {\n    return tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async newOptions => {\n      const tenantId = processMultiTenantRequest(this.tenantId, newOptions, this.additionallyAllowedTenantIds);\n      newOptions.tenantId = tenantId;\n      const arrayScopes = ensureScopes(scopes);\n      return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n        disableAutomaticAuthentication: this.disableAutomaticAuthentication\n      }));\n    });\n  }\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async authenticate(scopes, options = {}) {\n    return tracingClient.withSpan(`${this.constructor.name}.authenticate`, options, async newOptions => {\n      const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n      await this.msalFlow.getToken(arrayScopes, newOptions);\n      return this.msalFlow.getActiveAccount();\n    });\n  }\n}","map":{"version":3,"names":["credentialLogger","formatError","processMultiTenantRequest","resolveAdditionallyAllowedTenantIds","MSALAuthCode","ensureScopes","tracingClient","logger","InteractiveBrowserCredential","constructor","options","clientId","error","Error","info","tenantId","additionallyAllowedTenantIds","additionallyAllowedTenants","browserOptions","loginStyle","loginStyles","indexOf","join","msalOptions","Object","assign","tokenCredentialOptions","redirectUri","msalFlow","disableAutomaticAuthentication","getToken","scopes","withSpan","name","newOptions","arrayScopes","authenticate","Array","isArray","getActiveAccount"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\credentials\\interactiveBrowserCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  InteractiveBrowserCredentialInBrowserOptions,\n  InteractiveBrowserCredentialNodeOptions,\n} from \"./interactiveBrowserCredentialOptions\";\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n} from \"../util/tenantIdUtils\";\n\nimport { AuthenticationRecord } from \"../msal/types\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nimport { MsalBrowserFlowOptions } from \"../msal/browserFlows/msalBrowserCommon\";\nimport { MsalFlow } from \"../msal/browserFlows/flows\";\nimport { ensureScopes } from \"../util/scopeUtils\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n\n/**\n * Enables authentication to Microsoft Entra ID inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential implements TokenCredential {\n  private tenantId?: string;\n  private additionallyAllowedTenantIds: string[];\n  private msalFlow: MsalFlow;\n  private disableAutomaticAuthentication?: boolean;\n\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Microsoft Entra ID with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the Microsoft Entra Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://learn.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    options: InteractiveBrowserCredentialInBrowserOptions | InteractiveBrowserCredentialNodeOptions,\n  ) {\n    if (!options?.clientId) {\n      const error = new Error(\n        \"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\",\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    this.tenantId = options?.tenantId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.additionallyAllowedTenants,\n    );\n\n    const browserOptions = options as InteractiveBrowserCredentialInBrowserOptions;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(\n        `Invalid loginStyle: ${\n          browserOptions.loginStyle\n        }. Should be any of the following: ${loginStyles.join(\", \")}.`,\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const msalOptions: MsalBrowserFlowOptions = {\n      ...options,\n      tokenCredentialOptions: options,\n      logger,\n      loginStyle: loginStyle,\n      redirectUri:\n        typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri,\n    };\n\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options?.disableAutomaticAuthentication;\n  }\n\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes: string | string[], options: GetTokenOptions = {}): Promise<AccessToken> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const tenantId = processMultiTenantRequest(\n          this.tenantId,\n          newOptions,\n          this.additionallyAllowedTenantIds,\n        );\n        newOptions.tenantId = tenantId;\n\n        const arrayScopes = ensureScopes(scopes);\n        return this.msalFlow.getToken(arrayScopes, {\n          ...newOptions,\n          disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n        });\n      },\n    );\n  }\n\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async authenticate(\n    scopes: string | string[],\n    options: GetTokenOptions = {},\n  ): Promise<AuthenticationRecord | undefined> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.authenticate`,\n      options,\n      async (newOptions) => {\n        const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n        await this.msalFlow.getToken(arrayScopes, newOptions);\n        return this.msalFlow.getActiveAccount();\n      },\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}