{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\DateSelector.js\",\n  _s = $RefreshSig$();\n/**\r\n * DateSelector.js\r\n * \r\n * Component that provides a dropdown menu to select a year and month.\r\n * Triggers a fetch for temperature data upon clicking the button.\r\n */\n\nimport React, { useState } from 'react';\n\n/**\r\n * DateSelector component for selecting year and month.\r\n * \r\n * @component\r\n * @param {Function} onDateChange - Function to handle date changes.\r\n * @param {Function} fetchTemperatureData - Function to trigger data fetching.\r\n * @returns {JSX.Element} The date selector component with a fetch button.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DateSelector({\n  onDateChange,\n  fetchTemperatureData\n}) {\n  _s();\n  const [selectedYear, setSelectedYear] = useState('');\n  const [selectedMonth, setSelectedMonth] = useState('');\n\n  /**\r\n   * Handles changes in year and month dropdowns and triggers onDateChange.\r\n   */\n  const handleDateSelection = () => {\n    if (selectedYear && selectedMonth) {\n      const formattedDate = `${selectedYear}-${selectedMonth}`;\n      onDateChange(formattedDate);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Year:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedYear,\n        onChange: e => {\n          setSelectedYear(e.target.value);\n          handleDateSelection();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), [...Array(new Date().getFullYear() - 1950)].map((_, i) => {\n          const year = 1951 + i;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 20\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Month:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedMonth,\n        onChange: e => {\n          setSelectedMonth(e.target.value);\n          handleDateSelection();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), Array.from({\n          length: 12\n        }, (_, i) => {\n          const month = (i + 1).toString().padStart(2, '0');\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: month,\n            children: month\n          }, month, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 20\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchTemperatureData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(DateSelector, \"I9KAozEc9lfvV+a9BlZ1d84nUwI=\");\n_c = DateSelector;\nexport default DateSelector;\nvar _c;\n$RefreshReg$(_c, \"DateSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DateSelector","onDateChange","fetchTemperatureData","_s","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","handleDateSelection","formattedDate","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","Array","Date","getFullYear","map","_","i","year","from","length","month","toString","padStart","onClick","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/DateSelector.js"],"sourcesContent":["/**\r\n * DateSelector.js\r\n * \r\n * Component that provides a dropdown menu to select a year and month.\r\n * Triggers a fetch for temperature data upon clicking the button.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * DateSelector component for selecting year and month.\r\n * \r\n * @component\r\n * @param {Function} onDateChange - Function to handle date changes.\r\n * @param {Function} fetchTemperatureData - Function to trigger data fetching.\r\n * @returns {JSX.Element} The date selector component with a fetch button.\r\n */\r\nfunction DateSelector({ onDateChange, fetchTemperatureData }) {\r\n  const [selectedYear, setSelectedYear] = useState('');\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n\r\n  /**\r\n   * Handles changes in year and month dropdowns and triggers onDateChange.\r\n   */\r\n  const handleDateSelection = () => {\r\n    if (selectedYear && selectedMonth) {\r\n      const formattedDate = `${selectedYear}-${selectedMonth}`;\r\n      onDateChange(formattedDate);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        Year:\r\n        <select value={selectedYear} onChange={(e) => { setSelectedYear(e.target.value); handleDateSelection(); }}>\r\n          <option value=\"\">Select year</option>\r\n          {[...Array(new Date().getFullYear() - 1950)].map((_, i) => {\r\n            const year = 1951 + i;\r\n            return <option key={year} value={year}>{year}</option>;\r\n          })}\r\n        </select>\r\n      </label>\r\n\r\n      <label>\r\n        Month:\r\n        <select value={selectedMonth} onChange={(e) => { setSelectedMonth(e.target.value); handleDateSelection(); }}>\r\n          <option value=\"\">Select month</option>\r\n          {Array.from({ length: 12 }, (_, i) => {\r\n            const month = (i + 1).toString().padStart(2, '0');\r\n            return <option key={month} value={month}>{month}</option>;\r\n          })}\r\n        </select>\r\n      </label>\r\n\r\n      <button onClick={fetchTemperatureData}>Fetch Data</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateSelector;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,SAASC,YAAYA,CAAC;EAAEC,YAAY;EAAEC;AAAqB,CAAC,EAAE;EAAAC,EAAA;EAC5D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtD;AACF;AACA;EACE,MAAMW,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAIJ,YAAY,IAAIE,aAAa,EAAE;MACjC,MAAMG,aAAa,GAAG,GAAGL,YAAY,IAAIE,aAAa,EAAE;MACxDL,YAAY,CAACQ,aAAa,CAAC;IAC7B;EACF,CAAC;EAED,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,GAAO,OAEL,eAAAX,OAAA;QAAQY,KAAK,EAAEP,YAAa;QAACQ,QAAQ,EAAGC,CAAC,IAAK;UAAER,eAAe,CAACQ,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;UAAEH,mBAAmB,CAAC,CAAC;QAAE,CAAE;QAAAE,QAAA,gBACxGX,OAAA;UAAQY,KAAK,EAAC,EAAE;UAAAD,QAAA,EAAC;QAAW;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACpC,CAAC,GAAGC,KAAK,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACzD,MAAMC,IAAI,GAAG,IAAI,GAAGD,CAAC;UACrB,oBAAOzB,OAAA;YAAmBY,KAAK,EAAEc,IAAK;YAAAf,QAAA,EAAEe;UAAI,GAAxBA,IAAI;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA6B,CAAC;QACxD,CAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAERnB,OAAA;MAAAW,QAAA,GAAO,QAEL,eAAAX,OAAA;QAAQY,KAAK,EAAEL,aAAc;QAACM,QAAQ,EAAGC,CAAC,IAAK;UAAEN,gBAAgB,CAACM,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;UAAEH,mBAAmB,CAAC,CAAC;QAAE,CAAE;QAAAE,QAAA,gBAC1GX,OAAA;UAAQY,KAAK,EAAC,EAAE;UAAAD,QAAA,EAAC;QAAY;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACrCC,KAAK,CAACO,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAG,CAAC,EAAE,CAACJ,CAAC,EAAEC,CAAC,KAAK;UACpC,MAAMI,KAAK,GAAG,CAACJ,CAAC,GAAG,CAAC,EAAEK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;UACjD,oBAAO/B,OAAA;YAAoBY,KAAK,EAAEiB,KAAM;YAAAlB,QAAA,EAAEkB;UAAK,GAA3BA,KAAK;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA+B,CAAC;QAC3D,CAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAERnB,OAAA;MAAQgC,OAAO,EAAE7B,oBAAqB;MAAAQ,QAAA,EAAC;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV;AAACf,EAAA,CAzCQH,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AA2CrB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}