{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\MapPage.js\",\n  _s = $RefreshSig$();\n/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * The data is then displayed on the map using the MapComponent.\r\n */\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport MapComponent from './MapComponent';\nimport DateSelector from './DateSelector';\nimport axios from 'axios';\n\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * \r\n * @component\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  setAuthenticated\n}) {\n  _s();\n  const [date, setDate] = useState(''); // Selected date for data retrieval\n  const [temperatureData, setTemperatureData] = useState([]); // Array to hold temperature data for the map\n  const navigate = useNavigate(); // Hook for programmatic navigation\n\n  /**\r\n   * fetchTemperatureData\r\n   * \r\n   * Fetches temperature data from the backend API for the specified date.\r\n   * Sends a GET request with the date as a query parameter and updates the map's temperature data.\r\n   * \r\n   * @async\r\n   * @function\r\n   * @returns {Promise<void>}\r\n   */\n  const fetchTemperatureData = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/temperature/temperature-data`, {\n        params: {\n          date\n        }\n      });\n      setTemperatureData(response.data); // Update the temperature data for the map\n    } catch (error) {\n      console.error(\"Failed to fetch temperature data:\", error);\n    }\n  };\n\n  /**\r\n   * handleLogout\r\n   * \r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\n  const handleLogout = () => {\n    setAuthenticated(false); // Update authentication state to log out\n    localStorage.removeItem('authenticated'); // Clear authentication from local storage\n    navigate('/'); // Redirect to the login/register page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Temperatures in West Virginia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateSelector, {\n      date: date,\n      setDate: setDate,\n      fetchTemperatureData: fetchTemperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n      temperatures: temperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      style: {\n        marginTop: '20px'\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(MapPage, \"ygfR0rrge+wfQWhFt4MatVkXsvw=\", false, function () {\n  return [useNavigate];\n});\n_c = MapPage;\n;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useNavigate","MapComponent","DateSelector","axios","jsxDEV","_jsxDEV","MapPage","setAuthenticated","_s","date","setDate","temperatureData","setTemperatureData","navigate","fetchTemperatureData","response","get","params","data","error","console","handleLogout","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","temperatures","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/MapPage.js"],"sourcesContent":["/**\r\n * MapPage.js\r\n * \r\n * React component for the main page of the temperature map application.\r\n * Provides a date selector and a button to fetch temperature data from the backend API.\r\n * The data is then displayed on the map using the MapComponent.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MapComponent from './MapComponent';\r\nimport DateSelector from './DateSelector';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * MapPage component that displays the map and handles temperature data fetching.\r\n * \r\n * @component\r\n * @param {Function} setAuthenticated - Function to update the app's authentication state.\r\n * @returns {JSX.Element} The rendered map page with temperature markers and a logout button.\r\n */\r\nfunction MapPage({ setAuthenticated }) {\r\n  const [date, setDate] = useState('');  // Selected date for data retrieval\r\n  const [temperatureData, setTemperatureData] = useState([]);  // Array to hold temperature data for the map\r\n  const navigate = useNavigate();  // Hook for programmatic navigation\r\n\r\n  /**\r\n   * fetchTemperatureData\r\n   * \r\n   * Fetches temperature data from the backend API for the specified date.\r\n   * Sends a GET request with the date as a query parameter and updates the map's temperature data.\r\n   * \r\n   * @async\r\n   * @function\r\n   * @returns {Promise<void>}\r\n   */\r\n  const fetchTemperatureData = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/temperature/temperature-data`, {\r\n        params: { date }\r\n      });\r\n      setTemperatureData(response.data);  // Update the temperature data for the map\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch temperature data:\", error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * handleLogout\r\n   * \r\n   * Logs out the user by clearing authentication state and local storage,\r\n   * then navigating to the login page.\r\n   */\r\n  const handleLogout = () => {\r\n    setAuthenticated(false);  // Update authentication state to log out\r\n    localStorage.removeItem('authenticated');  // Clear authentication from local storage\r\n    navigate('/');  // Redirect to the login/register page\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Temperatures in West Virginia</h1>\r\n      \r\n      {/* DateSelector component allows user to select a date and trigger data fetch */}\r\n      <DateSelector \r\n        date={date} \r\n        setDate={setDate} \r\n        fetchTemperatureData={fetchTemperatureData} \r\n      />\r\n\r\n      {/* MapComponent displays the temperature data as markers on the map */}\r\n      <MapComponent temperatures={temperatureData} />\r\n\r\n      {/* Logout button triggers the handleLogout function */}\r\n      <button onClick={handleLogout} style={{ marginTop: '20px' }}>Logout</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,SAASC,OAAOA,CAAC;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACvC,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC7D,MAAMc,QAAQ,GAAGb,WAAW,CAAC,CAAC,CAAC,CAAE;;EAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMc,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,wDAAwD,EAAE;QACzFC,MAAM,EAAE;UAAER;QAAK;MACjB,CAAC,CAAC;MACFG,kBAAkB,CAACG,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAE;IACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBd,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAE;IAC1Be,YAAY,CAACC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAE;IAC3CV,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAE;EAClB,CAAC;EAED,oBACER,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGtCvB,OAAA,CAACH,YAAY;MACXO,IAAI,EAAEA,IAAK;MACXC,OAAO,EAAEA,OAAQ;MACjBI,oBAAoB,EAAEA;IAAqB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eAGFvB,OAAA,CAACJ,YAAY;MAAC4B,YAAY,EAAElB;IAAgB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG/CvB,OAAA;MAAQyB,OAAO,EAAET,YAAa;MAACU,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAR,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzE,CAAC;AAEV;AAACpB,EAAA,CAxDQF,OAAO;EAAA,QAGGN,WAAW;AAAA;AAAAiC,EAAA,GAHrB3B,OAAO;AAwDf;AAED,eAAeA,OAAO;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}