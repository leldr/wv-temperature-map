{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport { randomUUID } from \"@azure/core-util\";\nclass PipelineRequestImpl {\n  constructor(options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    this.url = options.url;\n    this.body = options.body;\n    this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : createHttpHeaders();\n    this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n    this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n    this.multipartBody = options.multipartBody;\n    this.formData = options.formData;\n    this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n    this.proxySettings = options.proxySettings;\n    this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n    this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n    this.abortSignal = options.abortSignal;\n    this.tracingOptions = options.tracingOptions;\n    this.onUploadProgress = options.onUploadProgress;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.requestId = options.requestId || randomUUID();\n    this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n    this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;\n  }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options) {\n  return new PipelineRequestImpl(options);\n}","map":{"version":3,"names":["createHttpHeaders","randomUUID","PipelineRequestImpl","constructor","options","url","body","headers","_a","method","_b","timeout","_c","multipartBody","formData","disableKeepAlive","_d","proxySettings","streamResponseStatusCodes","withCredentials","_e","abortSignal","tracingOptions","onUploadProgress","onDownloadProgress","requestId","allowInsecureConnection","_f","enableBrowserStreams","_g","createPipelineRequest"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\core-rest-pipeline\\src\\pipelineRequest.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  FormDataMap,\n  HttpHeaders,\n  HttpMethods,\n  MultipartRequestBody,\n  PipelineRequest,\n  ProxySettings,\n  RequestBodyType,\n  TransferProgressEvent,\n} from \"./interfaces.js\";\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { randomUUID } from \"@azure/core-util\";\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * Settings to initialize a request.\n * Almost equivalent to Partial<PipelineRequest>, but url is mandatory.\n */\nexport interface PipelineRequestOptions {\n  /**\n   * The URL to make the request to.\n   */\n  url: string;\n\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method?: HttpMethods;\n\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers?: HttpHeaders;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   * Defaults to 0, which disables the timeout.\n   */\n  timeout?: number;\n\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   * Defaults to false.\n   */\n  withCredentials?: boolean;\n\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId?: string;\n\n  /**\n   * The HTTP body content (if any)\n   */\n  body?: RequestBodyType;\n\n  /**\n   * Body for a multipart request.\n   */\n  multipartBody?: MultipartRequestBody;\n\n  /**\n   * To simulate a browser form post\n   */\n  formData?: FormDataMap;\n\n  /**\n   * A list of response status codes whose corresponding PipelineResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n\n  /**\n   * BROWSER ONLY\n   *\n   * A browser only option to enable use of the Streams API. If this option is set and streaming is used\n   * (see `streamResponseStatusCodes`), the response will have a property `browserStream` instead of\n   * `blobBody` which will be undefined.\n   *\n   * Default value is false\n   */\n  enableBrowserStreams?: boolean;\n\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n\n  /**\n   * If the connection should not be reused.\n   */\n  disableKeepAlive?: boolean;\n\n  /**\n   * Used to abort the request later.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Set to true if the request is sent over HTTP instead of HTTPS */\n  allowInsecureConnection?: boolean;\n}\n\nclass PipelineRequestImpl implements PipelineRequest {\n  public url: string;\n  public method: HttpMethods;\n  public headers: HttpHeaders;\n  public timeout: number;\n  public withCredentials: boolean;\n  public body?: RequestBodyType;\n  public multipartBody?: MultipartRequestBody;\n  public formData?: FormDataMap;\n  public streamResponseStatusCodes?: Set<number>;\n  public enableBrowserStreams: boolean;\n\n  public proxySettings?: ProxySettings;\n  public disableKeepAlive: boolean;\n  public abortSignal?: AbortSignalLike;\n  public requestId: string;\n  public tracingOptions?: OperationTracingOptions;\n  public allowInsecureConnection?: boolean;\n  public onUploadProgress?: (progress: TransferProgressEvent) => void;\n  public onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(options: PipelineRequestOptions) {\n    this.url = options.url;\n    this.body = options.body;\n    this.headers = options.headers ?? createHttpHeaders();\n    this.method = options.method ?? \"GET\";\n    this.timeout = options.timeout ?? 0;\n    this.multipartBody = options.multipartBody;\n    this.formData = options.formData;\n    this.disableKeepAlive = options.disableKeepAlive ?? false;\n    this.proxySettings = options.proxySettings;\n    this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n    this.withCredentials = options.withCredentials ?? false;\n    this.abortSignal = options.abortSignal;\n    this.tracingOptions = options.tracingOptions;\n    this.onUploadProgress = options.onUploadProgress;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.requestId = options.requestId || randomUUID();\n    this.allowInsecureConnection = options.allowInsecureConnection ?? false;\n    this.enableBrowserStreams = options.enableBrowserStreams ?? false;\n  }\n}\n\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options: PipelineRequestOptions): PipelineRequest {\n  return new PipelineRequestImpl(options);\n}\n"],"mappings":"AAAA;AACA;AAYA,SAASA,iBAAiB,QAAQ,kBAAkB;AAEpD,SAASC,UAAU,QAAQ,kBAAkB;AAwG7C,MAAMC,mBAAmB;EAqBvBC,YAAYC,OAA+B;;IACzC,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;IACtB,IAAI,CAACC,IAAI,GAAGF,OAAO,CAACE,IAAI;IACxB,IAAI,CAACC,OAAO,GAAG,CAAAC,EAAA,GAAAJ,OAAO,CAACG,OAAO,cAAAC,EAAA,cAAAA,EAAA,GAAIR,iBAAiB,EAAE;IACrD,IAAI,CAACS,MAAM,GAAG,CAAAC,EAAA,GAAAN,OAAO,CAACK,MAAM,cAAAC,EAAA,cAAAA,EAAA,GAAI,KAAK;IACrC,IAAI,CAACC,OAAO,GAAG,CAAAC,EAAA,GAAAR,OAAO,CAACO,OAAO,cAAAC,EAAA,cAAAA,EAAA,GAAI,CAAC;IACnC,IAAI,CAACC,aAAa,GAAGT,OAAO,CAACS,aAAa;IAC1C,IAAI,CAACC,QAAQ,GAAGV,OAAO,CAACU,QAAQ;IAChC,IAAI,CAACC,gBAAgB,GAAG,CAAAC,EAAA,GAAAZ,OAAO,CAACW,gBAAgB,cAAAC,EAAA,cAAAA,EAAA,GAAI,KAAK;IACzD,IAAI,CAACC,aAAa,GAAGb,OAAO,CAACa,aAAa;IAC1C,IAAI,CAACC,yBAAyB,GAAGd,OAAO,CAACc,yBAAyB;IAClE,IAAI,CAACC,eAAe,GAAG,CAAAC,EAAA,GAAAhB,OAAO,CAACe,eAAe,cAAAC,EAAA,cAAAA,EAAA,GAAI,KAAK;IACvD,IAAI,CAACC,WAAW,GAAGjB,OAAO,CAACiB,WAAW;IACtC,IAAI,CAACC,cAAc,GAAGlB,OAAO,CAACkB,cAAc;IAC5C,IAAI,CAACC,gBAAgB,GAAGnB,OAAO,CAACmB,gBAAgB;IAChD,IAAI,CAACC,kBAAkB,GAAGpB,OAAO,CAACoB,kBAAkB;IACpD,IAAI,CAACC,SAAS,GAAGrB,OAAO,CAACqB,SAAS,IAAIxB,UAAU,EAAE;IAClD,IAAI,CAACyB,uBAAuB,GAAG,CAAAC,EAAA,GAAAvB,OAAO,CAACsB,uBAAuB,cAAAC,EAAA,cAAAA,EAAA,GAAI,KAAK;IACvE,IAAI,CAACC,oBAAoB,GAAG,CAAAC,EAAA,GAAAzB,OAAO,CAACwB,oBAAoB,cAAAC,EAAA,cAAAA,EAAA,GAAI,KAAK;EACnE;;AAGF;;;;;AAKA,OAAM,SAAUC,qBAAqBA,CAAC1B,OAA+B;EACnE,OAAO,IAAIF,mBAAmB,CAACE,OAAO,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}