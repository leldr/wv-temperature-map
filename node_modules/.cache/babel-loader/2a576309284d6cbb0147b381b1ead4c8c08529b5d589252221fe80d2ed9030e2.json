{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\n_c = Utf7Codec;\n;\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\nfunction Utf7Encoder(options, codec) {\n  this.iconv = codec.iconv;\n}\n_c2 = Utf7Encoder;\nUtf7Encoder.prototype.write = function (str) {\n  // Naive implementation.\n  // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n  return Buffer.from(str.replace(nonDirectChars, function (chunk) {\n    return \"+\" + (chunk === '+' ? '' : this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) + \"-\";\n  }.bind(this)));\n};\nUtf7Encoder.prototype.end = function () {};\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n  this.iconv = codec.iconv;\n  this.inBase64 = false;\n  this.base64Accum = '';\n}\n_c3 = Utf7Decoder;\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++) base64Chars[i] = base64Regex.test(String.fromCharCode(i));\nvar plusChar = '+'.charCodeAt(0),\n  minusChar = '-'.charCodeAt(0),\n  andChar = '&'.charCodeAt(0);\nUtf7Decoder.prototype.write = function (buf) {\n  var res = \"\",\n    lastI = 0,\n    inBase64 = this.inBase64,\n    base64Accum = this.base64Accum;\n\n  // The decoder is more involved as we must handle chunks in stream.\n\n  for (var i = 0; i < buf.length; i++) {\n    if (!inBase64) {\n      // We're in direct mode.\n      // Write direct chars until '+'\n      if (buf[i] == plusChar) {\n        res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n        lastI = i + 1;\n        inBase64 = true;\n      }\n    } else {\n      // We decode base64.\n      if (!base64Chars[buf[i]]) {\n        // Base64 ended.\n        if (i == lastI && buf[i] == minusChar) {\n          // \"+-\" -> \"+\"\n          res += \"+\";\n        } else {\n          var b64str = base64Accum + buf.slice(lastI, i).toString();\n          res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n        }\n        if (buf[i] != minusChar)\n          // Minus is absorbed after base64.\n          i--;\n        lastI = i + 1;\n        inBase64 = false;\n        base64Accum = '';\n      }\n    }\n  }\n  if (!inBase64) {\n    res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n  } else {\n    var b64str = base64Accum + buf.slice(lastI).toString();\n    var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n    b64str = b64str.slice(0, canBeDecoded);\n    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n  }\n  this.inBase64 = inBase64;\n  this.base64Accum = base64Accum;\n  return res;\n};\nUtf7Decoder.prototype.end = function () {\n  var res = \"\";\n  if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n  this.inBase64 = false;\n  this.base64Accum = '';\n  return res;\n};\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\n_c4 = Utf7IMAPCodec;\n;\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n  this.iconv = codec.iconv;\n  this.inBase64 = false;\n  this.base64Accum = Buffer.alloc(6);\n  this.base64AccumIdx = 0;\n}\n_c5 = Utf7IMAPEncoder;\nUtf7IMAPEncoder.prototype.write = function (str) {\n  var inBase64 = this.inBase64,\n    base64Accum = this.base64Accum,\n    base64AccumIdx = this.base64AccumIdx,\n    buf = Buffer.alloc(str.length * 5 + 10),\n    bufIdx = 0;\n  for (var i = 0; i < str.length; i++) {\n    var uChar = str.charCodeAt(i);\n    if (0x20 <= uChar && uChar <= 0x7E) {\n      // Direct character or '&'.\n      if (inBase64) {\n        if (base64AccumIdx > 0) {\n          bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n          base64AccumIdx = 0;\n        }\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        inBase64 = false;\n      }\n      if (!inBase64) {\n        buf[bufIdx++] = uChar; // Write direct character\n\n        if (uChar === andChar)\n          // Ampersand -> '&-'\n          buf[bufIdx++] = minusChar;\n      }\n    } else {\n      // Non-direct character\n      if (!inBase64) {\n        buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n        inBase64 = true;\n      }\n      if (inBase64) {\n        base64Accum[base64AccumIdx++] = uChar >> 8;\n        base64Accum[base64AccumIdx++] = uChar & 0xFF;\n        if (base64AccumIdx == base64Accum.length) {\n          bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n          base64AccumIdx = 0;\n        }\n      }\n    }\n  }\n  this.inBase64 = inBase64;\n  this.base64AccumIdx = base64AccumIdx;\n  return buf.slice(0, bufIdx);\n};\nUtf7IMAPEncoder.prototype.end = function () {\n  var buf = Buffer.alloc(10),\n    bufIdx = 0;\n  if (this.inBase64) {\n    if (this.base64AccumIdx > 0) {\n      bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n      this.base64AccumIdx = 0;\n    }\n    buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n    this.inBase64 = false;\n  }\n  return buf.slice(0, bufIdx);\n};\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n  this.iconv = codec.iconv;\n  this.inBase64 = false;\n  this.base64Accum = '';\n}\n_c6 = Utf7IMAPDecoder;\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\nUtf7IMAPDecoder.prototype.write = function (buf) {\n  var res = \"\",\n    lastI = 0,\n    inBase64 = this.inBase64,\n    base64Accum = this.base64Accum;\n\n  // The decoder is more involved as we must handle chunks in stream.\n  // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n  for (var i = 0; i < buf.length; i++) {\n    if (!inBase64) {\n      // We're in direct mode.\n      // Write direct chars until '&'\n      if (buf[i] == andChar) {\n        res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n        lastI = i + 1;\n        inBase64 = true;\n      }\n    } else {\n      // We decode base64.\n      if (!base64IMAPChars[buf[i]]) {\n        // Base64 ended.\n        if (i == lastI && buf[i] == minusChar) {\n          // \"&-\" -> \"&\"\n          res += \"&\";\n        } else {\n          var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n          res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n        }\n        if (buf[i] != minusChar)\n          // Minus may be absorbed after base64.\n          i--;\n        lastI = i + 1;\n        inBase64 = false;\n        base64Accum = '';\n      }\n    }\n  }\n  if (!inBase64) {\n    res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n  } else {\n    var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n    var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n    b64str = b64str.slice(0, canBeDecoded);\n    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n  }\n  this.inBase64 = inBase64;\n  this.base64Accum = base64Accum;\n  return res;\n};\nUtf7IMAPDecoder.prototype.end = function () {\n  var res = \"\";\n  if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n  this.inBase64 = false;\n  this.base64Accum = '';\n  return res;\n};\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Utf7Codec\");\n$RefreshReg$(_c2, \"Utf7Encoder\");\n$RefreshReg$(_c3, \"Utf7Decoder\");\n$RefreshReg$(_c4, \"Utf7IMAPCodec\");\n$RefreshReg$(_c5, \"Utf7IMAPEncoder\");\n$RefreshReg$(_c6, \"Utf7IMAPDecoder\");","map":{"version":3,"names":["Buffer","require","exports","utf7","Utf7Codec","unicode11utf7","codecOptions","iconv","_c","prototype","encoder","Utf7Encoder","decoder","Utf7Decoder","bomAware","nonDirectChars","options","codec","_c2","write","str","from","replace","chunk","encode","toString","bind","end","inBase64","base64Accum","_c3","base64Regex","base64Chars","i","test","String","fromCharCode","plusChar","charCodeAt","minusChar","andChar","buf","res","lastI","length","decode","slice","b64str","canBeDecoded","utf7imap","Utf7IMAPCodec","_c4","Utf7IMAPEncoder","Utf7IMAPDecoder","alloc","base64AccumIdx","_c5","bufIdx","uChar","_c6","base64IMAPChars","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/backend/node_modules/iconv-lite/encodings/utf7.js"],"sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}