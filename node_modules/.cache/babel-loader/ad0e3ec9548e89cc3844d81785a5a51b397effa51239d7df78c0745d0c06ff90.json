{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phlos\\\\wv-temperature-map\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\n/* Login.js\r\n// Login component allows users to enter their credentials to access the application\r\n// The Login component provides a form for user authentication. It sends login credentials\r\n// to the backend, updates the app’s authentication status upon success, and navigates\r\n// to the map page.\r\n*/\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  setAuthenticated\n}) => {\n  _s();\n  // State variables to store the user's input for username and password\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  // useNavigate hook for programmatic navigation after successful login\n  const navigate = useNavigate();\n\n  // Handle form submission and send login request to backend\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Send a POST request with username and password to backend\n      const response = await axios.post('http://localhost:5000/auth/login', {\n        username,\n        password\n      }, {\n        withCredentials: true\n      } // Allows cookies to be sent with the request\n      );\n\n      // If login is successful, update the authentication status and navigate to the map page\n      if (response.data.message === 'Login successful') {\n        setAuthenticated(true);\n        navigate('/map');\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      alert('Invalid credentials');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      maxWidth: '300px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"IIPwWddbiEHHD7aoL5eQeOR7fTk=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jsxDEV","_jsxDEV","Login","setAuthenticated","_s","username","setUsername","password","setPassword","navigate","handleSubmit","e","preventDefault","response","post","withCredentials","data","message","error","console","alert","onSubmit","style","display","flexDirection","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/phlos/wv-temperature-map/src/Login.js"],"sourcesContent":["/* Login.js\r\n// Login component allows users to enter their credentials to access the application\r\n// The Login component provides a form for user authentication. It sends login credentials\r\n// to the backend, updates the app’s authentication status upon success, and navigates\r\n// to the map page.\r\n*/\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Login = ({ setAuthenticated }) => {\r\n  // State variables to store the user's input for username and password\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  // useNavigate hook for programmatic navigation after successful login\r\n  const navigate = useNavigate();\r\n\r\n  // Handle form submission and send login request to backend\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      // Send a POST request with username and password to backend\r\n      const response = await axios.post(\r\n        'http://localhost:5000/auth/login',\r\n        { username, password },\r\n        { withCredentials: true } // Allows cookies to be sent with the request\r\n      );\r\n\r\n      // If login is successful, update the authentication status and navigate to the map page\r\n      if (response.data.message === 'Login successful') {\r\n        setAuthenticated(true);\r\n        navigate('/map');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      alert('Invalid credentials');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', maxWidth: '300px' }}>\r\n      <h2>Login</h2>\r\n      {/* Input for username */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Username\"\r\n        value={username}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n      />\r\n      {/* Input for password */}\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EACtC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMW,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAC/B,kCAAkC,EAClC;QAAET,QAAQ;QAAEE;MAAS,CAAC,EACtB;QAAEQ,eAAe,EAAE;MAAK,CAAC,CAAC;MAC5B,CAAC;;MAED;MACA,IAAIF,QAAQ,CAACG,IAAI,CAACC,OAAO,KAAK,kBAAkB,EAAE;QAChDd,gBAAgB,CAAC,IAAI,CAAC;QACtBM,QAAQ,CAAC,MAAM,CAAC;MAClB;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCE,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACEnB,OAAA;IAAMoB,QAAQ,EAAEX,YAAa;IAACY,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBACnGzB,OAAA;MAAAyB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEd7B,OAAA;MACE8B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAE5B,QAAS;MAChB6B,QAAQ,EAAGvB,CAAC,IAAKL,WAAW,CAACK,CAAC,CAACwB,MAAM,CAACF,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eAEF7B,OAAA;MACE8B,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAE1B,QAAS;MAChB2B,QAAQ,EAAGvB,CAAC,IAAKH,WAAW,CAACG,CAAC,CAACwB,MAAM,CAACF,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACF7B,OAAA;MAAQ8B,IAAI,EAAC,QAAQ;MAAAL,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEX,CAAC;AAAC1B,EAAA,CAnDIF,KAAK;EAAA,QAMQH,WAAW;AAAA;AAAAqC,EAAA,GANxBlC,KAAK;AAqDX,eAAeA,KAAK;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}