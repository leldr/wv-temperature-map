{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { formatError } from \"./logging\";\n/**\n * Ensures the scopes value is an array.\n * @internal\n */\nexport function ensureScopes(scopes) {\n  return Array.isArray(scopes) ? scopes : [scopes];\n}\n/**\n * Throws if the received scope is not valid.\n * @internal\n */\nexport function ensureValidScopeForDevTimeCreds(scope, logger) {\n  if (!scope.match(/^[0-9a-zA-Z-_.:/]+$/)) {\n    const error = new Error(\"Invalid scope was specified by the user or calling client\");\n    logger.getToken.info(formatError(scope, error));\n    throw error;\n  }\n}\n/**\n * Returns the resource out of a scope.\n * @internal\n */\nexport function getScopeResource(scope) {\n  return scope.replace(/\\/.default$/, \"\");\n}","map":{"version":3,"names":["formatError","ensureScopes","scopes","Array","isArray","ensureValidScopeForDevTimeCreds","scope","logger","match","error","Error","getToken","info","getScopeResource","replace"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\util\\scopeUtils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CredentialLogger, formatError } from \"./logging\";\n\n/**\n * Ensures the scopes value is an array.\n * @internal\n */\nexport function ensureScopes(scopes: string | string[]): string[] {\n  return Array.isArray(scopes) ? scopes : [scopes];\n}\n\n/**\n * Throws if the received scope is not valid.\n * @internal\n */\nexport function ensureValidScopeForDevTimeCreds(scope: string, logger: CredentialLogger): void {\n  if (!scope.match(/^[0-9a-zA-Z-_.:/]+$/)) {\n    const error = new Error(\"Invalid scope was specified by the user or calling client\");\n    logger.getToken.info(formatError(scope, error));\n    throw error;\n  }\n}\n\n/**\n * Returns the resource out of a scope.\n * @internal\n */\nexport function getScopeResource(scope: string): string {\n  return scope.replace(/\\/.default$/, \"\");\n}\n"],"mappings":"AAAA;AACA;AAEA,SAA2BA,WAAW,QAAQ,WAAW;AAEzD;;;;AAIA,OAAM,SAAUC,YAAYA,CAACC,MAAyB;EACpD,OAAOC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;AAClD;AAEA;;;;AAIA,OAAM,SAAUG,+BAA+BA,CAACC,KAAa,EAAEC,MAAwB;EACrF,IAAI,CAACD,KAAK,CAACE,KAAK,CAAC,qBAAqB,CAAC,EAAE;IACvC,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,2DAA2D,CAAC;IACpFH,MAAM,CAACI,QAAQ,CAACC,IAAI,CAACZ,WAAW,CAACM,KAAK,EAAEG,KAAK,CAAC,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF;AAEA;;;;AAIA,OAAM,SAAUI,gBAAgBA,CAACP,KAAa;EAC5C,OAAOA,KAAK,CAACQ,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}