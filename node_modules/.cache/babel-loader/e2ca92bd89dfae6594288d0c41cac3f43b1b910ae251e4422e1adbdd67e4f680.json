{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ALL_TENANTS, DeveloperSignOnClientId } from \"../constants\";\nimport { formatError } from \"./logging\";\nexport { processMultiTenantRequest } from \"./processMultiTenantRequest\";\n/**\n * @internal\n */\nexport function checkTenantId(logger, tenantId) {\n  if (!tenantId.match(/^[0-9a-zA-Z-.]+$/)) {\n    const error = new Error(\"Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://learn.microsoft.com/partner-center/find-ids-and-domain-names.\");\n    logger.info(formatError(\"\", error));\n    throw error;\n  }\n}\n/**\n * @internal\n */\nexport function resolveTenantId(logger, tenantId, clientId) {\n  if (tenantId) {\n    checkTenantId(logger, tenantId);\n    return tenantId;\n  }\n  if (!clientId) {\n    clientId = DeveloperSignOnClientId;\n  }\n  if (clientId !== DeveloperSignOnClientId) {\n    return \"common\";\n  }\n  return \"organizations\";\n}\n/**\n * @internal\n */\nexport function resolveAdditionallyAllowedTenantIds(additionallyAllowedTenants) {\n  if (!additionallyAllowedTenants || additionallyAllowedTenants.length === 0) {\n    return [];\n  }\n  if (additionallyAllowedTenants.includes(\"*\")) {\n    return ALL_TENANTS;\n  }\n  return additionallyAllowedTenants;\n}","map":{"version":3,"names":["ALL_TENANTS","DeveloperSignOnClientId","formatError","processMultiTenantRequest","checkTenantId","logger","tenantId","match","error","Error","info","resolveTenantId","clientId","resolveAdditionallyAllowedTenantIds","additionallyAllowedTenants","length","includes"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\util\\tenantIdUtils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ALL_TENANTS, DeveloperSignOnClientId } from \"../constants\";\nimport { CredentialLogger, formatError } from \"./logging\";\nexport { processMultiTenantRequest } from \"./processMultiTenantRequest\";\n\n/**\n * @internal\n */\nexport function checkTenantId(logger: CredentialLogger, tenantId: string): void {\n  if (!tenantId.match(/^[0-9a-zA-Z-.]+$/)) {\n    const error = new Error(\n      \"Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://learn.microsoft.com/partner-center/find-ids-and-domain-names.\",\n    );\n    logger.info(formatError(\"\", error));\n    throw error;\n  }\n}\n\n/**\n * @internal\n */\nexport function resolveTenantId(\n  logger: CredentialLogger,\n  tenantId?: string,\n  clientId?: string,\n): string {\n  if (tenantId) {\n    checkTenantId(logger, tenantId);\n    return tenantId;\n  }\n  if (!clientId) {\n    clientId = DeveloperSignOnClientId;\n  }\n  if (clientId !== DeveloperSignOnClientId) {\n    return \"common\";\n  }\n  return \"organizations\";\n}\n\n/**\n * @internal\n */\nexport function resolveAdditionallyAllowedTenantIds(\n  additionallyAllowedTenants?: string[],\n): string[] {\n  if (!additionallyAllowedTenants || additionallyAllowedTenants.length === 0) {\n    return [];\n  }\n\n  if (additionallyAllowedTenants.includes(\"*\")) {\n    return ALL_TENANTS;\n  }\n\n  return additionallyAllowedTenants;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAW,EAAEC,uBAAuB,QAAQ,cAAc;AACnE,SAA2BC,WAAW,QAAQ,WAAW;AACzD,SAASC,yBAAyB,QAAQ,6BAA6B;AAEvE;;;AAGA,OAAM,SAAUC,aAAaA,CAACC,MAAwB,EAAEC,QAAgB;EACtE,IAAI,CAACA,QAAQ,CAACC,KAAK,CAAC,kBAAkB,CAAC,EAAE;IACvC,MAAMC,KAAK,GAAG,IAAIC,KAAK,CACrB,4KAA4K,CAC7K;IACDJ,MAAM,CAACK,IAAI,CAACR,WAAW,CAAC,EAAE,EAAEM,KAAK,CAAC,CAAC;IACnC,MAAMA,KAAK;EACb;AACF;AAEA;;;AAGA,OAAM,SAAUG,eAAeA,CAC7BN,MAAwB,EACxBC,QAAiB,EACjBM,QAAiB;EAEjB,IAAIN,QAAQ,EAAE;IACZF,aAAa,CAACC,MAAM,EAAEC,QAAQ,CAAC;IAC/B,OAAOA,QAAQ;EACjB;EACA,IAAI,CAACM,QAAQ,EAAE;IACbA,QAAQ,GAAGX,uBAAuB;EACpC;EACA,IAAIW,QAAQ,KAAKX,uBAAuB,EAAE;IACxC,OAAO,QAAQ;EACjB;EACA,OAAO,eAAe;AACxB;AAEA;;;AAGA,OAAM,SAAUY,mCAAmCA,CACjDC,0BAAqC;EAErC,IAAI,CAACA,0BAA0B,IAAIA,0BAA0B,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1E,OAAO,EAAE;EACX;EAEA,IAAID,0BAA0B,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC5C,OAAOhB,WAAW;EACpB;EAEA,OAAOc,0BAA0B;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}