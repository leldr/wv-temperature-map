{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy.js\";\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(options = {}) {\n  var _a, _b;\n  const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  let retryAfterInMs = retryInterval;\n  return {\n    name: \"exponentialRetryStrategy\",\n    retry({\n      retryCount,\n      response,\n      responseError\n    }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return {\n          skipStrategy: true\n        };\n      }\n      if (responseError && !matchedSystemError && !isExponential) {\n        return {\n          errorToThrow: responseError\n        };\n      }\n      // Exponentially increase the delay each time\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n      // Don't let the delay exceed the maximum\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n      // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n      retryAfterInMs = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return {\n        retryAfterInMs\n      };\n    }\n  };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response) {\n  return Boolean(response && response.status !== undefined && (response.status >= 500 || response.status === 408) && response.status !== 501 && response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err) {\n  if (!err) {\n    return false;\n  }\n  return err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" || err.code === \"ECONNRESET\" || err.code === \"ENOENT\" || err.code === \"ENOTFOUND\";\n}","map":{"version":3,"names":["getRandomIntegerInclusive","isThrottlingRetryResponse","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","exponentialRetryStrategy","options","retryInterval","_a","retryDelayInMs","maxRetryInterval","_b","maxRetryDelayInMs","retryAfterInMs","name","retry","retryCount","response","responseError","matchedSystemError","isSystemError","ignoreSystemErrors","isExponential","isExponentialRetryResponse","ignoreExponentialResponse","ignoreHttpStatusCodes","unknownResponse","skipStrategy","errorToThrow","exponentialDelay","Math","pow","clampedExponentialDelay","min","Boolean","status","undefined","err","code"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\core-rest-pipeline\\src\\retryStrategies\\exponentialRetryStrategy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelineResponse } from \"../interfaces.js\";\nimport type { RestError } from \"../restError.js\";\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport type { RetryStrategy } from \"./retryStrategy.js\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy.js\";\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(\n  options: {\n    /**\n     * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n     * (1 second.) The delay increases exponentially with each retry up to a maximum\n     * specified by maxRetryDelayInMs.\n     */\n    retryDelayInMs?: number;\n\n    /**\n     * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n     * to 64000 (64 seconds).\n     */\n    maxRetryDelayInMs?: number;\n\n    /**\n     * If true it won't retry if it received a system error.\n     */\n    ignoreSystemErrors?: boolean;\n\n    /**\n     * If true it won't retry if it received a non-fatal HTTP status code.\n     */\n    ignoreHttpStatusCodes?: boolean;\n  } = {},\n): RetryStrategy {\n  const retryInterval = options.retryDelayInMs ?? DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = options.maxRetryDelayInMs ?? DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n\n  let retryAfterInMs = retryInterval;\n\n  return {\n    name: \"exponentialRetryStrategy\",\n    retry({ retryCount, response, responseError }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return { skipStrategy: true };\n      }\n\n      if (responseError && !matchedSystemError && !isExponential) {\n        return { errorToThrow: responseError };\n      }\n\n      // Exponentially increase the delay each time\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n      // Don't let the delay exceed the maximum\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n      // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n      retryAfterInMs =\n        clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return { retryAfterInMs };\n    },\n  };\n}\n\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response?: PipelineResponse): boolean {\n  return Boolean(\n    response &&\n      response.status !== undefined &&\n      (response.status >= 500 || response.status === 408) &&\n      response.status !== 501 &&\n      response.status !== 505,\n  );\n}\n\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err?: RestError): boolean {\n  if (!err) {\n    return false;\n  }\n  return (\n    err.code === \"ETIMEDOUT\" ||\n    err.code === \"ESOCKETTIMEDOUT\" ||\n    err.code === \"ECONNREFUSED\" ||\n    err.code === \"ECONNRESET\" ||\n    err.code === \"ENOENT\" ||\n    err.code === \"ENOTFOUND\"\n  );\n}\n"],"mappings":"AAAA;AACA;AAIA,SAASA,yBAAyB,QAAQ,kBAAkB;AAE5D,SAASC,yBAAyB,QAAQ,8BAA8B;AAExE;AACA,MAAMC,6BAA6B,GAAG,IAAI;AAC1C,MAAMC,iCAAiC,GAAG,IAAI,GAAG,EAAE;AAEnD;;;;;AAKA,OAAM,SAAUC,wBAAwBA,CACtCC,OAAA,GAuBI,EAAE;;EAEN,MAAMC,aAAa,GAAG,CAAAC,EAAA,GAAAF,OAAO,CAACG,cAAc,cAAAD,EAAA,cAAAA,EAAA,GAAIL,6BAA6B;EAC7E,MAAMO,gBAAgB,GAAG,CAAAC,EAAA,GAAAL,OAAO,CAACM,iBAAiB,cAAAD,EAAA,cAAAA,EAAA,GAAIP,iCAAiC;EAEvF,IAAIS,cAAc,GAAGN,aAAa;EAElC,OAAO;IACLO,IAAI,EAAE,0BAA0B;IAChCC,KAAKA,CAAC;MAAEC,UAAU;MAAEC,QAAQ;MAAEC;IAAa,CAAE;MAC3C,MAAMC,kBAAkB,GAAGC,aAAa,CAACF,aAAa,CAAC;MACvD,MAAMG,kBAAkB,GAAGF,kBAAkB,IAAIb,OAAO,CAACe,kBAAkB;MAE3E,MAAMC,aAAa,GAAGC,0BAA0B,CAACN,QAAQ,CAAC;MAC1D,MAAMO,yBAAyB,GAAGF,aAAa,IAAIhB,OAAO,CAACmB,qBAAqB;MAChF,MAAMC,eAAe,GAAGT,QAAQ,KAAKf,yBAAyB,CAACe,QAAQ,CAAC,IAAI,CAACK,aAAa,CAAC;MAE3F,IAAII,eAAe,IAAIF,yBAAyB,IAAIH,kBAAkB,EAAE;QACtE,OAAO;UAAEM,YAAY,EAAE;QAAI,CAAE;MAC/B;MAEA,IAAIT,aAAa,IAAI,CAACC,kBAAkB,IAAI,CAACG,aAAa,EAAE;QAC1D,OAAO;UAAEM,YAAY,EAAEV;QAAa,CAAE;MACxC;MAEA;MACA,MAAMW,gBAAgB,GAAGhB,cAAc,GAAGiB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEf,UAAU,CAAC;MACjE;MACA,MAAMgB,uBAAuB,GAAGF,IAAI,CAACG,GAAG,CAACvB,gBAAgB,EAAEmB,gBAAgB,CAAC;MAC5E;MACA;MACAhB,cAAc,GACZmB,uBAAuB,GAAG,CAAC,GAAG/B,yBAAyB,CAAC,CAAC,EAAE+B,uBAAuB,GAAG,CAAC,CAAC;MACzF,OAAO;QAAEnB;MAAc,CAAE;IAC3B;GACD;AACH;AAEA;;;;;AAKA,OAAM,SAAUU,0BAA0BA,CAACN,QAA2B;EACpE,OAAOiB,OAAO,CACZjB,QAAQ,IACNA,QAAQ,CAACkB,MAAM,KAAKC,SAAS,KAC5BnB,QAAQ,CAACkB,MAAM,IAAI,GAAG,IAAIlB,QAAQ,CAACkB,MAAM,KAAK,GAAG,CAAC,IACnDlB,QAAQ,CAACkB,MAAM,KAAK,GAAG,IACvBlB,QAAQ,CAACkB,MAAM,KAAK,GAAG,CAC1B;AACH;AAEA;;;AAGA,OAAM,SAAUf,aAAaA,CAACiB,GAAe;EAC3C,IAAI,CAACA,GAAG,EAAE;IACR,OAAO,KAAK;EACd;EACA,OACEA,GAAG,CAACC,IAAI,KAAK,WAAW,IACxBD,GAAG,CAACC,IAAI,KAAK,iBAAiB,IAC9BD,GAAG,CAACC,IAAI,KAAK,cAAc,IAC3BD,GAAG,CAACC,IAAI,KAAK,YAAY,IACzBD,GAAG,CAACC,IAAI,KAAK,QAAQ,IACrBD,GAAG,CAACC,IAAI,KAAK,WAAW;AAE5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}