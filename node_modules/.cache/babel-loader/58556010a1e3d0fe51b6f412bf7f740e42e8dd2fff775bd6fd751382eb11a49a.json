{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { formatSuccess } from \"../../util/logging\";\nimport { ensureValidMsalToken, getAuthority, getKnownAuthorities, msalToPublic } from \"../utils\";\nimport { processMultiTenantRequest, resolveAdditionallyAllowedTenantIds, resolveTenantId } from \"../../util/tenantIdUtils\";\nimport { DefaultTenantId } from \"../../constants\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(options) {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority, options.disableInstanceDiscovery),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin\n    }\n  };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport class MsalBrowser {\n  constructor(options) {\n    var _a;\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds((_a = options === null || options === void 0 ? void 0 : options.tokenCredentialOptions) === null || _a === void 0 ? void 0 : _a.additionallyAllowedTenants);\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n    if (options.authenticationRecord) {\n      this.account = Object.assign(Object.assign({}, options.authenticationRecord), {\n        tenantId: this.tenantId\n      });\n    }\n  }\n  /**\n   * In the browsers we don't need to init()\n   */\n  async init() {\n    // Nothing to do here.\n  }\n  /**\n   * Clears MSAL's cache.\n   */\n  async logout() {\n    var _a;\n    (_a = this.app) === null || _a === void 0 ? void 0 : _a.logout();\n  }\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  async getToken(scopes, options = {}) {\n    const tenantId = processMultiTenantRequest(this.tenantId, options, this.additionallyAllowedTenantIds) || this.tenantId;\n    if (!options.authority) {\n      options.authority = getAuthority(tenantId, this.authorityHost);\n    }\n    // We ensure that redirection is handled at this point.\n    await this.handleRedirect();\n    if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n      await this.login(scopes);\n    }\n    return this.getTokenSilent(scopes).catch(err => {\n      if (err.name !== \"AuthenticationRequiredError\") {\n        throw err;\n      }\n      if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n        throw new AuthenticationRequiredError({\n          scopes,\n          getTokenOptions: options,\n          message: \"Automatic authentication has been disabled. You may call the authentication() method.\"\n        });\n      }\n      this.logger.info(`Silent authentication failed, falling back to interactive method ${this.loginStyle}`);\n      return this.doGetToken(scopes);\n    });\n  }\n  /**\n   * Handles the MSAL authentication result.\n   * If the result has an account, we update the local account reference.\n   * If the token received is invalid, an error will be thrown depending on what's missing.\n   */\n  handleResult(scopes, result, getTokenOptions) {\n    var _a;\n    if (result === null || result === void 0 ? void 0 : result.account) {\n      this.account = msalToPublic(this.clientId, result.account);\n    }\n    ensureValidMsalToken(scopes, result, getTokenOptions);\n    this.logger.getToken.info(formatSuccess(scopes));\n    return {\n      token: result.accessToken,\n      expiresOnTimestamp: result.expiresOn.getTime(),\n      refreshAfterTimestamp: (_a = result.refreshOn) === null || _a === void 0 ? void 0 : _a.getTime(),\n      tokenType: \"Bearer\"\n    };\n  }\n}","map":{"version":3,"names":["AuthenticationRequiredError","CredentialUnavailableError","formatSuccess","ensureValidMsalToken","getAuthority","getKnownAuthorities","msalToPublic","processMultiTenantRequest","resolveAdditionallyAllowedTenantIds","resolveTenantId","DefaultTenantId","defaultBrowserMsalConfig","options","tenantId","authority","authorityHost","auth","clientId","knownAuthorities","disableInstanceDiscovery","redirectUri","self","location","origin","MsalBrowser","constructor","logger","loginStyle","additionallyAllowedTenantIds","_a","tokenCredentialOptions","additionallyAllowedTenants","msalConfig","disableAutomaticAuthentication","authenticationRecord","account","Object","assign","init","logout","app","getToken","scopes","handleRedirect","getActiveAccount","login","getTokenSilent","catch","err","name","getTokenOptions","message","info","doGetToken","handleResult","result","token","accessToken","expiresOnTimestamp","expiresOn","getTime","refreshAfterTimestamp","refreshOn","tokenType"],"sources":["C:\\Users\\phlos\\wv-temperature-map\\src\\backend\\node_modules\\@azure\\identity\\src\\msal\\browserFlows\\msalBrowserCommon.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as msalBrowser from \"@azure/msal-browser\";\n\nimport { AccessToken, GetTokenOptions } from \"@azure/core-auth\";\nimport { AuthenticationRecord, MsalResult } from \"../types\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { CredentialLogger, formatSuccess } from \"../../util/logging\";\nimport { MsalFlow, MsalFlowOptions } from \"./flows\";\nimport { ensureValidMsalToken, getAuthority, getKnownAuthorities, msalToPublic } from \"../utils\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n  resolveTenantId,\n} from \"../../util/tenantIdUtils\";\n\nimport { BrowserLoginStyle } from \"../../credentials/interactiveBrowserCredentialOptions\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\nimport { DefaultTenantId } from \"../../constants\";\nimport { LogPolicyOptions } from \"@azure/core-rest-pipeline\";\nimport { MultiTenantTokenCredentialOptions } from \"../../credentials/multiTenantTokenCredentialOptions\";\n\n/**\n * Union of the constructor parameters that all MSAL flow types take.\n * Some properties might not be used by some flow types.\n */\nexport interface MsalBrowserFlowOptions extends MsalFlowOptions {\n  tokenCredentialOptions: MultiTenantTokenCredentialOptions;\n  redirectUri?: string;\n  loginStyle: BrowserLoginStyle;\n  loginHint?: string;\n  /**\n   * Allows users to configure settings for logging policy options, allow logging account information and personally identifiable information for customer support.\n   */\n  loggingOptions?: LogPolicyOptions & {\n    /**\n     * Allows logging account information once the authentication flow succeeds.\n     */\n    allowLoggingAccountIdentifiers?: boolean;\n    /**\n     * Allows logging personally identifiable information for customer support.\n     */\n    enableUnsafeSupportLogging?: boolean;\n  };\n}\n\n/**\n * The common methods we use to work with the MSAL browser flows.\n * @internal\n */\nexport interface MsalBrowserFlow extends MsalFlow {\n  login(scopes?: string[]): Promise<AuthenticationRecord | undefined>;\n  handleRedirect(): Promise<AuthenticationRecord | undefined>;\n}\n\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(\n  options: MsalBrowserFlowOptions,\n): msalBrowser.Configuration {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId!,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority, options.disableInstanceDiscovery),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin,\n    },\n  };\n}\n\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport abstract class MsalBrowser implements MsalBrowserFlow {\n  protected loginStyle: BrowserLoginStyle;\n  protected clientId: string;\n  protected tenantId: string;\n  protected additionallyAllowedTenantIds: string[];\n  protected authorityHost?: string;\n  protected account: AuthenticationRecord | undefined;\n  protected msalConfig: msalBrowser.Configuration;\n  protected disableAutomaticAuthentication?: boolean;\n  protected app?: msalBrowser.IPublicClientApplication;\n  protected logger: CredentialLogger;\n\n  constructor(options: MsalBrowserFlowOptions) {\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.tokenCredentialOptions?.additionallyAllowedTenants,\n    );\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n\n    if (options.authenticationRecord) {\n      this.account = {\n        ...options.authenticationRecord,\n        tenantId: this.tenantId,\n      };\n    }\n  }\n\n  /**\n   * In the browsers we don't need to init()\n   */\n  async init(): Promise<void> {\n    // Nothing to do here.\n  }\n\n  /**\n   * Attempts to handle a redirection request the least amount of times possible.\n   */\n  public abstract handleRedirect(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Clears MSAL's cache.\n   */\n  async logout(): Promise<void> {\n    this.app?.logout();\n  }\n\n  /**\n   * Uses MSAL to retrieve the active account.\n   */\n  public abstract getActiveAccount(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Uses MSAL to trigger a redirect or a popup login.\n   */\n  public abstract login(scopes?: string | string[]): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Attempts to retrieve a token from cache.\n   */\n  public abstract getTokenSilent(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve the token in the browser.\n   */\n  protected abstract doGetToken(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  public async getToken(\n    scopes: string[],\n    options: CredentialFlowGetTokenOptions = {},\n  ): Promise<AccessToken> {\n    const tenantId =\n      processMultiTenantRequest(this.tenantId, options, this.additionallyAllowedTenantIds) ||\n      this.tenantId;\n\n    if (!options.authority) {\n      options.authority = getAuthority(tenantId, this.authorityHost);\n    }\n\n    // We ensure that redirection is handled at this point.\n    await this.handleRedirect();\n\n    if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n      await this.login(scopes);\n    }\n    return this.getTokenSilent(scopes).catch((err) => {\n      if (err.name !== \"AuthenticationRequiredError\") {\n        throw err;\n      }\n      if (options?.disableAutomaticAuthentication) {\n        throw new AuthenticationRequiredError({\n          scopes,\n          getTokenOptions: options,\n          message:\n            \"Automatic authentication has been disabled. You may call the authentication() method.\",\n        });\n      }\n      this.logger.info(\n        `Silent authentication failed, falling back to interactive method ${this.loginStyle}`,\n      );\n      return this.doGetToken(scopes);\n    });\n  }\n\n  /**\n   * Handles the MSAL authentication result.\n   * If the result has an account, we update the local account reference.\n   * If the token received is invalid, an error will be thrown depending on what's missing.\n   */\n  protected handleResult(\n    scopes: string | string[],\n    result?: MsalResult,\n    getTokenOptions?: GetTokenOptions,\n  ): AccessToken {\n    if (result?.account) {\n      this.account = msalToPublic(this.clientId, result.account);\n    }\n    ensureValidMsalToken(scopes, result, getTokenOptions);\n    this.logger.getToken.info(formatSuccess(scopes));\n    return {\n      token: result.accessToken,\n      expiresOnTimestamp: result.expiresOn.getTime(),\n      refreshAfterTimestamp: result.refreshOn?.getTime(),\n      tokenType: \"Bearer\",\n    } as AccessToken;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}